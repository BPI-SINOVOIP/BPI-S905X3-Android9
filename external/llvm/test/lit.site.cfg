import sys
import os

aosp_dir = os.getenv("ANDROID_BUILD_TOP")

## Autogenerated by LLVM/Clang configuration.
# Do not edit!
config.enable_ffi = ""
config.enable_timestamps = 0
config.go_executable = ""
config.gold_executable = "ld.gold"
config.include_go_tests = 0
config.ld64_executable = "ld"
config.have_ocamlopt = ""
config.have_ocaml_ounit = ""
config.host_triple = "x86_64-unknown-linux-gnu"
config.target_triple = "x86_64-unknown-linux-gnu"
config.llvm_src_root = aosp_dir + "/external/llvm"
config.llvm_obj_root = aosp_dir + "/out/stage2/host/linux-x86/obj/test_llvm"
config.llvm_tools_dir = aosp_dir + "/out/stage2/host/linux-x86/bin"
config.llvm_shlib_dir = aosp_dir + "/out/stage2/host/linux-x86/lib64"
config.llvm_shlib_ext = ".so"
config.llvm_exe_ext = ""
config.lit_tools_dir = ""
config.python_executable = "/usr/bin/python"
config.ocaml_flags = ""
config.ocamlfind_executable = ""
config.enable_shared = 0
config.enable_assertions = 0
config.targets_to_build = " X86 AArch64 ARM Mips"
config.llvm_bindings = ""
config.host_cc = "/usr/bin/cc"
config.host_cxx = "/usr/bin/c++"
config.host_ldflags = ""
config.host_os = "Linux"
config.host_arch = "x86_64"
config.llvm_use_intel_jitevents = "OFF"
config.llvm_use_sanitizer = ""
config.have_zlib = ""
config.have_libxar = 0
config.have_dia_sdk = 0
config.enable_ffi = 0
config.test_examples = 0

# Support substitution of the tools_dir with user parameters. This is
# used when we can't determine the tool dir at configuration time.
try:
    config.llvm_tools_dir = config.llvm_tools_dir % lit_config.params
    config.llvm_shlib_dir = config.llvm_shlib_dir % lit_config.params
except KeyError:
    e = sys.exc_info()[1]
    key, = e.args
    lit_config.fatal("unable to find %r parameter, use '--param=%s=VALUE'" % (key,key))

# Let the main config do the real work.
lit_config.load_config(config, aosp_dir + "/external/llvm/test/lit.cfg")
