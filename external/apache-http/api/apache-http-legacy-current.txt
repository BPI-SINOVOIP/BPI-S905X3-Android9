package android.net.compatibility {

  public class WebAddress {
    ctor public WebAddress(java.lang.String) throws java.lang.IllegalArgumentException;
    method public java.lang.String getAuthInfo();
    method public java.lang.String getHost();
    method public java.lang.String getPath();
    method public int getPort();
    method public java.lang.String getScheme();
    method public void setAuthInfo(java.lang.String);
    method public void setHost(java.lang.String);
    method public void setPath(java.lang.String);
    method public void setPort(int);
    method public void setScheme(java.lang.String);
  }

}

package android.net.http {

  public final class AndroidHttpClient implements org.apache.http.client.HttpClient {
    method public void close();
    method public void disableCurlLogging();
    method public void enableCurlLogging(java.lang.String, int);
    method public org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) throws java.io.IOException;
    method public org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext) throws java.io.IOException;
    method public org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest) throws java.io.IOException;
    method public org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws java.io.IOException;
    method public <T> T execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler<? extends T>) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public <T> T execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler<? extends T>, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public <T> T execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler<? extends T>) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public <T> T execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler<? extends T>, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public static org.apache.http.entity.AbstractHttpEntity getCompressedEntity(byte[], android.content.ContentResolver) throws java.io.IOException;
    method public org.apache.http.conn.ClientConnectionManager getConnectionManager();
    method public static long getMinGzipSize(android.content.ContentResolver);
    method public org.apache.http.params.HttpParams getParams();
    method public static java.io.InputStream getUngzippedContent(org.apache.http.HttpEntity) throws java.io.IOException;
    method public static void modifyRequestToAcceptGzipResponse(org.apache.http.HttpRequest);
    method public static android.net.http.AndroidHttpClient newInstance(java.lang.String, android.content.Context);
    method public static android.net.http.AndroidHttpClient newInstance(java.lang.String);
    method public static long parseDate(java.lang.String);
    field public static long DEFAULT_SYNC_MIN_GZIP_BYTES;
  }

  public class AndroidHttpClientConnection implements org.apache.http.HttpConnection org.apache.http.HttpInetConnection {
    ctor public AndroidHttpClientConnection();
    method public void bind(java.net.Socket, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public void close() throws java.io.IOException;
    method protected void doFlush() throws java.io.IOException;
    method public void flush() throws java.io.IOException;
    method public java.net.InetAddress getLocalAddress();
    method public int getLocalPort();
    method public org.apache.http.HttpConnectionMetrics getMetrics();
    method public java.net.InetAddress getRemoteAddress();
    method public int getRemotePort();
    method public int getSocketTimeout();
    method public boolean isOpen();
    method public boolean isStale();
    method public org.apache.http.StatusLine parseResponseHeader(android.net.http.Headers) throws java.io.IOException, org.apache.http.ParseException;
    method public org.apache.http.HttpEntity receiveResponseEntity(android.net.http.Headers);
    method public void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) throws org.apache.http.HttpException, java.io.IOException;
    method public void sendRequestHeader(org.apache.http.HttpRequest) throws org.apache.http.HttpException, java.io.IOException;
    method public void setSocketTimeout(int);
    method public void shutdown() throws java.io.IOException;
  }

  public class CertificateChainValidator {
    method public android.net.http.SslError doHandshakeAndValidateServerCertificates(android.net.http.HttpsConnection, javax.net.ssl.SSLSocket, java.lang.String) throws java.io.IOException;
    method public static android.net.http.CertificateChainValidator getInstance();
    method public static void handleTrustStorageUpdate();
    method public static android.net.http.SslError verifyServerCertificates(byte[][], java.lang.String, java.lang.String) throws java.io.IOException;
  }

  public class DelegatingSSLSession implements javax.net.ssl.SSLSession {
    ctor protected DelegatingSSLSession();
    method public int getApplicationBufferSize();
    method public java.lang.String getCipherSuite();
    method public long getCreationTime();
    method public byte[] getId();
    method public long getLastAccessedTime();
    method public java.security.cert.Certificate[] getLocalCertificates();
    method public java.security.Principal getLocalPrincipal();
    method public int getPacketBufferSize();
    method public javax.security.cert.X509Certificate[] getPeerCertificateChain() throws javax.net.ssl.SSLPeerUnverifiedException;
    method public java.security.cert.Certificate[] getPeerCertificates() throws javax.net.ssl.SSLPeerUnverifiedException;
    method public java.lang.String getPeerHost();
    method public int getPeerPort();
    method public java.security.Principal getPeerPrincipal() throws javax.net.ssl.SSLPeerUnverifiedException;
    method public java.lang.String getProtocol();
    method public javax.net.ssl.SSLSessionContext getSessionContext();
    method public java.lang.Object getValue(java.lang.String);
    method public java.lang.String[] getValueNames();
    method public void invalidate();
    method public boolean isValid();
    method public void putValue(java.lang.String, java.lang.Object);
    method public void removeValue(java.lang.String);
  }

  public static class DelegatingSSLSession.CertificateWrap extends android.net.http.DelegatingSSLSession {
    ctor public DelegatingSSLSession.CertificateWrap(java.security.cert.Certificate);
  }

  public abstract interface EventHandler {
    method public abstract void certificate(android.net.http.SslCertificate);
    method public abstract void data(byte[], int);
    method public abstract void endData();
    method public abstract void error(int, java.lang.String);
    method public abstract boolean handleSslErrorRequest(android.net.http.SslError);
    method public abstract void headers(android.net.http.Headers);
    method public abstract void status(int, int, int, java.lang.String);
    field public static final int ERROR = -1; // 0xffffffff
    field public static final int ERROR_AUTH = -4; // 0xfffffffc
    field public static final int ERROR_BAD_URL = -12; // 0xfffffff4
    field public static final int ERROR_CONNECT = -6; // 0xfffffffa
    field public static final int ERROR_FAILED_SSL_HANDSHAKE = -11; // 0xfffffff5
    field public static final int ERROR_IO = -7; // 0xfffffff9
    field public static final int ERROR_LOOKUP = -2; // 0xfffffffe
    field public static final int ERROR_PROXYAUTH = -5; // 0xfffffffb
    field public static final int ERROR_REDIRECT_LOOP = -9; // 0xfffffff7
    field public static final int ERROR_TIMEOUT = -8; // 0xfffffff8
    field public static final int ERROR_UNSUPPORTED_AUTH_SCHEME = -3; // 0xfffffffd
    field public static final int ERROR_UNSUPPORTED_SCHEME = -10; // 0xfffffff6
    field public static final int FILE_ERROR = -13; // 0xfffffff3
    field public static final int FILE_NOT_FOUND_ERROR = -14; // 0xfffffff2
    field public static final int OK = 0; // 0x0
    field public static final int TOO_MANY_REQUESTS_ERROR = -15; // 0xfffffff1
  }

  public final class Headers {
    ctor public Headers();
    method public java.lang.String getAcceptRanges();
    method public java.lang.String getCacheControl();
    method public int getConnectionType();
    method public java.lang.String getContentDisposition();
    method public java.lang.String getContentEncoding();
    method public long getContentLength();
    method public java.lang.String getContentType();
    method public java.lang.String getEtag();
    method public java.lang.String getExpires();
    method public void getHeaders(android.net.http.Headers.HeaderCallback);
    method public java.lang.String getLastModified();
    method public java.lang.String getLocation();
    method public java.lang.String getPragma();
    method public java.lang.String getProxyAuthenticate();
    method public java.lang.String getRefresh();
    method public java.util.ArrayList<java.lang.String> getSetCookie();
    method public long getTransferEncoding();
    method public java.lang.String getWwwAuthenticate();
    method public java.lang.String getXPermittedCrossDomainPolicies();
    method public void parseHeader(org.apache.http.util.CharArrayBuffer);
    method public void setAcceptRanges(java.lang.String);
    method public void setCacheControl(java.lang.String);
    method public void setContentDisposition(java.lang.String);
    method public void setContentEncoding(java.lang.String);
    method public void setContentLength(long);
    method public void setContentType(java.lang.String);
    method public void setEtag(java.lang.String);
    method public void setExpires(java.lang.String);
    method public void setLastModified(java.lang.String);
    method public void setLocation(java.lang.String);
    method public void setProxyAuthenticate(java.lang.String);
    method public void setWwwAuthenticate(java.lang.String);
    method public void setXPermittedCrossDomainPolicies(java.lang.String);
    field public static final java.lang.String ACCEPT_RANGES = "accept-ranges";
    field public static final java.lang.String CACHE_CONTROL = "cache-control";
    field public static final int CONN_CLOSE = 1; // 0x1
    field public static final java.lang.String CONN_DIRECTIVE = "connection";
    field public static final int CONN_KEEP_ALIVE = 2; // 0x2
    field public static final java.lang.String CONTENT_DISPOSITION = "content-disposition";
    field public static final java.lang.String CONTENT_ENCODING = "content-encoding";
    field public static final java.lang.String CONTENT_LEN = "content-length";
    field public static final java.lang.String CONTENT_TYPE = "content-type";
    field public static final java.lang.String ETAG = "etag";
    field public static final java.lang.String EXPIRES = "expires";
    field public static final java.lang.String LAST_MODIFIED = "last-modified";
    field public static final java.lang.String LOCATION = "location";
    field public static final int NO_CONN_TYPE = 0; // 0x0
    field public static final long NO_CONTENT_LENGTH = -1L; // 0xffffffffffffffffL
    field public static final long NO_TRANSFER_ENCODING = 0L; // 0x0L
    field public static final java.lang.String PRAGMA = "pragma";
    field public static final java.lang.String PROXY_AUTHENTICATE = "proxy-authenticate";
    field public static final java.lang.String PROXY_CONNECTION = "proxy-connection";
    field public static final java.lang.String REFRESH = "refresh";
    field public static final java.lang.String SET_COOKIE = "set-cookie";
    field public static final java.lang.String TRANSFER_ENCODING = "transfer-encoding";
    field public static final java.lang.String WWW_AUTHENTICATE = "www-authenticate";
    field public static final java.lang.String X_PERMITTED_CROSS_DOMAIN_POLICIES = "x-permitted-cross-domain-policies";
  }

  public static abstract interface Headers.HeaderCallback {
    method public abstract void header(java.lang.String, java.lang.String);
  }

  public class HttpAuthHeader {
    ctor public HttpAuthHeader(java.lang.String);
    method public java.lang.String getAlgorithm();
    method public java.lang.String getNonce();
    method public java.lang.String getOpaque();
    method public java.lang.String getPassword();
    method public java.lang.String getQop();
    method public java.lang.String getRealm();
    method public int getScheme();
    method public boolean getStale();
    method public java.lang.String getUsername();
    method public boolean isBasic();
    method public boolean isDigest();
    method public boolean isProxy();
    method public boolean isSupportedScheme();
    method public void setPassword(java.lang.String);
    method public void setProxy();
    method public void setUsername(java.lang.String);
    field public static final int BASIC = 1; // 0x1
    field public static final java.lang.String BASIC_TOKEN = "Basic";
    field public static final int DIGEST = 2; // 0x2
    field public static final java.lang.String DIGEST_TOKEN = "Digest";
    field public static final int UNKNOWN = 0; // 0x0
  }

  public final class HttpResponseCache extends java.net.ResponseCache implements java.io.Closeable {
    method public void close() throws java.io.IOException;
    method public void delete() throws java.io.IOException;
    method public void flush();
    method public java.net.CacheResponse get(java.net.URI, java.lang.String, java.util.Map<java.lang.String, java.util.List<java.lang.String>>) throws java.io.IOException;
    method public int getHitCount();
    method public static android.net.http.HttpResponseCache getInstalled();
    method public int getNetworkCount();
    method public int getRequestCount();
    method public static synchronized android.net.http.HttpResponseCache install(java.io.File, long) throws java.io.IOException;
    method public long maxSize();
    method public java.net.CacheRequest put(java.net.URI, java.net.URLConnection) throws java.io.IOException;
    method public long size();
  }

  public class HttpsConnection {
    method public static void initializeEngine(java.io.File);
  }

  public class LoggingEventHandler implements android.net.http.EventHandler {
    ctor public LoggingEventHandler();
    method public void certificate(android.net.http.SslCertificate);
    method public void data(byte[], int);
    method public void endData();
    method public void error(int, java.lang.String);
    method public boolean handleSslErrorRequest(android.net.http.SslError);
    method public void headers(android.net.http.Headers);
    method public void locationChanged(java.lang.String, boolean);
    method public void requestSent();
    method public void status(int, int, int, java.lang.String);
  }

  public class RequestHandle {
    ctor public RequestHandle(android.net.http.RequestQueue, java.lang.String, android.net.compatibility.WebAddress, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.io.InputStream, int, android.net.http.Request);
    ctor public RequestHandle(android.net.http.RequestQueue, java.lang.String, android.net.compatibility.WebAddress, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, java.io.InputStream, int, android.net.http.Request, android.net.http.Connection);
    method public static java.lang.String authorizationHeader(boolean);
    method public void cancel();
    method public static java.lang.String computeBasicAuthResponse(java.lang.String, java.lang.String);
    method public java.lang.String getMethod();
    method public int getRedirectCount();
    method public void handleSslErrorResponse(boolean);
    method public boolean isRedirectMax();
    method public void pauseRequest(boolean);
    method public void processRequest();
    method public void setRedirectCount(int);
    method public void setupBasicAuthResponse(boolean, java.lang.String, java.lang.String);
    method public void setupDigestAuthResponse(boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
    method public boolean setupRedirect(java.lang.String, int, java.util.Map<java.lang.String, java.lang.String>);
    method public void waitUntilComplete();
    field public static final int MAX_REDIRECT_COUNT = 16; // 0x10
  }

  public class RequestQueue {
    ctor public RequestQueue(android.content.Context);
    ctor public RequestQueue(android.content.Context, int);
    method public synchronized void disablePlatformNotifications();
    method public synchronized void enablePlatformNotifications();
    method public org.apache.http.HttpHost getProxyHost();
    method public synchronized android.net.http.Request getRequest();
    method public synchronized android.net.http.Request getRequest(org.apache.http.HttpHost);
    method public synchronized boolean haveRequest(org.apache.http.HttpHost);
    method public android.net.http.RequestHandle queueRequest(java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, android.net.http.EventHandler, java.io.InputStream, int);
    method public android.net.http.RequestHandle queueRequest(java.lang.String, android.net.compatibility.WebAddress, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, android.net.http.EventHandler, java.io.InputStream, int);
    method protected synchronized void queueRequest(android.net.http.Request, boolean);
    method public android.net.http.RequestHandle queueSynchronousRequest(java.lang.String, android.net.compatibility.WebAddress, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, android.net.http.EventHandler, java.io.InputStream, int);
    method public void requeueRequest(android.net.http.Request);
    method public void shutdown();
    method public void startTiming();
    method public void stopTiming();
  }

  public class SslCertificate {
    ctor public deprecated SslCertificate(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
    ctor public deprecated SslCertificate(java.lang.String, java.lang.String, java.util.Date, java.util.Date);
    ctor public SslCertificate(java.security.cert.X509Certificate);
    method public android.net.http.SslCertificate.DName getIssuedBy();
    method public android.net.http.SslCertificate.DName getIssuedTo();
    method public deprecated java.lang.String getValidNotAfter();
    method public java.util.Date getValidNotAfterDate();
    method public deprecated java.lang.String getValidNotBefore();
    method public java.util.Date getValidNotBeforeDate();
    method public static android.net.http.SslCertificate restoreState(android.os.Bundle);
    method public static android.os.Bundle saveState(android.net.http.SslCertificate);
  }

  public class SslCertificate.DName {
    ctor public SslCertificate.DName(java.lang.String);
    method public java.lang.String getCName();
    method public java.lang.String getDName();
    method public java.lang.String getOName();
    method public java.lang.String getUName();
  }

  public class SslError {
    ctor public deprecated SslError(int, android.net.http.SslCertificate);
    ctor public deprecated SslError(int, java.security.cert.X509Certificate);
    ctor public SslError(int, android.net.http.SslCertificate, java.lang.String);
    ctor public SslError(int, java.security.cert.X509Certificate, java.lang.String);
    method public boolean addError(int);
    method public android.net.http.SslCertificate getCertificate();
    method public int getPrimaryError();
    method public java.lang.String getUrl();
    method public boolean hasError(int);
    field public static final int SSL_DATE_INVALID = 4; // 0x4
    field public static final int SSL_EXPIRED = 1; // 0x1
    field public static final int SSL_IDMISMATCH = 2; // 0x2
    field public static final int SSL_INVALID = 5; // 0x5
    field public static final deprecated int SSL_MAX_ERROR = 6; // 0x6
    field public static final int SSL_NOTYETVALID = 0; // 0x0
    field public static final int SSL_UNTRUSTED = 3; // 0x3
  }

}

package com.android.internal.http.multipart {

  public class ByteArrayPartSource implements com.android.internal.http.multipart.PartSource {
    ctor public ByteArrayPartSource(java.lang.String, byte[]);
    method public java.io.InputStream createInputStream();
    method public java.lang.String getFileName();
    method public long getLength();
  }

  public class FilePart extends com.android.internal.http.multipart.PartBase {
    ctor public FilePart(java.lang.String, com.android.internal.http.multipart.PartSource, java.lang.String, java.lang.String);
    ctor public FilePart(java.lang.String, com.android.internal.http.multipart.PartSource);
    ctor public FilePart(java.lang.String, java.io.File) throws java.io.FileNotFoundException;
    ctor public FilePart(java.lang.String, java.io.File, java.lang.String, java.lang.String) throws java.io.FileNotFoundException;
    ctor public FilePart(java.lang.String, java.lang.String, java.io.File) throws java.io.FileNotFoundException;
    ctor public FilePart(java.lang.String, java.lang.String, java.io.File, java.lang.String, java.lang.String) throws java.io.FileNotFoundException;
    method protected com.android.internal.http.multipart.PartSource getSource();
    method protected long lengthOfData();
    method protected void sendData(java.io.OutputStream) throws java.io.IOException;
    field public static final java.lang.String DEFAULT_CHARSET = "ISO-8859-1";
    field public static final java.lang.String DEFAULT_CONTENT_TYPE = "application/octet-stream";
    field public static final java.lang.String DEFAULT_TRANSFER_ENCODING = "binary";
    field protected static final java.lang.String FILE_NAME = "; filename=";
  }

  public class FilePartSource implements com.android.internal.http.multipart.PartSource {
    ctor public FilePartSource(java.io.File) throws java.io.FileNotFoundException;
    ctor public FilePartSource(java.lang.String, java.io.File) throws java.io.FileNotFoundException;
    method public java.io.InputStream createInputStream() throws java.io.IOException;
    method public java.lang.String getFileName();
    method public long getLength();
  }

  public class MultipartEntity extends org.apache.http.entity.AbstractHttpEntity {
    ctor public MultipartEntity(com.android.internal.http.multipart.Part[], org.apache.http.params.HttpParams);
    ctor public MultipartEntity(com.android.internal.http.multipart.Part[]);
    method public java.io.InputStream getContent() throws java.io.IOException, java.lang.IllegalStateException;
    method public long getContentLength();
    method protected byte[] getMultipartBoundary();
    method public boolean isRepeatable();
    method public boolean isStreaming();
    method public void writeTo(java.io.OutputStream) throws java.io.IOException;
    field public static final java.lang.String MULTIPART_BOUNDARY = "http.method.multipart.boundary";
    field protected com.android.internal.http.multipart.Part[] parts;
  }

  public abstract class Part {
    ctor public Part();
    method public static deprecated java.lang.String getBoundary();
    method public abstract java.lang.String getCharSet();
    method public abstract java.lang.String getContentType();
    method public static long getLengthOfParts(com.android.internal.http.multipart.Part[]) throws java.io.IOException;
    method public static long getLengthOfParts(com.android.internal.http.multipart.Part[], byte[]) throws java.io.IOException;
    method public abstract java.lang.String getName();
    method protected byte[] getPartBoundary();
    method public abstract java.lang.String getTransferEncoding();
    method public boolean isRepeatable();
    method public long length() throws java.io.IOException;
    method protected abstract long lengthOfData() throws java.io.IOException;
    method public void send(java.io.OutputStream) throws java.io.IOException;
    method protected void sendContentTypeHeader(java.io.OutputStream) throws java.io.IOException;
    method protected abstract void sendData(java.io.OutputStream) throws java.io.IOException;
    method protected void sendDispositionHeader(java.io.OutputStream) throws java.io.IOException;
    method protected void sendEnd(java.io.OutputStream) throws java.io.IOException;
    method protected void sendEndOfHeader(java.io.OutputStream) throws java.io.IOException;
    method public static void sendParts(java.io.OutputStream, com.android.internal.http.multipart.Part[]) throws java.io.IOException;
    method public static void sendParts(java.io.OutputStream, com.android.internal.http.multipart.Part[], byte[]) throws java.io.IOException;
    method protected void sendStart(java.io.OutputStream) throws java.io.IOException;
    method protected void sendTransferEncodingHeader(java.io.OutputStream) throws java.io.IOException;
    field protected static final deprecated java.lang.String BOUNDARY = "----------------314159265358979323846";
    field protected static final deprecated byte[] BOUNDARY_BYTES;
    field protected static final java.lang.String CHARSET = "; charset=";
    field protected static final byte[] CHARSET_BYTES;
    field protected static final java.lang.String CONTENT_DISPOSITION = "Content-Disposition: form-data; name=";
    field protected static final byte[] CONTENT_DISPOSITION_BYTES;
    field protected static final java.lang.String CONTENT_TRANSFER_ENCODING = "Content-Transfer-Encoding: ";
    field protected static final byte[] CONTENT_TRANSFER_ENCODING_BYTES;
    field protected static final java.lang.String CONTENT_TYPE = "Content-Type: ";
    field protected static final byte[] CONTENT_TYPE_BYTES;
    field protected static final java.lang.String CRLF = "\r\n";
    field protected static final byte[] CRLF_BYTES;
    field protected static final java.lang.String EXTRA = "--";
    field protected static final byte[] EXTRA_BYTES;
    field protected static final java.lang.String QUOTE = "\"";
    field protected static final byte[] QUOTE_BYTES;
  }

  public abstract class PartBase extends com.android.internal.http.multipart.Part {
    ctor public PartBase(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
    method public java.lang.String getCharSet();
    method public java.lang.String getContentType();
    method public java.lang.String getName();
    method public java.lang.String getTransferEncoding();
    method public void setCharSet(java.lang.String);
    method public void setContentType(java.lang.String);
    method public void setName(java.lang.String);
    method public void setTransferEncoding(java.lang.String);
  }

  public abstract interface PartSource {
    method public abstract java.io.InputStream createInputStream() throws java.io.IOException;
    method public abstract java.lang.String getFileName();
    method public abstract long getLength();
  }

  public class StringPart extends com.android.internal.http.multipart.PartBase {
    ctor public StringPart(java.lang.String, java.lang.String, java.lang.String);
    ctor public StringPart(java.lang.String, java.lang.String);
    method protected long lengthOfData();
    method protected void sendData(java.io.OutputStream) throws java.io.IOException;
    field public static final java.lang.String DEFAULT_CHARSET = "US-ASCII";
    field public static final java.lang.String DEFAULT_CONTENT_TYPE = "text/plain";
    field public static final java.lang.String DEFAULT_TRANSFER_ENCODING = "8bit";
  }

}

package org.apache.commons.codec {

  public abstract deprecated interface BinaryDecoder implements org.apache.commons.codec.Decoder {
    method public abstract byte[] decode(byte[]) throws org.apache.commons.codec.DecoderException;
  }

  public abstract deprecated interface BinaryEncoder implements org.apache.commons.codec.Encoder {
    method public abstract byte[] encode(byte[]) throws org.apache.commons.codec.EncoderException;
  }

  public abstract deprecated interface Decoder {
    method public abstract java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException;
  }

  public deprecated class DecoderException extends java.lang.Exception {
    ctor public DecoderException(java.lang.String);
  }

  public abstract deprecated interface Encoder {
    method public abstract java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException;
  }

  public deprecated class EncoderException extends java.lang.Exception {
    ctor public EncoderException(java.lang.String);
  }

  public abstract deprecated interface StringDecoder implements org.apache.commons.codec.Decoder {
    method public abstract java.lang.String decode(java.lang.String) throws org.apache.commons.codec.DecoderException;
  }

  public abstract deprecated interface StringEncoder implements org.apache.commons.codec.Encoder {
    method public abstract java.lang.String encode(java.lang.String) throws org.apache.commons.codec.EncoderException;
  }

  public deprecated class StringEncoderComparator implements java.util.Comparator {
    ctor public StringEncoderComparator();
    ctor public StringEncoderComparator(org.apache.commons.codec.StringEncoder);
    method public int compare(java.lang.Object, java.lang.Object);
  }

}

package org.apache.commons.codec.binary {

  public deprecated class Base64 implements org.apache.commons.codec.BinaryDecoder org.apache.commons.codec.BinaryEncoder {
    ctor public Base64();
    method public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException;
    method public byte[] decode(byte[]);
    method public static byte[] decodeBase64(byte[]);
    method public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException;
    method public byte[] encode(byte[]);
    method public static byte[] encodeBase64(byte[]);
    method public static byte[] encodeBase64(byte[], boolean);
    method public static byte[] encodeBase64Chunked(byte[]);
    method public static boolean isArrayByteBase64(byte[]);
  }

  public deprecated class BinaryCodec implements org.apache.commons.codec.BinaryDecoder org.apache.commons.codec.BinaryEncoder {
    ctor public BinaryCodec();
    method public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException;
    method public byte[] decode(byte[]);
    method public byte[] encode(byte[]);
    method public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException;
    method public static byte[] fromAscii(char[]);
    method public static byte[] fromAscii(byte[]);
    method public static byte[] toAsciiBytes(byte[]);
    method public static char[] toAsciiChars(byte[]);
    method public static java.lang.String toAsciiString(byte[]);
    method public byte[] toByteArray(java.lang.String);
  }

  public deprecated class Hex implements org.apache.commons.codec.BinaryDecoder org.apache.commons.codec.BinaryEncoder {
    ctor public Hex();
    method public byte[] decode(byte[]) throws org.apache.commons.codec.DecoderException;
    method public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException;
    method public static byte[] decodeHex(char[]) throws org.apache.commons.codec.DecoderException;
    method public byte[] encode(byte[]);
    method public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException;
    method public static char[] encodeHex(byte[]);
    method protected static int toDigit(char, int) throws org.apache.commons.codec.DecoderException;
  }

}

package org.apache.commons.codec.language {

  public deprecated class DoubleMetaphone implements org.apache.commons.codec.StringEncoder {
    ctor public DoubleMetaphone();
    method protected char charAt(java.lang.String, int);
    method protected static boolean contains(java.lang.String, int, int, java.lang.String[]);
    method public java.lang.String doubleMetaphone(java.lang.String);
    method public java.lang.String doubleMetaphone(java.lang.String, boolean);
    method public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException;
    method public java.lang.String encode(java.lang.String);
    method public int getMaxCodeLen();
    method public boolean isDoubleMetaphoneEqual(java.lang.String, java.lang.String);
    method public boolean isDoubleMetaphoneEqual(java.lang.String, java.lang.String, boolean);
    method public void setMaxCodeLen(int);
    field protected int maxCodeLen;
  }

  public class DoubleMetaphone.DoubleMetaphoneResult {
    ctor public DoubleMetaphone.DoubleMetaphoneResult(int);
    method public void append(char);
    method public void append(char, char);
    method public void append(java.lang.String);
    method public void append(java.lang.String, java.lang.String);
    method public void appendAlternate(char);
    method public void appendAlternate(java.lang.String);
    method public void appendPrimary(char);
    method public void appendPrimary(java.lang.String);
    method public java.lang.String getAlternate();
    method public java.lang.String getPrimary();
    method public boolean isComplete();
  }

  public deprecated class Metaphone implements org.apache.commons.codec.StringEncoder {
    ctor public Metaphone();
    method public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException;
    method public java.lang.String encode(java.lang.String);
    method public int getMaxCodeLen();
    method public boolean isMetaphoneEqual(java.lang.String, java.lang.String);
    method public java.lang.String metaphone(java.lang.String);
    method public void setMaxCodeLen(int);
  }

  public deprecated class RefinedSoundex implements org.apache.commons.codec.StringEncoder {
    ctor public RefinedSoundex();
    ctor public RefinedSoundex(char[]);
    method public int difference(java.lang.String, java.lang.String) throws org.apache.commons.codec.EncoderException;
    method public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException;
    method public java.lang.String encode(java.lang.String);
    method public java.lang.String soundex(java.lang.String);
    field public static final org.apache.commons.codec.language.RefinedSoundex US_ENGLISH;
    field public static final char[] US_ENGLISH_MAPPING;
  }

  public deprecated class Soundex implements org.apache.commons.codec.StringEncoder {
    ctor public Soundex();
    ctor public Soundex(char[]);
    method public int difference(java.lang.String, java.lang.String) throws org.apache.commons.codec.EncoderException;
    method public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException;
    method public java.lang.String encode(java.lang.String);
    method public deprecated int getMaxLength();
    method public deprecated void setMaxLength(int);
    method public java.lang.String soundex(java.lang.String);
    field public static final org.apache.commons.codec.language.Soundex US_ENGLISH;
    field public static final char[] US_ENGLISH_MAPPING;
    field public static final java.lang.String US_ENGLISH_MAPPING_STRING = "01230120022455012623010202";
  }

}

package org.apache.commons.codec.net {

  public deprecated class BCodec implements org.apache.commons.codec.StringDecoder org.apache.commons.codec.StringEncoder {
    ctor public BCodec();
    ctor public BCodec(java.lang.String);
    method public java.lang.String decode(java.lang.String) throws org.apache.commons.codec.DecoderException;
    method public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException;
    method protected byte[] doDecoding(byte[]) throws org.apache.commons.codec.DecoderException;
    method protected byte[] doEncoding(byte[]) throws org.apache.commons.codec.EncoderException;
    method public java.lang.String encode(java.lang.String, java.lang.String) throws org.apache.commons.codec.EncoderException;
    method public java.lang.String encode(java.lang.String) throws org.apache.commons.codec.EncoderException;
    method public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException;
    method public java.lang.String getDefaultCharset();
    method protected java.lang.String getEncoding();
  }

  public deprecated class QCodec implements org.apache.commons.codec.StringDecoder org.apache.commons.codec.StringEncoder {
    ctor public QCodec();
    ctor public QCodec(java.lang.String);
    method public java.lang.String decode(java.lang.String) throws org.apache.commons.codec.DecoderException;
    method public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException;
    method protected byte[] doDecoding(byte[]) throws org.apache.commons.codec.DecoderException;
    method protected byte[] doEncoding(byte[]) throws org.apache.commons.codec.EncoderException;
    method public java.lang.String encode(java.lang.String, java.lang.String) throws org.apache.commons.codec.EncoderException;
    method public java.lang.String encode(java.lang.String) throws org.apache.commons.codec.EncoderException;
    method public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException;
    method public java.lang.String getDefaultCharset();
    method protected java.lang.String getEncoding();
    method public boolean isEncodeBlanks();
    method public void setEncodeBlanks(boolean);
  }

  public deprecated class QuotedPrintableCodec implements org.apache.commons.codec.BinaryDecoder org.apache.commons.codec.BinaryEncoder org.apache.commons.codec.StringDecoder org.apache.commons.codec.StringEncoder {
    ctor public QuotedPrintableCodec();
    ctor public QuotedPrintableCodec(java.lang.String);
    method public byte[] decode(byte[]) throws org.apache.commons.codec.DecoderException;
    method public java.lang.String decode(java.lang.String, java.lang.String) throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException;
    method public java.lang.String decode(java.lang.String) throws org.apache.commons.codec.DecoderException;
    method public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException;
    method public static final byte[] decodeQuotedPrintable(byte[]) throws org.apache.commons.codec.DecoderException;
    method public byte[] encode(byte[]);
    method public java.lang.String encode(java.lang.String) throws org.apache.commons.codec.EncoderException;
    method public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException;
    method public java.lang.String encode(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException;
    method public static final byte[] encodeQuotedPrintable(java.util.BitSet, byte[]);
    method public java.lang.String getDefaultCharset();
  }

  public deprecated class URLCodec implements org.apache.commons.codec.BinaryDecoder org.apache.commons.codec.BinaryEncoder org.apache.commons.codec.StringDecoder org.apache.commons.codec.StringEncoder {
    ctor public URLCodec();
    ctor public URLCodec(java.lang.String);
    method public byte[] decode(byte[]) throws org.apache.commons.codec.DecoderException;
    method public java.lang.String decode(java.lang.String, java.lang.String) throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException;
    method public java.lang.String decode(java.lang.String) throws org.apache.commons.codec.DecoderException;
    method public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException;
    method public static final byte[] decodeUrl(byte[]) throws org.apache.commons.codec.DecoderException;
    method public byte[] encode(byte[]);
    method public java.lang.String encode(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException;
    method public java.lang.String encode(java.lang.String) throws org.apache.commons.codec.EncoderException;
    method public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException;
    method public static final byte[] encodeUrl(java.util.BitSet, byte[]);
    method public java.lang.String getDefaultCharset();
    method public deprecated java.lang.String getEncoding();
    field protected static byte ESCAPE_CHAR;
    field protected static final java.util.BitSet WWW_FORM_URL;
    field protected java.lang.String charset;
  }

}

package org.apache.commons.logging {

  public abstract deprecated interface Log {
    method public abstract void debug(java.lang.Object);
    method public abstract void debug(java.lang.Object, java.lang.Throwable);
    method public abstract void error(java.lang.Object);
    method public abstract void error(java.lang.Object, java.lang.Throwable);
    method public abstract void fatal(java.lang.Object);
    method public abstract void fatal(java.lang.Object, java.lang.Throwable);
    method public abstract void info(java.lang.Object);
    method public abstract void info(java.lang.Object, java.lang.Throwable);
    method public abstract boolean isDebugEnabled();
    method public abstract boolean isErrorEnabled();
    method public abstract boolean isFatalEnabled();
    method public abstract boolean isInfoEnabled();
    method public abstract boolean isTraceEnabled();
    method public abstract boolean isWarnEnabled();
    method public abstract void trace(java.lang.Object);
    method public abstract void trace(java.lang.Object, java.lang.Throwable);
    method public abstract void warn(java.lang.Object);
    method public abstract void warn(java.lang.Object, java.lang.Throwable);
  }

  public deprecated class LogConfigurationException extends java.lang.RuntimeException {
    ctor public LogConfigurationException();
    ctor public LogConfigurationException(java.lang.String);
    ctor public LogConfigurationException(java.lang.Throwable);
    ctor public LogConfigurationException(java.lang.String, java.lang.Throwable);
    field protected java.lang.Throwable cause;
  }

  public abstract deprecated class LogFactory {
    ctor protected LogFactory();
    method protected static java.lang.Object createFactory(java.lang.String, java.lang.ClassLoader);
    method protected static java.lang.ClassLoader directGetContextClassLoader() throws org.apache.commons.logging.LogConfigurationException;
    method public abstract java.lang.Object getAttribute(java.lang.String);
    method public abstract java.lang.String[] getAttributeNames();
    method protected static java.lang.ClassLoader getClassLoader(java.lang.Class);
    method protected static java.lang.ClassLoader getContextClassLoader() throws org.apache.commons.logging.LogConfigurationException;
    method public static org.apache.commons.logging.LogFactory getFactory() throws org.apache.commons.logging.LogConfigurationException;
    method public abstract org.apache.commons.logging.Log getInstance(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException;
    method public abstract org.apache.commons.logging.Log getInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException;
    method public static org.apache.commons.logging.Log getLog(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException;
    method public static org.apache.commons.logging.Log getLog(java.lang.String) throws org.apache.commons.logging.LogConfigurationException;
    method protected static boolean isDiagnosticsEnabled();
    method protected static final void logRawDiagnostic(java.lang.String);
    method protected static org.apache.commons.logging.LogFactory newFactory(java.lang.String, java.lang.ClassLoader, java.lang.ClassLoader) throws org.apache.commons.logging.LogConfigurationException;
    method protected static org.apache.commons.logging.LogFactory newFactory(java.lang.String, java.lang.ClassLoader);
    method public static java.lang.String objectId(java.lang.Object);
    method public abstract void release();
    method public static void release(java.lang.ClassLoader);
    method public static void releaseAll();
    method public abstract void removeAttribute(java.lang.String);
    method public abstract void setAttribute(java.lang.String, java.lang.Object);
    field public static final java.lang.String DIAGNOSTICS_DEST_PROPERTY = "org.apache.commons.logging.diagnostics.dest";
    field public static final java.lang.String FACTORY_DEFAULT = "org.apache.commons.logging.impl.LogFactoryImpl";
    field public static final java.lang.String FACTORY_PROPERTIES = "commons-logging.properties";
    field public static final java.lang.String FACTORY_PROPERTY = "org.apache.commons.logging.LogFactory";
    field public static final java.lang.String HASHTABLE_IMPLEMENTATION_PROPERTY = "org.apache.commons.logging.LogFactory.HashtableImpl";
    field public static final java.lang.String PRIORITY_KEY = "priority";
    field protected static final java.lang.String SERVICE_ID = "META-INF/services/org.apache.commons.logging.LogFactory";
    field public static final java.lang.String TCCL_KEY = "use_tccl";
    field protected static java.util.Hashtable factories;
    field protected static org.apache.commons.logging.LogFactory nullClassLoaderFactory;
  }

  public deprecated class LogSource {
    method public static org.apache.commons.logging.Log getInstance(java.lang.String);
    method public static org.apache.commons.logging.Log getInstance(java.lang.Class);
    method public static java.lang.String[] getLogNames();
    method public static org.apache.commons.logging.Log makeNewLogInstance(java.lang.String);
    method public static void setLogImplementation(java.lang.String) throws java.lang.ClassNotFoundException, java.lang.ExceptionInInitializerError, java.lang.LinkageError, java.lang.NoSuchMethodException, java.lang.SecurityException;
    method public static void setLogImplementation(java.lang.Class) throws java.lang.ExceptionInInitializerError, java.lang.LinkageError, java.lang.NoSuchMethodException, java.lang.SecurityException;
    field protected static boolean jdk14IsAvailable;
    field protected static boolean log4jIsAvailable;
    field protected static java.lang.reflect.Constructor logImplctor;
    field protected static java.util.Hashtable logs;
  }

}

package org.apache.commons.logging.impl {

  public deprecated class Jdk14Logger implements org.apache.commons.logging.Log java.io.Serializable {
    ctor public Jdk14Logger(java.lang.String);
    method public void debug(java.lang.Object);
    method public void debug(java.lang.Object, java.lang.Throwable);
    method public void error(java.lang.Object);
    method public void error(java.lang.Object, java.lang.Throwable);
    method public void fatal(java.lang.Object);
    method public void fatal(java.lang.Object, java.lang.Throwable);
    method public java.util.logging.Logger getLogger();
    method public void info(java.lang.Object);
    method public void info(java.lang.Object, java.lang.Throwable);
    method public boolean isDebugEnabled();
    method public boolean isErrorEnabled();
    method public boolean isFatalEnabled();
    method public boolean isInfoEnabled();
    method public boolean isTraceEnabled();
    method public boolean isWarnEnabled();
    method public void trace(java.lang.Object);
    method public void trace(java.lang.Object, java.lang.Throwable);
    method public void warn(java.lang.Object);
    method public void warn(java.lang.Object, java.lang.Throwable);
    field protected static final java.util.logging.Level dummyLevel;
    field protected transient java.util.logging.Logger logger;
    field protected java.lang.String name;
  }

  public deprecated class LogFactoryImpl extends org.apache.commons.logging.LogFactory {
    ctor public LogFactoryImpl();
    method public java.lang.Object getAttribute(java.lang.String);
    method public java.lang.String[] getAttributeNames();
    method protected static java.lang.ClassLoader getClassLoader(java.lang.Class);
    method protected static java.lang.ClassLoader getContextClassLoader() throws org.apache.commons.logging.LogConfigurationException;
    method public org.apache.commons.logging.Log getInstance(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException;
    method public org.apache.commons.logging.Log getInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException;
    method protected deprecated java.lang.String getLogClassName();
    method protected deprecated java.lang.reflect.Constructor getLogConstructor() throws org.apache.commons.logging.LogConfigurationException;
    method protected static boolean isDiagnosticsEnabled();
    method protected deprecated boolean isJdk13LumberjackAvailable();
    method protected deprecated boolean isJdk14Available();
    method protected deprecated boolean isLog4JAvailable();
    method protected void logDiagnostic(java.lang.String);
    method protected org.apache.commons.logging.Log newInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException;
    method public void release();
    method public void removeAttribute(java.lang.String);
    method public void setAttribute(java.lang.String, java.lang.Object);
    field public static final java.lang.String ALLOW_FLAWED_CONTEXT_PROPERTY = "org.apache.commons.logging.Log.allowFlawedContext";
    field public static final java.lang.String ALLOW_FLAWED_DISCOVERY_PROPERTY = "org.apache.commons.logging.Log.allowFlawedDiscovery";
    field public static final java.lang.String ALLOW_FLAWED_HIERARCHY_PROPERTY = "org.apache.commons.logging.Log.allowFlawedHierarchy";
    field public static final java.lang.String LOG_PROPERTY = "org.apache.commons.logging.Log";
    field protected static final java.lang.String LOG_PROPERTY_OLD = "org.apache.commons.logging.log";
    field protected java.util.Hashtable attributes;
    field protected java.util.Hashtable instances;
    field protected java.lang.reflect.Constructor logConstructor;
    field protected java.lang.Class[] logConstructorSignature;
    field protected java.lang.reflect.Method logMethod;
    field protected java.lang.Class[] logMethodSignature;
  }

  public deprecated class NoOpLog implements org.apache.commons.logging.Log java.io.Serializable {
    ctor public NoOpLog();
    ctor public NoOpLog(java.lang.String);
    method public void debug(java.lang.Object);
    method public void debug(java.lang.Object, java.lang.Throwable);
    method public void error(java.lang.Object);
    method public void error(java.lang.Object, java.lang.Throwable);
    method public void fatal(java.lang.Object);
    method public void fatal(java.lang.Object, java.lang.Throwable);
    method public void info(java.lang.Object);
    method public void info(java.lang.Object, java.lang.Throwable);
    method public final boolean isDebugEnabled();
    method public final boolean isErrorEnabled();
    method public final boolean isFatalEnabled();
    method public final boolean isInfoEnabled();
    method public final boolean isTraceEnabled();
    method public final boolean isWarnEnabled();
    method public void trace(java.lang.Object);
    method public void trace(java.lang.Object, java.lang.Throwable);
    method public void warn(java.lang.Object);
    method public void warn(java.lang.Object, java.lang.Throwable);
  }

  public deprecated class SimpleLog implements org.apache.commons.logging.Log java.io.Serializable {
    ctor public SimpleLog(java.lang.String);
    method public final void debug(java.lang.Object);
    method public final void debug(java.lang.Object, java.lang.Throwable);
    method public final void error(java.lang.Object);
    method public final void error(java.lang.Object, java.lang.Throwable);
    method public final void fatal(java.lang.Object);
    method public final void fatal(java.lang.Object, java.lang.Throwable);
    method public int getLevel();
    method public final void info(java.lang.Object);
    method public final void info(java.lang.Object, java.lang.Throwable);
    method public final boolean isDebugEnabled();
    method public final boolean isErrorEnabled();
    method public final boolean isFatalEnabled();
    method public final boolean isInfoEnabled();
    method protected boolean isLevelEnabled(int);
    method public final boolean isTraceEnabled();
    method public final boolean isWarnEnabled();
    method protected void log(int, java.lang.Object, java.lang.Throwable);
    method public void setLevel(int);
    method public final void trace(java.lang.Object);
    method public final void trace(java.lang.Object, java.lang.Throwable);
    method public final void warn(java.lang.Object);
    method public final void warn(java.lang.Object, java.lang.Throwable);
    method protected void write(java.lang.StringBuffer);
    field protected static final java.lang.String DEFAULT_DATE_TIME_FORMAT = "yyyy/MM/dd HH:mm:ss:SSS zzz";
    field public static final int LOG_LEVEL_ALL = 0; // 0x0
    field public static final int LOG_LEVEL_DEBUG = 2; // 0x2
    field public static final int LOG_LEVEL_ERROR = 5; // 0x5
    field public static final int LOG_LEVEL_FATAL = 6; // 0x6
    field public static final int LOG_LEVEL_INFO = 3; // 0x3
    field public static final int LOG_LEVEL_OFF = 7; // 0x7
    field public static final int LOG_LEVEL_TRACE = 1; // 0x1
    field public static final int LOG_LEVEL_WARN = 4; // 0x4
    field protected int currentLogLevel;
    field protected static java.text.DateFormat dateFormatter;
    field protected static java.lang.String dateTimeFormat;
    field protected java.lang.String logName;
    field protected static boolean showDateTime;
    field protected static boolean showLogName;
    field protected static boolean showShortName;
    field protected static final java.util.Properties simpleLogProps;
    field protected static final java.lang.String systemPrefix = "org.apache.commons.logging.simplelog.";
  }

  public final deprecated class WeakHashtable extends java.util.Hashtable {
    ctor public WeakHashtable();
    method public boolean containsKey(java.lang.Object);
    method public java.util.Enumeration elements();
    method public java.util.Set entrySet();
    method public java.lang.Object get(java.lang.Object);
    method public boolean isEmpty();
    method public java.util.Set keySet();
    method public java.util.Enumeration keys();
    method public java.lang.Object put(java.lang.Object, java.lang.Object);
    method public void putAll(java.util.Map);
    method public java.lang.Object remove(java.lang.Object);
    method public int size();
    method public java.util.Collection values();
  }

}

package org.apache.http {

  public deprecated class ConnectionClosedException extends java.io.IOException {
    ctor public ConnectionClosedException(java.lang.String);
  }

  public abstract deprecated interface ConnectionReuseStrategy {
    method public abstract boolean keepAlive(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
  }

  public abstract deprecated interface FormattedHeader implements org.apache.http.Header {
    method public abstract org.apache.http.util.CharArrayBuffer getBuffer();
    method public abstract int getValuePos();
  }

  public abstract deprecated interface Header {
    method public abstract org.apache.http.HeaderElement[] getElements() throws org.apache.http.ParseException;
    method public abstract java.lang.String getName();
    method public abstract java.lang.String getValue();
  }

  public abstract deprecated interface HeaderElement {
    method public abstract java.lang.String getName();
    method public abstract org.apache.http.NameValuePair getParameter(int);
    method public abstract org.apache.http.NameValuePair getParameterByName(java.lang.String);
    method public abstract int getParameterCount();
    method public abstract org.apache.http.NameValuePair[] getParameters();
    method public abstract java.lang.String getValue();
  }

  public abstract deprecated interface HeaderElementIterator implements java.util.Iterator {
    method public abstract org.apache.http.HeaderElement nextElement();
  }

  public abstract deprecated interface HeaderIterator implements java.util.Iterator {
    method public abstract org.apache.http.Header nextHeader();
  }

  public abstract deprecated interface HttpClientConnection implements org.apache.http.HttpConnection {
    method public abstract void flush() throws java.io.IOException;
    method public abstract boolean isResponseAvailable(int) throws java.io.IOException;
    method public abstract void receiveResponseEntity(org.apache.http.HttpResponse) throws org.apache.http.HttpException, java.io.IOException;
    method public abstract org.apache.http.HttpResponse receiveResponseHeader() throws org.apache.http.HttpException, java.io.IOException;
    method public abstract void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) throws org.apache.http.HttpException, java.io.IOException;
    method public abstract void sendRequestHeader(org.apache.http.HttpRequest) throws org.apache.http.HttpException, java.io.IOException;
  }

  public abstract deprecated interface HttpConnection {
    method public abstract void close() throws java.io.IOException;
    method public abstract org.apache.http.HttpConnectionMetrics getMetrics();
    method public abstract int getSocketTimeout();
    method public abstract boolean isOpen();
    method public abstract boolean isStale();
    method public abstract void setSocketTimeout(int);
    method public abstract void shutdown() throws java.io.IOException;
  }

  public abstract deprecated interface HttpConnectionMetrics {
    method public abstract java.lang.Object getMetric(java.lang.String);
    method public abstract long getReceivedBytesCount();
    method public abstract long getRequestCount();
    method public abstract long getResponseCount();
    method public abstract long getSentBytesCount();
    method public abstract void reset();
  }

  public abstract deprecated interface HttpEntity {
    method public abstract void consumeContent() throws java.io.IOException;
    method public abstract java.io.InputStream getContent() throws java.io.IOException, java.lang.IllegalStateException;
    method public abstract org.apache.http.Header getContentEncoding();
    method public abstract long getContentLength();
    method public abstract org.apache.http.Header getContentType();
    method public abstract boolean isChunked();
    method public abstract boolean isRepeatable();
    method public abstract boolean isStreaming();
    method public abstract void writeTo(java.io.OutputStream) throws java.io.IOException;
  }

  public abstract deprecated interface HttpEntityEnclosingRequest implements org.apache.http.HttpRequest {
    method public abstract boolean expectContinue();
    method public abstract org.apache.http.HttpEntity getEntity();
    method public abstract void setEntity(org.apache.http.HttpEntity);
  }

  public deprecated class HttpException extends java.lang.Exception {
    ctor public HttpException();
    ctor public HttpException(java.lang.String);
    ctor public HttpException(java.lang.String, java.lang.Throwable);
  }

  public final deprecated class HttpHost implements java.lang.Cloneable {
    ctor public HttpHost(java.lang.String, int, java.lang.String);
    ctor public HttpHost(java.lang.String, int);
    ctor public HttpHost(java.lang.String);
    ctor public HttpHost(org.apache.http.HttpHost);
    method public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    method public java.lang.String getHostName();
    method public int getPort();
    method public java.lang.String getSchemeName();
    method public java.lang.String toHostString();
    method public java.lang.String toURI();
    field public static final java.lang.String DEFAULT_SCHEME_NAME = "http";
    field protected final java.lang.String hostname;
    field protected final java.lang.String lcHostname;
    field protected final int port;
    field protected final java.lang.String schemeName;
  }

  public abstract deprecated interface HttpInetConnection implements org.apache.http.HttpConnection {
    method public abstract java.net.InetAddress getLocalAddress();
    method public abstract int getLocalPort();
    method public abstract java.net.InetAddress getRemoteAddress();
    method public abstract int getRemotePort();
  }

  public abstract deprecated interface HttpMessage {
    method public abstract void addHeader(org.apache.http.Header);
    method public abstract void addHeader(java.lang.String, java.lang.String);
    method public abstract boolean containsHeader(java.lang.String);
    method public abstract org.apache.http.Header[] getAllHeaders();
    method public abstract org.apache.http.Header getFirstHeader(java.lang.String);
    method public abstract org.apache.http.Header[] getHeaders(java.lang.String);
    method public abstract org.apache.http.Header getLastHeader(java.lang.String);
    method public abstract org.apache.http.params.HttpParams getParams();
    method public abstract org.apache.http.ProtocolVersion getProtocolVersion();
    method public abstract org.apache.http.HeaderIterator headerIterator();
    method public abstract org.apache.http.HeaderIterator headerIterator(java.lang.String);
    method public abstract void removeHeader(org.apache.http.Header);
    method public abstract void removeHeaders(java.lang.String);
    method public abstract void setHeader(org.apache.http.Header);
    method public abstract void setHeader(java.lang.String, java.lang.String);
    method public abstract void setHeaders(org.apache.http.Header[]);
    method public abstract void setParams(org.apache.http.params.HttpParams);
  }

  public abstract deprecated interface HttpRequest implements org.apache.http.HttpMessage {
    method public abstract org.apache.http.RequestLine getRequestLine();
  }

  public abstract deprecated interface HttpRequestFactory {
    method public abstract org.apache.http.HttpRequest newHttpRequest(org.apache.http.RequestLine) throws org.apache.http.MethodNotSupportedException;
    method public abstract org.apache.http.HttpRequest newHttpRequest(java.lang.String, java.lang.String) throws org.apache.http.MethodNotSupportedException;
  }

  public abstract deprecated interface HttpRequestInterceptor {
    method public abstract void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  public abstract deprecated interface HttpResponse implements org.apache.http.HttpMessage {
    method public abstract org.apache.http.HttpEntity getEntity();
    method public abstract java.util.Locale getLocale();
    method public abstract org.apache.http.StatusLine getStatusLine();
    method public abstract void setEntity(org.apache.http.HttpEntity);
    method public abstract void setLocale(java.util.Locale);
    method public abstract void setReasonPhrase(java.lang.String) throws java.lang.IllegalStateException;
    method public abstract void setStatusCode(int) throws java.lang.IllegalStateException;
    method public abstract void setStatusLine(org.apache.http.StatusLine);
    method public abstract void setStatusLine(org.apache.http.ProtocolVersion, int);
    method public abstract void setStatusLine(org.apache.http.ProtocolVersion, int, java.lang.String);
  }

  public abstract deprecated interface HttpResponseFactory {
    method public abstract org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion, int, org.apache.http.protocol.HttpContext);
    method public abstract org.apache.http.HttpResponse newHttpResponse(org.apache.http.StatusLine, org.apache.http.protocol.HttpContext);
  }

  public abstract deprecated interface HttpResponseInterceptor {
    method public abstract void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  public abstract deprecated interface HttpServerConnection implements org.apache.http.HttpConnection {
    method public abstract void flush() throws java.io.IOException;
    method public abstract void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest) throws org.apache.http.HttpException, java.io.IOException;
    method public abstract org.apache.http.HttpRequest receiveRequestHeader() throws org.apache.http.HttpException, java.io.IOException;
    method public abstract void sendResponseEntity(org.apache.http.HttpResponse) throws org.apache.http.HttpException, java.io.IOException;
    method public abstract void sendResponseHeader(org.apache.http.HttpResponse) throws org.apache.http.HttpException, java.io.IOException;
  }

  public abstract deprecated interface HttpStatus {
    field public static final int SC_ACCEPTED = 202; // 0xca
    field public static final int SC_BAD_GATEWAY = 502; // 0x1f6
    field public static final int SC_BAD_REQUEST = 400; // 0x190
    field public static final int SC_CONFLICT = 409; // 0x199
    field public static final int SC_CONTINUE = 100; // 0x64
    field public static final int SC_CREATED = 201; // 0xc9
    field public static final int SC_EXPECTATION_FAILED = 417; // 0x1a1
    field public static final int SC_FAILED_DEPENDENCY = 424; // 0x1a8
    field public static final int SC_FORBIDDEN = 403; // 0x193
    field public static final int SC_GATEWAY_TIMEOUT = 504; // 0x1f8
    field public static final int SC_GONE = 410; // 0x19a
    field public static final int SC_HTTP_VERSION_NOT_SUPPORTED = 505; // 0x1f9
    field public static final int SC_INSUFFICIENT_SPACE_ON_RESOURCE = 419; // 0x1a3
    field public static final int SC_INSUFFICIENT_STORAGE = 507; // 0x1fb
    field public static final int SC_INTERNAL_SERVER_ERROR = 500; // 0x1f4
    field public static final int SC_LENGTH_REQUIRED = 411; // 0x19b
    field public static final int SC_LOCKED = 423; // 0x1a7
    field public static final int SC_METHOD_FAILURE = 420; // 0x1a4
    field public static final int SC_METHOD_NOT_ALLOWED = 405; // 0x195
    field public static final int SC_MOVED_PERMANENTLY = 301; // 0x12d
    field public static final int SC_MOVED_TEMPORARILY = 302; // 0x12e
    field public static final int SC_MULTIPLE_CHOICES = 300; // 0x12c
    field public static final int SC_MULTI_STATUS = 207; // 0xcf
    field public static final int SC_NON_AUTHORITATIVE_INFORMATION = 203; // 0xcb
    field public static final int SC_NOT_ACCEPTABLE = 406; // 0x196
    field public static final int SC_NOT_FOUND = 404; // 0x194
    field public static final int SC_NOT_IMPLEMENTED = 501; // 0x1f5
    field public static final int SC_NOT_MODIFIED = 304; // 0x130
    field public static final int SC_NO_CONTENT = 204; // 0xcc
    field public static final int SC_OK = 200; // 0xc8
    field public static final int SC_PARTIAL_CONTENT = 206; // 0xce
    field public static final int SC_PAYMENT_REQUIRED = 402; // 0x192
    field public static final int SC_PRECONDITION_FAILED = 412; // 0x19c
    field public static final int SC_PROCESSING = 102; // 0x66
    field public static final int SC_PROXY_AUTHENTICATION_REQUIRED = 407; // 0x197
    field public static final int SC_REQUESTED_RANGE_NOT_SATISFIABLE = 416; // 0x1a0
    field public static final int SC_REQUEST_TIMEOUT = 408; // 0x198
    field public static final int SC_REQUEST_TOO_LONG = 413; // 0x19d
    field public static final int SC_REQUEST_URI_TOO_LONG = 414; // 0x19e
    field public static final int SC_RESET_CONTENT = 205; // 0xcd
    field public static final int SC_SEE_OTHER = 303; // 0x12f
    field public static final int SC_SERVICE_UNAVAILABLE = 503; // 0x1f7
    field public static final int SC_SWITCHING_PROTOCOLS = 101; // 0x65
    field public static final int SC_TEMPORARY_REDIRECT = 307; // 0x133
    field public static final int SC_UNAUTHORIZED = 401; // 0x191
    field public static final int SC_UNPROCESSABLE_ENTITY = 422; // 0x1a6
    field public static final int SC_UNSUPPORTED_MEDIA_TYPE = 415; // 0x19f
    field public static final int SC_USE_PROXY = 305; // 0x131
  }

  public final deprecated class HttpVersion extends org.apache.http.ProtocolVersion implements java.io.Serializable {
    ctor public HttpVersion(int, int);
    field public static final java.lang.String HTTP = "HTTP";
    field public static final org.apache.http.HttpVersion HTTP_0_9;
    field public static final org.apache.http.HttpVersion HTTP_1_0;
    field public static final org.apache.http.HttpVersion HTTP_1_1;
  }

  public deprecated class MalformedChunkCodingException extends java.io.IOException {
    ctor public MalformedChunkCodingException();
    ctor public MalformedChunkCodingException(java.lang.String);
  }

  public deprecated class MethodNotSupportedException extends org.apache.http.HttpException {
    ctor public MethodNotSupportedException(java.lang.String);
    ctor public MethodNotSupportedException(java.lang.String, java.lang.Throwable);
  }

  public abstract deprecated interface NameValuePair {
    method public abstract java.lang.String getName();
    method public abstract java.lang.String getValue();
  }

  public deprecated class NoHttpResponseException extends java.io.IOException {
    ctor public NoHttpResponseException(java.lang.String);
  }

  public deprecated class ParseException extends java.lang.RuntimeException {
    ctor public ParseException();
    ctor public ParseException(java.lang.String);
  }

  public deprecated class ProtocolException extends org.apache.http.HttpException {
    ctor public ProtocolException();
    ctor public ProtocolException(java.lang.String);
    ctor public ProtocolException(java.lang.String, java.lang.Throwable);
  }

  public deprecated class ProtocolVersion implements java.lang.Cloneable java.io.Serializable {
    ctor public ProtocolVersion(java.lang.String, int, int);
    method public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    method public int compareToVersion(org.apache.http.ProtocolVersion);
    method public final boolean equals(java.lang.Object);
    method public org.apache.http.ProtocolVersion forVersion(int, int);
    method public final int getMajor();
    method public final int getMinor();
    method public final java.lang.String getProtocol();
    method public final boolean greaterEquals(org.apache.http.ProtocolVersion);
    method public final int hashCode();
    method public boolean isComparable(org.apache.http.ProtocolVersion);
    method public final boolean lessEquals(org.apache.http.ProtocolVersion);
    field protected final int major;
    field protected final int minor;
    field protected final java.lang.String protocol;
  }

  public abstract deprecated interface ReasonPhraseCatalog {
    method public abstract java.lang.String getReason(int, java.util.Locale);
  }

  public abstract deprecated interface RequestLine {
    method public abstract java.lang.String getMethod();
    method public abstract org.apache.http.ProtocolVersion getProtocolVersion();
    method public abstract java.lang.String getUri();
  }

  public abstract deprecated interface StatusLine {
    method public abstract org.apache.http.ProtocolVersion getProtocolVersion();
    method public abstract java.lang.String getReasonPhrase();
    method public abstract int getStatusCode();
  }

  public abstract deprecated interface TokenIterator implements java.util.Iterator {
    method public abstract java.lang.String nextToken();
  }

  public deprecated class UnsupportedHttpVersionException extends org.apache.http.ProtocolException {
    ctor public UnsupportedHttpVersionException();
    ctor public UnsupportedHttpVersionException(java.lang.String);
  }

}

package org.apache.http.auth {

  public final deprecated class AUTH {
    field public static final java.lang.String PROXY_AUTH = "Proxy-Authenticate";
    field public static final java.lang.String PROXY_AUTH_RESP = "Proxy-Authorization";
    field public static final java.lang.String WWW_AUTH = "WWW-Authenticate";
    field public static final java.lang.String WWW_AUTH_RESP = "Authorization";
  }

  public abstract deprecated interface AuthScheme {
    method public abstract org.apache.http.Header authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest) throws org.apache.http.auth.AuthenticationException;
    method public abstract java.lang.String getParameter(java.lang.String);
    method public abstract java.lang.String getRealm();
    method public abstract java.lang.String getSchemeName();
    method public abstract boolean isComplete();
    method public abstract boolean isConnectionBased();
    method public abstract void processChallenge(org.apache.http.Header) throws org.apache.http.auth.MalformedChallengeException;
  }

  public abstract deprecated interface AuthSchemeFactory {
    method public abstract org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams);
  }

  public final deprecated class AuthSchemeRegistry {
    ctor public AuthSchemeRegistry();
    method public synchronized org.apache.http.auth.AuthScheme getAuthScheme(java.lang.String, org.apache.http.params.HttpParams) throws java.lang.IllegalStateException;
    method public synchronized java.util.List<java.lang.String> getSchemeNames();
    method public synchronized void register(java.lang.String, org.apache.http.auth.AuthSchemeFactory);
    method public synchronized void setItems(java.util.Map<java.lang.String, org.apache.http.auth.AuthSchemeFactory>);
    method public synchronized void unregister(java.lang.String);
  }

  public deprecated class AuthScope {
    ctor public AuthScope(java.lang.String, int, java.lang.String, java.lang.String);
    ctor public AuthScope(java.lang.String, int, java.lang.String);
    ctor public AuthScope(java.lang.String, int);
    ctor public AuthScope(org.apache.http.auth.AuthScope);
    method public java.lang.String getHost();
    method public int getPort();
    method public java.lang.String getRealm();
    method public java.lang.String getScheme();
    method public int match(org.apache.http.auth.AuthScope);
    field public static final org.apache.http.auth.AuthScope ANY;
    field public static final java.lang.String ANY_HOST;
    field public static final int ANY_PORT = -1; // 0xffffffff
    field public static final java.lang.String ANY_REALM;
    field public static final java.lang.String ANY_SCHEME;
  }

  public deprecated class AuthState {
    ctor public AuthState();
    method public org.apache.http.auth.AuthScheme getAuthScheme();
    method public org.apache.http.auth.AuthScope getAuthScope();
    method public org.apache.http.auth.Credentials getCredentials();
    method public void invalidate();
    method public boolean isValid();
    method public void setAuthScheme(org.apache.http.auth.AuthScheme);
    method public void setAuthScope(org.apache.http.auth.AuthScope);
    method public void setCredentials(org.apache.http.auth.Credentials);
  }

  public deprecated class AuthenticationException extends org.apache.http.ProtocolException {
    ctor public AuthenticationException();
    ctor public AuthenticationException(java.lang.String);
    ctor public AuthenticationException(java.lang.String, java.lang.Throwable);
  }

  public final deprecated class BasicUserPrincipal implements java.security.Principal {
    ctor public BasicUserPrincipal(java.lang.String);
    method public java.lang.String getName();
  }

  public abstract deprecated interface Credentials {
    method public abstract java.lang.String getPassword();
    method public abstract java.security.Principal getUserPrincipal();
  }

  public deprecated class InvalidCredentialsException extends org.apache.http.auth.AuthenticationException {
    ctor public InvalidCredentialsException();
    ctor public InvalidCredentialsException(java.lang.String);
    ctor public InvalidCredentialsException(java.lang.String, java.lang.Throwable);
  }

  public deprecated class MalformedChallengeException extends org.apache.http.ProtocolException {
    ctor public MalformedChallengeException();
    ctor public MalformedChallengeException(java.lang.String);
    ctor public MalformedChallengeException(java.lang.String, java.lang.Throwable);
  }

  public deprecated class NTCredentials implements org.apache.http.auth.Credentials {
    ctor public NTCredentials(java.lang.String);
    ctor public NTCredentials(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
    method public java.lang.String getDomain();
    method public java.lang.String getPassword();
    method public java.lang.String getUserName();
    method public java.security.Principal getUserPrincipal();
    method public java.lang.String getWorkstation();
  }

  public deprecated class NTUserPrincipal implements java.security.Principal {
    ctor public NTUserPrincipal(java.lang.String, java.lang.String);
    method public java.lang.String getDomain();
    method public java.lang.String getName();
    method public java.lang.String getUsername();
  }

  public deprecated class UsernamePasswordCredentials implements org.apache.http.auth.Credentials {
    ctor public UsernamePasswordCredentials(java.lang.String);
    ctor public UsernamePasswordCredentials(java.lang.String, java.lang.String);
    method public java.lang.String getPassword();
    method public java.lang.String getUserName();
    method public java.security.Principal getUserPrincipal();
  }

}

package org.apache.http.auth.params {

  public abstract deprecated interface AuthPNames {
    field public static final java.lang.String CREDENTIAL_CHARSET = "http.auth.credential-charset";
  }

  public deprecated class AuthParamBean extends org.apache.http.params.HttpAbstractParamBean {
    ctor public AuthParamBean(org.apache.http.params.HttpParams);
    method public void setCredentialCharset(java.lang.String);
  }

  public final deprecated class AuthParams {
    method public static java.lang.String getCredentialCharset(org.apache.http.params.HttpParams);
    method public static void setCredentialCharset(org.apache.http.params.HttpParams, java.lang.String);
  }

}

package org.apache.http.client {

  public abstract deprecated interface AuthenticationHandler {
    method public abstract java.util.Map<java.lang.String, org.apache.http.Header> getChallenges(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.auth.MalformedChallengeException;
    method public abstract boolean isAuthenticationRequested(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
    method public abstract org.apache.http.auth.AuthScheme selectScheme(java.util.Map<java.lang.String, org.apache.http.Header>, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.auth.AuthenticationException;
  }

  public deprecated class CircularRedirectException extends org.apache.http.client.RedirectException {
    ctor public CircularRedirectException();
    ctor public CircularRedirectException(java.lang.String);
    ctor public CircularRedirectException(java.lang.String, java.lang.Throwable);
  }

  public deprecated class ClientProtocolException extends java.io.IOException {
    ctor public ClientProtocolException();
    ctor public ClientProtocolException(java.lang.String);
    ctor public ClientProtocolException(java.lang.Throwable);
    ctor public ClientProtocolException(java.lang.String, java.lang.Throwable);
  }

  public abstract deprecated interface CookieStore {
    method public abstract void addCookie(org.apache.http.cookie.Cookie);
    method public abstract void clear();
    method public abstract boolean clearExpired(java.util.Date);
    method public abstract java.util.List<org.apache.http.cookie.Cookie> getCookies();
  }

  public abstract deprecated interface CredentialsProvider {
    method public abstract void clear();
    method public abstract org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope);
    method public abstract void setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.Credentials);
  }

  public abstract deprecated interface HttpClient {
    method public abstract org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public abstract org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public abstract org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public abstract org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public abstract <T> T execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler<? extends T>) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public abstract <T> T execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler<? extends T>, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public abstract <T> T execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler<? extends T>) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public abstract <T> T execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler<? extends T>, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public abstract org.apache.http.conn.ClientConnectionManager getConnectionManager();
    method public abstract org.apache.http.params.HttpParams getParams();
  }

  public abstract deprecated interface HttpRequestRetryHandler {
    method public abstract boolean retryRequest(java.io.IOException, int, org.apache.http.protocol.HttpContext);
  }

  public deprecated class HttpResponseException extends org.apache.http.client.ClientProtocolException {
    ctor public HttpResponseException(int, java.lang.String);
    method public int getStatusCode();
  }

  public deprecated class NonRepeatableRequestException extends org.apache.http.ProtocolException {
    ctor public NonRepeatableRequestException();
    ctor public NonRepeatableRequestException(java.lang.String);
  }

  public deprecated class RedirectException extends org.apache.http.ProtocolException {
    ctor public RedirectException();
    ctor public RedirectException(java.lang.String);
    ctor public RedirectException(java.lang.String, java.lang.Throwable);
  }

  public abstract deprecated interface RedirectHandler {
    method public abstract java.net.URI getLocationURI(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.ProtocolException;
    method public abstract boolean isRedirectRequested(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
  }

  public abstract deprecated interface RequestDirector {
    method public abstract org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  public abstract deprecated interface ResponseHandler<T> {
    method public abstract T handleResponse(org.apache.http.HttpResponse) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
  }

  public abstract deprecated interface UserTokenHandler {
    method public abstract java.lang.Object getUserToken(org.apache.http.protocol.HttpContext);
  }

}

package org.apache.http.client.entity {

  public deprecated class UrlEncodedFormEntity extends org.apache.http.entity.StringEntity {
    ctor public UrlEncodedFormEntity(java.util.List<? extends org.apache.http.NameValuePair>, java.lang.String) throws java.io.UnsupportedEncodingException;
    ctor public UrlEncodedFormEntity(java.util.List<? extends org.apache.http.NameValuePair>) throws java.io.UnsupportedEncodingException;
  }

}

package org.apache.http.client.methods {

  public abstract deprecated interface AbortableHttpRequest {
    method public abstract void abort();
    method public abstract void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest) throws java.io.IOException;
    method public abstract void setReleaseTrigger(org.apache.http.conn.ConnectionReleaseTrigger) throws java.io.IOException;
  }

  public deprecated class HttpDelete extends org.apache.http.client.methods.HttpRequestBase {
    ctor public HttpDelete();
    ctor public HttpDelete(java.net.URI);
    ctor public HttpDelete(java.lang.String);
    method public java.lang.String getMethod();
    field public static final java.lang.String METHOD_NAME = "DELETE";
  }

  public abstract deprecated class HttpEntityEnclosingRequestBase extends org.apache.http.client.methods.HttpRequestBase implements org.apache.http.HttpEntityEnclosingRequest {
    ctor public HttpEntityEnclosingRequestBase();
    method public boolean expectContinue();
    method public org.apache.http.HttpEntity getEntity();
    method public void setEntity(org.apache.http.HttpEntity);
  }

  public deprecated class HttpGet extends org.apache.http.client.methods.HttpRequestBase {
    ctor public HttpGet();
    ctor public HttpGet(java.net.URI);
    ctor public HttpGet(java.lang.String);
    method public java.lang.String getMethod();
    field public static final java.lang.String METHOD_NAME = "GET";
  }

  public deprecated class HttpHead extends org.apache.http.client.methods.HttpRequestBase {
    ctor public HttpHead();
    ctor public HttpHead(java.net.URI);
    ctor public HttpHead(java.lang.String);
    method public java.lang.String getMethod();
    field public static final java.lang.String METHOD_NAME = "HEAD";
  }

  public deprecated class HttpOptions extends org.apache.http.client.methods.HttpRequestBase {
    ctor public HttpOptions();
    ctor public HttpOptions(java.net.URI);
    ctor public HttpOptions(java.lang.String);
    method public java.util.Set<java.lang.String> getAllowedMethods(org.apache.http.HttpResponse);
    method public java.lang.String getMethod();
    field public static final java.lang.String METHOD_NAME = "OPTIONS";
  }

  public deprecated class HttpPost extends org.apache.http.client.methods.HttpEntityEnclosingRequestBase {
    ctor public HttpPost();
    ctor public HttpPost(java.net.URI);
    ctor public HttpPost(java.lang.String);
    method public java.lang.String getMethod();
    field public static final java.lang.String METHOD_NAME = "POST";
  }

  public deprecated class HttpPut extends org.apache.http.client.methods.HttpEntityEnclosingRequestBase {
    ctor public HttpPut();
    ctor public HttpPut(java.net.URI);
    ctor public HttpPut(java.lang.String);
    method public java.lang.String getMethod();
    field public static final java.lang.String METHOD_NAME = "PUT";
  }

  public abstract deprecated class HttpRequestBase extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.client.methods.AbortableHttpRequest java.lang.Cloneable org.apache.http.client.methods.HttpUriRequest {
    ctor public HttpRequestBase();
    method public void abort();
    method public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    method public org.apache.http.ProtocolVersion getProtocolVersion();
    method public org.apache.http.RequestLine getRequestLine();
    method public java.net.URI getURI();
    method public boolean isAborted();
    method public void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest) throws java.io.IOException;
    method public void setReleaseTrigger(org.apache.http.conn.ConnectionReleaseTrigger) throws java.io.IOException;
    method public void setURI(java.net.URI);
  }

  public deprecated class HttpTrace extends org.apache.http.client.methods.HttpRequestBase {
    ctor public HttpTrace();
    ctor public HttpTrace(java.net.URI);
    ctor public HttpTrace(java.lang.String);
    method public java.lang.String getMethod();
    field public static final java.lang.String METHOD_NAME = "TRACE";
  }

  public abstract deprecated interface HttpUriRequest implements org.apache.http.HttpRequest {
    method public abstract void abort() throws java.lang.UnsupportedOperationException;
    method public abstract java.lang.String getMethod();
    method public abstract java.net.URI getURI();
    method public abstract boolean isAborted();
  }

}

package org.apache.http.client.params {

  public abstract deprecated interface AllClientPNames implements org.apache.http.auth.params.AuthPNames org.apache.http.client.params.ClientPNames org.apache.http.conn.params.ConnConnectionPNames org.apache.http.conn.params.ConnManagerPNames org.apache.http.conn.params.ConnRoutePNames org.apache.http.cookie.params.CookieSpecPNames org.apache.http.params.CoreConnectionPNames org.apache.http.params.CoreProtocolPNames {
  }

  public final deprecated class AuthPolicy {
    field public static final java.lang.String BASIC = "Basic";
    field public static final java.lang.String DIGEST = "Digest";
    field public static final java.lang.String NTLM = "NTLM";
  }

  public abstract deprecated interface ClientPNames {
    field public static final java.lang.String ALLOW_CIRCULAR_REDIRECTS = "http.protocol.allow-circular-redirects";
    field public static final java.lang.String CONNECTION_MANAGER_FACTORY = "http.connection-manager.factory-object";
    field public static final java.lang.String CONNECTION_MANAGER_FACTORY_CLASS_NAME = "http.connection-manager.factory-class-name";
    field public static final java.lang.String COOKIE_POLICY = "http.protocol.cookie-policy";
    field public static final java.lang.String DEFAULT_HEADERS = "http.default-headers";
    field public static final java.lang.String DEFAULT_HOST = "http.default-host";
    field public static final java.lang.String HANDLE_AUTHENTICATION = "http.protocol.handle-authentication";
    field public static final java.lang.String HANDLE_REDIRECTS = "http.protocol.handle-redirects";
    field public static final java.lang.String MAX_REDIRECTS = "http.protocol.max-redirects";
    field public static final java.lang.String REJECT_RELATIVE_REDIRECT = "http.protocol.reject-relative-redirect";
    field public static final java.lang.String VIRTUAL_HOST = "http.virtual-host";
  }

  public deprecated class ClientParamBean extends org.apache.http.params.HttpAbstractParamBean {
    ctor public ClientParamBean(org.apache.http.params.HttpParams);
    method public void setAllowCircularRedirects(boolean);
    method public void setConnectionManagerFactory(org.apache.http.conn.ClientConnectionManagerFactory);
    method public void setConnectionManagerFactoryClassName(java.lang.String);
    method public void setCookiePolicy(java.lang.String);
    method public void setDefaultHeaders(java.util.Collection<org.apache.http.Header>);
    method public void setDefaultHost(org.apache.http.HttpHost);
    method public void setHandleAuthentication(boolean);
    method public void setHandleRedirects(boolean);
    method public void setMaxRedirects(int);
    method public void setRejectRelativeRedirect(boolean);
    method public void setVirtualHost(org.apache.http.HttpHost);
  }

  public final deprecated class CookiePolicy {
    field public static final java.lang.String BEST_MATCH = "best-match";
    field public static final java.lang.String BROWSER_COMPATIBILITY = "compatibility";
    field public static final java.lang.String NETSCAPE = "netscape";
    field public static final java.lang.String RFC_2109 = "rfc2109";
    field public static final java.lang.String RFC_2965 = "rfc2965";
  }

  public deprecated class HttpClientParams {
    method public static java.lang.String getCookiePolicy(org.apache.http.params.HttpParams);
    method public static boolean isAuthenticating(org.apache.http.params.HttpParams);
    method public static boolean isRedirecting(org.apache.http.params.HttpParams);
    method public static void setAuthenticating(org.apache.http.params.HttpParams, boolean);
    method public static void setCookiePolicy(org.apache.http.params.HttpParams, java.lang.String);
    method public static void setRedirecting(org.apache.http.params.HttpParams, boolean);
  }

}

package org.apache.http.client.protocol {

  public abstract deprecated interface ClientContext {
    field public static final java.lang.String AUTHSCHEME_REGISTRY = "http.authscheme-registry";
    field public static final java.lang.String AUTH_SCHEME_PREF = "http.auth.scheme-pref";
    field public static final java.lang.String COOKIESPEC_REGISTRY = "http.cookiespec-registry";
    field public static final java.lang.String COOKIE_ORIGIN = "http.cookie-origin";
    field public static final java.lang.String COOKIE_SPEC = "http.cookie-spec";
    field public static final java.lang.String COOKIE_STORE = "http.cookie-store";
    field public static final java.lang.String CREDS_PROVIDER = "http.auth.credentials-provider";
    field public static final java.lang.String PROXY_AUTH_STATE = "http.auth.proxy-scope";
    field public static final java.lang.String TARGET_AUTH_STATE = "http.auth.target-scope";
    field public static final java.lang.String USER_TOKEN = "http.user-token";
  }

  public deprecated class ClientContextConfigurer implements org.apache.http.client.protocol.ClientContext {
    ctor public ClientContextConfigurer(org.apache.http.protocol.HttpContext);
    method public void setAuthSchemePref(java.util.List<java.lang.String>);
    method public void setAuthSchemeRegistry(org.apache.http.auth.AuthSchemeRegistry);
    method public void setCookieSpecRegistry(org.apache.http.cookie.CookieSpecRegistry);
    method public void setCookieStore(org.apache.http.client.CookieStore);
    method public void setCredentialsProvider(org.apache.http.client.CredentialsProvider);
  }

  public deprecated class RequestAddCookies implements org.apache.http.HttpRequestInterceptor {
    ctor public RequestAddCookies();
    method public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  public deprecated class RequestDefaultHeaders implements org.apache.http.HttpRequestInterceptor {
    ctor public RequestDefaultHeaders();
    method public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  public deprecated class RequestProxyAuthentication implements org.apache.http.HttpRequestInterceptor {
    ctor public RequestProxyAuthentication();
    method public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  public deprecated class RequestTargetAuthentication implements org.apache.http.HttpRequestInterceptor {
    ctor public RequestTargetAuthentication();
    method public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  public deprecated class ResponseProcessCookies implements org.apache.http.HttpResponseInterceptor {
    ctor public ResponseProcessCookies();
    method public void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

}

package org.apache.http.client.utils {

  public deprecated class CloneUtils {
    method public static java.lang.Object clone(java.lang.Object) throws java.lang.CloneNotSupportedException;
  }

  public deprecated class URIUtils {
    method public static java.net.URI createURI(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String) throws java.net.URISyntaxException;
    method public static java.net.URI resolve(java.net.URI, java.lang.String);
    method public static java.net.URI resolve(java.net.URI, java.net.URI);
    method public static java.net.URI rewriteURI(java.net.URI, org.apache.http.HttpHost, boolean) throws java.net.URISyntaxException;
    method public static java.net.URI rewriteURI(java.net.URI, org.apache.http.HttpHost) throws java.net.URISyntaxException;
  }

  public deprecated class URLEncodedUtils {
    ctor public URLEncodedUtils();
    method public static java.lang.String format(java.util.List<? extends org.apache.http.NameValuePair>, java.lang.String);
    method public static boolean isEncoded(org.apache.http.HttpEntity);
    method public static java.util.List<org.apache.http.NameValuePair> parse(java.net.URI, java.lang.String);
    method public static java.util.List<org.apache.http.NameValuePair> parse(org.apache.http.HttpEntity) throws java.io.IOException;
    method public static void parse(java.util.List<org.apache.http.NameValuePair>, java.util.Scanner, java.lang.String);
    field public static final java.lang.String CONTENT_TYPE = "application/x-www-form-urlencoded";
  }

}

package org.apache.http.conn {

  public deprecated class BasicEofSensorWatcher implements org.apache.http.conn.EofSensorWatcher {
    ctor public BasicEofSensorWatcher(org.apache.http.conn.ManagedClientConnection, boolean);
    method public boolean eofDetected(java.io.InputStream) throws java.io.IOException;
    method public boolean streamAbort(java.io.InputStream) throws java.io.IOException;
    method public boolean streamClosed(java.io.InputStream) throws java.io.IOException;
    field protected boolean attemptReuse;
    field protected org.apache.http.conn.ManagedClientConnection managedConn;
  }

  public deprecated class BasicManagedEntity extends org.apache.http.entity.HttpEntityWrapper implements org.apache.http.conn.ConnectionReleaseTrigger org.apache.http.conn.EofSensorWatcher {
    ctor public BasicManagedEntity(org.apache.http.HttpEntity, org.apache.http.conn.ManagedClientConnection, boolean);
    method public void abortConnection() throws java.io.IOException;
    method public boolean eofDetected(java.io.InputStream) throws java.io.IOException;
    method public void releaseConnection() throws java.io.IOException;
    method protected void releaseManagedConnection() throws java.io.IOException;
    method public boolean streamAbort(java.io.InputStream) throws java.io.IOException;
    method public boolean streamClosed(java.io.InputStream) throws java.io.IOException;
    field protected final boolean attemptReuse;
    field protected org.apache.http.conn.ManagedClientConnection managedConn;
  }

  public abstract deprecated interface ClientConnectionManager {
    method public abstract void closeExpiredConnections();
    method public abstract void closeIdleConnections(long, java.util.concurrent.TimeUnit);
    method public abstract org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry();
    method public abstract void releaseConnection(org.apache.http.conn.ManagedClientConnection, long, java.util.concurrent.TimeUnit);
    method public abstract org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute, java.lang.Object);
    method public abstract void shutdown();
  }

  public abstract deprecated interface ClientConnectionManagerFactory {
    method public abstract org.apache.http.conn.ClientConnectionManager newInstance(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry);
  }

  public abstract deprecated interface ClientConnectionOperator {
    method public abstract org.apache.http.conn.OperatedClientConnection createConnection();
    method public abstract void openConnection(org.apache.http.conn.OperatedClientConnection, org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public abstract void updateSecureConnection(org.apache.http.conn.OperatedClientConnection, org.apache.http.HttpHost, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
  }

  public abstract deprecated interface ClientConnectionRequest {
    method public abstract void abortRequest();
    method public abstract org.apache.http.conn.ManagedClientConnection getConnection(long, java.util.concurrent.TimeUnit) throws org.apache.http.conn.ConnectionPoolTimeoutException, java.lang.InterruptedException;
  }

  public deprecated class ConnectTimeoutException extends java.io.InterruptedIOException {
    ctor public ConnectTimeoutException();
    ctor public ConnectTimeoutException(java.lang.String);
  }

  public abstract deprecated interface ConnectionKeepAliveStrategy {
    method public abstract long getKeepAliveDuration(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
  }

  public deprecated class ConnectionPoolTimeoutException extends org.apache.http.conn.ConnectTimeoutException {
    ctor public ConnectionPoolTimeoutException();
    ctor public ConnectionPoolTimeoutException(java.lang.String);
  }

  public abstract deprecated interface ConnectionReleaseTrigger {
    method public abstract void abortConnection() throws java.io.IOException;
    method public abstract void releaseConnection() throws java.io.IOException;
  }

  public deprecated class EofSensorInputStream extends java.io.InputStream implements org.apache.http.conn.ConnectionReleaseTrigger {
    ctor public EofSensorInputStream(java.io.InputStream, org.apache.http.conn.EofSensorWatcher);
    method public void abortConnection() throws java.io.IOException;
    method protected void checkAbort() throws java.io.IOException;
    method protected void checkClose() throws java.io.IOException;
    method protected void checkEOF(int) throws java.io.IOException;
    method protected boolean isReadAllowed() throws java.io.IOException;
    method public int read() throws java.io.IOException;
    method public void releaseConnection() throws java.io.IOException;
    field protected java.io.InputStream wrappedStream;
  }

  public abstract deprecated interface EofSensorWatcher {
    method public abstract boolean eofDetected(java.io.InputStream) throws java.io.IOException;
    method public abstract boolean streamAbort(java.io.InputStream) throws java.io.IOException;
    method public abstract boolean streamClosed(java.io.InputStream) throws java.io.IOException;
  }

  public deprecated class HttpHostConnectException extends java.net.ConnectException {
    ctor public HttpHostConnectException(org.apache.http.HttpHost, java.net.ConnectException);
    method public org.apache.http.HttpHost getHost();
  }

  public abstract deprecated interface ManagedClientConnection implements org.apache.http.conn.ConnectionReleaseTrigger org.apache.http.HttpClientConnection org.apache.http.HttpInetConnection {
    method public abstract org.apache.http.conn.routing.HttpRoute getRoute();
    method public abstract javax.net.ssl.SSLSession getSSLSession();
    method public abstract java.lang.Object getState();
    method public abstract boolean isMarkedReusable();
    method public abstract boolean isSecure();
    method public abstract void layerProtocol(org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public abstract void markReusable();
    method public abstract void open(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public abstract void setIdleDuration(long, java.util.concurrent.TimeUnit);
    method public abstract void setState(java.lang.Object);
    method public abstract void tunnelProxy(org.apache.http.HttpHost, boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public abstract void tunnelTarget(boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public abstract void unmarkReusable();
  }

  public final deprecated class MultihomePlainSocketFactory implements org.apache.http.conn.scheme.SocketFactory {
    method public java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public java.net.Socket createSocket();
    method public static org.apache.http.conn.MultihomePlainSocketFactory getSocketFactory();
    method public boolean isSecure(java.net.Socket) throws java.lang.IllegalArgumentException;
  }

  public abstract deprecated interface OperatedClientConnection implements org.apache.http.HttpClientConnection org.apache.http.HttpInetConnection {
    method public abstract java.net.Socket getSocket();
    method public abstract org.apache.http.HttpHost getTargetHost();
    method public abstract boolean isSecure();
    method public abstract void openCompleted(boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public abstract void opening(java.net.Socket, org.apache.http.HttpHost) throws java.io.IOException;
    method public abstract void update(java.net.Socket, org.apache.http.HttpHost, boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
  }

}

package org.apache.http.conn.params {

  public abstract deprecated interface ConnConnectionPNames {
    field public static final java.lang.String MAX_STATUS_LINE_GARBAGE = "http.connection.max-status-line-garbage";
  }

  public deprecated class ConnConnectionParamBean extends org.apache.http.params.HttpAbstractParamBean {
    ctor public ConnConnectionParamBean(org.apache.http.params.HttpParams);
    method public void setMaxStatusLineGarbage(int);
  }

  public abstract deprecated interface ConnManagerPNames {
    field public static final java.lang.String MAX_CONNECTIONS_PER_ROUTE = "http.conn-manager.max-per-route";
    field public static final java.lang.String MAX_TOTAL_CONNECTIONS = "http.conn-manager.max-total";
    field public static final java.lang.String TIMEOUT = "http.conn-manager.timeout";
  }

  public deprecated class ConnManagerParamBean extends org.apache.http.params.HttpAbstractParamBean {
    ctor public ConnManagerParamBean(org.apache.http.params.HttpParams);
    method public void setConnectionsPerRoute(org.apache.http.conn.params.ConnPerRouteBean);
    method public void setMaxTotalConnections(int);
    method public void setTimeout(long);
  }

  public final deprecated class ConnManagerParams implements org.apache.http.conn.params.ConnManagerPNames {
    ctor public ConnManagerParams();
    method public static org.apache.http.conn.params.ConnPerRoute getMaxConnectionsPerRoute(org.apache.http.params.HttpParams);
    method public static int getMaxTotalConnections(org.apache.http.params.HttpParams);
    method public static long getTimeout(org.apache.http.params.HttpParams);
    method public static void setMaxConnectionsPerRoute(org.apache.http.params.HttpParams, org.apache.http.conn.params.ConnPerRoute);
    method public static void setMaxTotalConnections(org.apache.http.params.HttpParams, int);
    method public static void setTimeout(org.apache.http.params.HttpParams, long);
    field public static final int DEFAULT_MAX_TOTAL_CONNECTIONS = 20; // 0x14
  }

  public abstract deprecated interface ConnPerRoute {
    method public abstract int getMaxForRoute(org.apache.http.conn.routing.HttpRoute);
  }

  public final deprecated class ConnPerRouteBean implements org.apache.http.conn.params.ConnPerRoute {
    ctor public ConnPerRouteBean(int);
    ctor public ConnPerRouteBean();
    method public int getDefaultMax();
    method public int getMaxForRoute(org.apache.http.conn.routing.HttpRoute);
    method public void setDefaultMaxPerRoute(int);
    method public void setMaxForRoute(org.apache.http.conn.routing.HttpRoute, int);
    method public void setMaxForRoutes(java.util.Map<org.apache.http.conn.routing.HttpRoute, java.lang.Integer>);
    field public static final int DEFAULT_MAX_CONNECTIONS_PER_ROUTE = 2; // 0x2
  }

  public abstract deprecated interface ConnRoutePNames {
    field public static final java.lang.String DEFAULT_PROXY = "http.route.default-proxy";
    field public static final java.lang.String FORCED_ROUTE = "http.route.forced-route";
    field public static final java.lang.String LOCAL_ADDRESS = "http.route.local-address";
  }

  public deprecated class ConnRouteParamBean extends org.apache.http.params.HttpAbstractParamBean {
    ctor public ConnRouteParamBean(org.apache.http.params.HttpParams);
    method public void setDefaultProxy(org.apache.http.HttpHost);
    method public void setForcedRoute(org.apache.http.conn.routing.HttpRoute);
    method public void setLocalAddress(java.net.InetAddress);
  }

  public deprecated class ConnRouteParams implements org.apache.http.conn.params.ConnRoutePNames {
    method public static org.apache.http.HttpHost getDefaultProxy(org.apache.http.params.HttpParams);
    method public static org.apache.http.conn.routing.HttpRoute getForcedRoute(org.apache.http.params.HttpParams);
    method public static java.net.InetAddress getLocalAddress(org.apache.http.params.HttpParams);
    method public static void setDefaultProxy(org.apache.http.params.HttpParams, org.apache.http.HttpHost);
    method public static void setForcedRoute(org.apache.http.params.HttpParams, org.apache.http.conn.routing.HttpRoute);
    method public static void setLocalAddress(org.apache.http.params.HttpParams, java.net.InetAddress);
    field public static final org.apache.http.HttpHost NO_HOST;
    field public static final org.apache.http.conn.routing.HttpRoute NO_ROUTE;
  }

}

package org.apache.http.conn.routing {

  public deprecated class BasicRouteDirector implements org.apache.http.conn.routing.HttpRouteDirector {
    ctor public BasicRouteDirector();
    method protected int directStep(org.apache.http.conn.routing.RouteInfo, org.apache.http.conn.routing.RouteInfo);
    method protected int firstStep(org.apache.http.conn.routing.RouteInfo);
    method public int nextStep(org.apache.http.conn.routing.RouteInfo, org.apache.http.conn.routing.RouteInfo);
    method protected int proxiedStep(org.apache.http.conn.routing.RouteInfo, org.apache.http.conn.routing.RouteInfo);
  }

  public final deprecated class HttpRoute implements java.lang.Cloneable org.apache.http.conn.routing.RouteInfo {
    ctor public HttpRoute(org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.HttpHost[], boolean, org.apache.http.conn.routing.RouteInfo.TunnelType, org.apache.http.conn.routing.RouteInfo.LayerType);
    ctor public HttpRoute(org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.HttpHost, boolean, org.apache.http.conn.routing.RouteInfo.TunnelType, org.apache.http.conn.routing.RouteInfo.LayerType);
    ctor public HttpRoute(org.apache.http.HttpHost, java.net.InetAddress, boolean);
    ctor public HttpRoute(org.apache.http.HttpHost);
    ctor public HttpRoute(org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.HttpHost, boolean);
    method public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    method public int getHopCount();
    method public org.apache.http.HttpHost getHopTarget(int);
    method public org.apache.http.conn.routing.RouteInfo.LayerType getLayerType();
    method public java.net.InetAddress getLocalAddress();
    method public org.apache.http.HttpHost getProxyHost();
    method public org.apache.http.HttpHost getTargetHost();
    method public org.apache.http.conn.routing.RouteInfo.TunnelType getTunnelType();
    method public boolean isLayered();
    method public boolean isSecure();
    method public boolean isTunnelled();
  }

  public abstract deprecated interface HttpRouteDirector {
    method public abstract int nextStep(org.apache.http.conn.routing.RouteInfo, org.apache.http.conn.routing.RouteInfo);
    field public static final int COMPLETE = 0; // 0x0
    field public static final int CONNECT_PROXY = 2; // 0x2
    field public static final int CONNECT_TARGET = 1; // 0x1
    field public static final int LAYER_PROTOCOL = 5; // 0x5
    field public static final int TUNNEL_PROXY = 4; // 0x4
    field public static final int TUNNEL_TARGET = 3; // 0x3
    field public static final int UNREACHABLE = -1; // 0xffffffff
  }

  public abstract deprecated interface HttpRoutePlanner {
    method public abstract org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException;
  }

  public abstract deprecated interface RouteInfo {
    method public abstract int getHopCount();
    method public abstract org.apache.http.HttpHost getHopTarget(int);
    method public abstract org.apache.http.conn.routing.RouteInfo.LayerType getLayerType();
    method public abstract java.net.InetAddress getLocalAddress();
    method public abstract org.apache.http.HttpHost getProxyHost();
    method public abstract org.apache.http.HttpHost getTargetHost();
    method public abstract org.apache.http.conn.routing.RouteInfo.TunnelType getTunnelType();
    method public abstract boolean isLayered();
    method public abstract boolean isSecure();
    method public abstract boolean isTunnelled();
  }

  public static final class RouteInfo.LayerType extends java.lang.Enum {
    method public static org.apache.http.conn.routing.RouteInfo.LayerType valueOf(java.lang.String);
    method public static final org.apache.http.conn.routing.RouteInfo.LayerType[] values();
    enum_constant public static final org.apache.http.conn.routing.RouteInfo.LayerType LAYERED;
    enum_constant public static final org.apache.http.conn.routing.RouteInfo.LayerType PLAIN;
  }

  public static final class RouteInfo.TunnelType extends java.lang.Enum {
    method public static org.apache.http.conn.routing.RouteInfo.TunnelType valueOf(java.lang.String);
    method public static final org.apache.http.conn.routing.RouteInfo.TunnelType[] values();
    enum_constant public static final org.apache.http.conn.routing.RouteInfo.TunnelType PLAIN;
    enum_constant public static final org.apache.http.conn.routing.RouteInfo.TunnelType TUNNELLED;
  }

  public final deprecated class RouteTracker implements java.lang.Cloneable org.apache.http.conn.routing.RouteInfo {
    ctor public RouteTracker(org.apache.http.HttpHost, java.net.InetAddress);
    ctor public RouteTracker(org.apache.http.conn.routing.HttpRoute);
    method public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    method public void connectProxy(org.apache.http.HttpHost, boolean);
    method public void connectTarget(boolean);
    method public int getHopCount();
    method public org.apache.http.HttpHost getHopTarget(int);
    method public org.apache.http.conn.routing.RouteInfo.LayerType getLayerType();
    method public java.net.InetAddress getLocalAddress();
    method public org.apache.http.HttpHost getProxyHost();
    method public org.apache.http.HttpHost getTargetHost();
    method public org.apache.http.conn.routing.RouteInfo.TunnelType getTunnelType();
    method public boolean isConnected();
    method public boolean isLayered();
    method public boolean isSecure();
    method public boolean isTunnelled();
    method public void layerProtocol(boolean);
    method public org.apache.http.conn.routing.HttpRoute toRoute();
    method public void tunnelProxy(org.apache.http.HttpHost, boolean);
    method public void tunnelTarget(boolean);
  }

}

package org.apache.http.conn.scheme {

  public abstract deprecated interface HostNameResolver {
    method public abstract java.net.InetAddress resolve(java.lang.String) throws java.io.IOException;
  }

  public abstract deprecated interface LayeredSocketFactory implements org.apache.http.conn.scheme.SocketFactory {
    method public abstract java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException, java.net.UnknownHostException;
  }

  public final deprecated class PlainSocketFactory implements org.apache.http.conn.scheme.SocketFactory {
    ctor public PlainSocketFactory(org.apache.http.conn.scheme.HostNameResolver);
    ctor public PlainSocketFactory();
    method public java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public java.net.Socket createSocket();
    method public static org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory();
    method public boolean isSecure(java.net.Socket) throws java.lang.IllegalArgumentException;
  }

  public final deprecated class Scheme {
    ctor public Scheme(java.lang.String, org.apache.http.conn.scheme.SocketFactory, int);
    method public int getDefaultPort();
    method public java.lang.String getName();
    method public org.apache.http.conn.scheme.SocketFactory getSocketFactory();
    method public boolean isLayered();
    method public int resolvePort(int);
  }

  public final deprecated class SchemeRegistry {
    ctor public SchemeRegistry();
    method public synchronized org.apache.http.conn.scheme.Scheme get(java.lang.String);
    method public synchronized org.apache.http.conn.scheme.Scheme getScheme(java.lang.String);
    method public synchronized org.apache.http.conn.scheme.Scheme getScheme(org.apache.http.HttpHost);
    method public synchronized java.util.List<java.lang.String> getSchemeNames();
    method public synchronized org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme);
    method public synchronized void setItems(java.util.Map<java.lang.String, org.apache.http.conn.scheme.Scheme>);
    method public synchronized org.apache.http.conn.scheme.Scheme unregister(java.lang.String);
  }

  public abstract deprecated interface SocketFactory {
    method public abstract java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams) throws org.apache.http.conn.ConnectTimeoutException, java.io.IOException, java.net.UnknownHostException;
    method public abstract java.net.Socket createSocket() throws java.io.IOException;
    method public abstract boolean isSecure(java.net.Socket) throws java.lang.IllegalArgumentException;
  }

}

package org.apache.http.conn.util {

  public deprecated class InetAddressUtils {
    method public static boolean isIPv4Address(java.lang.String);
    method public static boolean isIPv6Address(java.lang.String);
    method public static boolean isIPv6HexCompressedAddress(java.lang.String);
    method public static boolean isIPv6StdAddress(java.lang.String);
  }

}

package org.apache.http.cookie {

  public abstract deprecated interface ClientCookie implements org.apache.http.cookie.Cookie {
    method public abstract boolean containsAttribute(java.lang.String);
    method public abstract java.lang.String getAttribute(java.lang.String);
    field public static final java.lang.String COMMENTURL_ATTR = "commenturl";
    field public static final java.lang.String COMMENT_ATTR = "comment";
    field public static final java.lang.String DISCARD_ATTR = "discard";
    field public static final java.lang.String DOMAIN_ATTR = "domain";
    field public static final java.lang.String EXPIRES_ATTR = "expires";
    field public static final java.lang.String MAX_AGE_ATTR = "max-age";
    field public static final java.lang.String PATH_ATTR = "path";
    field public static final java.lang.String PORT_ATTR = "port";
    field public static final java.lang.String SECURE_ATTR = "secure";
    field public static final java.lang.String VERSION_ATTR = "version";
  }

  public abstract deprecated interface Cookie {
    method public abstract java.lang.String getComment();
    method public abstract java.lang.String getCommentURL();
    method public abstract java.lang.String getDomain();
    method public abstract java.util.Date getExpiryDate();
    method public abstract java.lang.String getName();
    method public abstract java.lang.String getPath();
    method public abstract int[] getPorts();
    method public abstract java.lang.String getValue();
    method public abstract int getVersion();
    method public abstract boolean isExpired(java.util.Date);
    method public abstract boolean isPersistent();
    method public abstract boolean isSecure();
  }

  public abstract deprecated interface CookieAttributeHandler {
    method public abstract boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method public abstract void parse(org.apache.http.cookie.SetCookie, java.lang.String) throws org.apache.http.cookie.MalformedCookieException;
    method public abstract void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  public deprecated class CookieIdentityComparator implements java.util.Comparator java.io.Serializable {
    ctor public CookieIdentityComparator();
    method public int compare(org.apache.http.cookie.Cookie, org.apache.http.cookie.Cookie);
  }

  public final deprecated class CookieOrigin {
    ctor public CookieOrigin(java.lang.String, int, java.lang.String, boolean);
    method public java.lang.String getHost();
    method public java.lang.String getPath();
    method public int getPort();
    method public boolean isSecure();
  }

  public deprecated class CookiePathComparator implements java.util.Comparator java.io.Serializable {
    ctor public CookiePathComparator();
    method public int compare(org.apache.http.cookie.Cookie, org.apache.http.cookie.Cookie);
  }

  public abstract deprecated interface CookieSpec {
    method public abstract java.util.List<org.apache.http.Header> formatCookies(java.util.List<org.apache.http.cookie.Cookie>);
    method public abstract int getVersion();
    method public abstract org.apache.http.Header getVersionHeader();
    method public abstract boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method public abstract java.util.List<org.apache.http.cookie.Cookie> parse(org.apache.http.Header, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
    method public abstract void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  public abstract deprecated interface CookieSpecFactory {
    method public abstract org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams);
  }

  public final deprecated class CookieSpecRegistry {
    ctor public CookieSpecRegistry();
    method public synchronized org.apache.http.cookie.CookieSpec getCookieSpec(java.lang.String, org.apache.http.params.HttpParams) throws java.lang.IllegalStateException;
    method public synchronized org.apache.http.cookie.CookieSpec getCookieSpec(java.lang.String) throws java.lang.IllegalStateException;
    method public synchronized java.util.List<java.lang.String> getSpecNames();
    method public synchronized void register(java.lang.String, org.apache.http.cookie.CookieSpecFactory);
    method public synchronized void setItems(java.util.Map<java.lang.String, org.apache.http.cookie.CookieSpecFactory>);
    method public synchronized void unregister(java.lang.String);
  }

  public deprecated class MalformedCookieException extends org.apache.http.ProtocolException {
    ctor public MalformedCookieException();
    ctor public MalformedCookieException(java.lang.String);
    ctor public MalformedCookieException(java.lang.String, java.lang.Throwable);
  }

  public abstract deprecated interface SM {
    field public static final java.lang.String COOKIE = "Cookie";
    field public static final java.lang.String COOKIE2 = "Cookie2";
    field public static final java.lang.String SET_COOKIE = "Set-Cookie";
    field public static final java.lang.String SET_COOKIE2 = "Set-Cookie2";
  }

  public abstract deprecated interface SetCookie implements org.apache.http.cookie.Cookie {
    method public abstract void setComment(java.lang.String);
    method public abstract void setDomain(java.lang.String);
    method public abstract void setExpiryDate(java.util.Date);
    method public abstract void setPath(java.lang.String);
    method public abstract void setSecure(boolean);
    method public abstract void setValue(java.lang.String);
    method public abstract void setVersion(int);
  }

  public abstract deprecated interface SetCookie2 implements org.apache.http.cookie.SetCookie {
    method public abstract void setCommentURL(java.lang.String);
    method public abstract void setDiscard(boolean);
    method public abstract void setPorts(int[]);
  }

}

package org.apache.http.cookie.params {

  public abstract deprecated interface CookieSpecPNames {
    field public static final java.lang.String DATE_PATTERNS = "http.protocol.cookie-datepatterns";
    field public static final java.lang.String SINGLE_COOKIE_HEADER = "http.protocol.single-cookie-header";
  }

  public deprecated class CookieSpecParamBean extends org.apache.http.params.HttpAbstractParamBean {
    ctor public CookieSpecParamBean(org.apache.http.params.HttpParams);
    method public void setDatePatterns(java.util.Collection<java.lang.String>);
    method public void setSingleHeader(boolean);
  }

}

package org.apache.http.entity {

  public abstract deprecated class AbstractHttpEntity implements org.apache.http.HttpEntity {
    ctor protected AbstractHttpEntity();
    method public void consumeContent() throws java.io.IOException, java.lang.UnsupportedOperationException;
    method public org.apache.http.Header getContentEncoding();
    method public org.apache.http.Header getContentType();
    method public boolean isChunked();
    method public void setChunked(boolean);
    method public void setContentEncoding(org.apache.http.Header);
    method public void setContentEncoding(java.lang.String);
    method public void setContentType(org.apache.http.Header);
    method public void setContentType(java.lang.String);
    field protected boolean chunked;
    field protected org.apache.http.Header contentEncoding;
    field protected org.apache.http.Header contentType;
  }

  public deprecated class BasicHttpEntity extends org.apache.http.entity.AbstractHttpEntity {
    ctor public BasicHttpEntity();
    method public void consumeContent() throws java.io.IOException;
    method public java.io.InputStream getContent() throws java.lang.IllegalStateException;
    method public long getContentLength();
    method public boolean isRepeatable();
    method public boolean isStreaming();
    method public void setContent(java.io.InputStream);
    method public void setContentLength(long);
    method public void writeTo(java.io.OutputStream) throws java.io.IOException;
  }

  public deprecated class BufferedHttpEntity extends org.apache.http.entity.HttpEntityWrapper {
    ctor public BufferedHttpEntity(org.apache.http.HttpEntity) throws java.io.IOException;
  }

  public deprecated class ByteArrayEntity extends org.apache.http.entity.AbstractHttpEntity implements java.lang.Cloneable {
    ctor public ByteArrayEntity(byte[]);
    method public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    method public java.io.InputStream getContent();
    method public long getContentLength();
    method public boolean isRepeatable();
    method public boolean isStreaming();
    method public void writeTo(java.io.OutputStream) throws java.io.IOException;
    field protected final byte[] content;
  }

  public abstract deprecated interface ContentLengthStrategy {
    method public abstract long determineLength(org.apache.http.HttpMessage) throws org.apache.http.HttpException;
    field public static final int CHUNKED = -2; // 0xfffffffe
    field public static final int IDENTITY = -1; // 0xffffffff
  }

  public abstract deprecated interface ContentProducer {
    method public abstract void writeTo(java.io.OutputStream) throws java.io.IOException;
  }

  public deprecated class EntityTemplate extends org.apache.http.entity.AbstractHttpEntity {
    ctor public EntityTemplate(org.apache.http.entity.ContentProducer);
    method public void consumeContent() throws java.io.IOException;
    method public java.io.InputStream getContent();
    method public long getContentLength();
    method public boolean isRepeatable();
    method public boolean isStreaming();
    method public void writeTo(java.io.OutputStream) throws java.io.IOException;
  }

  public deprecated class FileEntity extends org.apache.http.entity.AbstractHttpEntity implements java.lang.Cloneable {
    ctor public FileEntity(java.io.File, java.lang.String);
    method public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    method public java.io.InputStream getContent() throws java.io.IOException;
    method public long getContentLength();
    method public boolean isRepeatable();
    method public boolean isStreaming();
    method public void writeTo(java.io.OutputStream) throws java.io.IOException;
    field protected final java.io.File file;
  }

  public deprecated class HttpEntityWrapper implements org.apache.http.HttpEntity {
    ctor public HttpEntityWrapper(org.apache.http.HttpEntity);
    method public void consumeContent() throws java.io.IOException;
    method public java.io.InputStream getContent() throws java.io.IOException;
    method public org.apache.http.Header getContentEncoding();
    method public long getContentLength();
    method public org.apache.http.Header getContentType();
    method public boolean isChunked();
    method public boolean isRepeatable();
    method public boolean isStreaming();
    method public void writeTo(java.io.OutputStream) throws java.io.IOException;
    field protected org.apache.http.HttpEntity wrappedEntity;
  }

  public deprecated class InputStreamEntity extends org.apache.http.entity.AbstractHttpEntity {
    ctor public InputStreamEntity(java.io.InputStream, long);
    method public void consumeContent() throws java.io.IOException;
    method public java.io.InputStream getContent() throws java.io.IOException;
    method public long getContentLength();
    method public boolean isRepeatable();
    method public boolean isStreaming();
    method public void writeTo(java.io.OutputStream) throws java.io.IOException;
  }

  public deprecated class SerializableEntity extends org.apache.http.entity.AbstractHttpEntity {
    ctor public SerializableEntity(java.io.Serializable, boolean) throws java.io.IOException;
    method public java.io.InputStream getContent() throws java.io.IOException, java.lang.IllegalStateException;
    method public long getContentLength();
    method public boolean isRepeatable();
    method public boolean isStreaming();
    method public void writeTo(java.io.OutputStream) throws java.io.IOException;
  }

  public deprecated class StringEntity extends org.apache.http.entity.AbstractHttpEntity implements java.lang.Cloneable {
    ctor public StringEntity(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException;
    ctor public StringEntity(java.lang.String) throws java.io.UnsupportedEncodingException;
    method public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    method public java.io.InputStream getContent() throws java.io.IOException;
    method public long getContentLength();
    method public boolean isRepeatable();
    method public boolean isStreaming();
    method public void writeTo(java.io.OutputStream) throws java.io.IOException;
    field protected final byte[] content;
  }

}

package org.apache.http.impl {

  public abstract deprecated class AbstractHttpClientConnection implements org.apache.http.HttpClientConnection {
    ctor public AbstractHttpClientConnection();
    method protected abstract void assertOpen() throws java.lang.IllegalStateException;
    method protected org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer();
    method protected org.apache.http.impl.entity.EntitySerializer createEntitySerializer();
    method protected org.apache.http.HttpResponseFactory createHttpResponseFactory();
    method protected org.apache.http.io.HttpMessageWriter createRequestWriter(org.apache.http.io.SessionOutputBuffer, org.apache.http.params.HttpParams);
    method protected org.apache.http.io.HttpMessageParser createResponseParser(org.apache.http.io.SessionInputBuffer, org.apache.http.HttpResponseFactory, org.apache.http.params.HttpParams);
    method protected void doFlush() throws java.io.IOException;
    method public void flush() throws java.io.IOException;
    method public org.apache.http.HttpConnectionMetrics getMetrics();
    method protected void init(org.apache.http.io.SessionInputBuffer, org.apache.http.io.SessionOutputBuffer, org.apache.http.params.HttpParams);
    method public boolean isResponseAvailable(int) throws java.io.IOException;
    method public boolean isStale();
    method public void receiveResponseEntity(org.apache.http.HttpResponse) throws org.apache.http.HttpException, java.io.IOException;
    method public org.apache.http.HttpResponse receiveResponseHeader() throws org.apache.http.HttpException, java.io.IOException;
    method public void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) throws org.apache.http.HttpException, java.io.IOException;
    method public void sendRequestHeader(org.apache.http.HttpRequest) throws org.apache.http.HttpException, java.io.IOException;
  }

  public abstract deprecated class AbstractHttpServerConnection implements org.apache.http.HttpServerConnection {
    ctor public AbstractHttpServerConnection();
    method protected abstract void assertOpen() throws java.lang.IllegalStateException;
    method protected org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer();
    method protected org.apache.http.impl.entity.EntitySerializer createEntitySerializer();
    method protected org.apache.http.HttpRequestFactory createHttpRequestFactory();
    method protected org.apache.http.io.HttpMessageParser createRequestParser(org.apache.http.io.SessionInputBuffer, org.apache.http.HttpRequestFactory, org.apache.http.params.HttpParams);
    method protected org.apache.http.io.HttpMessageWriter createResponseWriter(org.apache.http.io.SessionOutputBuffer, org.apache.http.params.HttpParams);
    method protected void doFlush() throws java.io.IOException;
    method public void flush() throws java.io.IOException;
    method public org.apache.http.HttpConnectionMetrics getMetrics();
    method protected void init(org.apache.http.io.SessionInputBuffer, org.apache.http.io.SessionOutputBuffer, org.apache.http.params.HttpParams);
    method public boolean isStale();
    method public void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest) throws org.apache.http.HttpException, java.io.IOException;
    method public org.apache.http.HttpRequest receiveRequestHeader() throws org.apache.http.HttpException, java.io.IOException;
    method public void sendResponseEntity(org.apache.http.HttpResponse) throws org.apache.http.HttpException, java.io.IOException;
    method public void sendResponseHeader(org.apache.http.HttpResponse) throws org.apache.http.HttpException, java.io.IOException;
  }

  public deprecated class DefaultConnectionReuseStrategy implements org.apache.http.ConnectionReuseStrategy {
    ctor public DefaultConnectionReuseStrategy();
    method protected org.apache.http.TokenIterator createTokenIterator(org.apache.http.HeaderIterator);
    method public boolean keepAlive(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
  }

  public deprecated class DefaultHttpClientConnection extends org.apache.http.impl.SocketHttpClientConnection {
    ctor public DefaultHttpClientConnection();
    method public void bind(java.net.Socket, org.apache.http.params.HttpParams) throws java.io.IOException;
  }

  public deprecated class DefaultHttpRequestFactory implements org.apache.http.HttpRequestFactory {
    ctor public DefaultHttpRequestFactory();
    method public org.apache.http.HttpRequest newHttpRequest(org.apache.http.RequestLine) throws org.apache.http.MethodNotSupportedException;
    method public org.apache.http.HttpRequest newHttpRequest(java.lang.String, java.lang.String) throws org.apache.http.MethodNotSupportedException;
  }

  public deprecated class DefaultHttpResponseFactory implements org.apache.http.HttpResponseFactory {
    ctor public DefaultHttpResponseFactory(org.apache.http.ReasonPhraseCatalog);
    ctor public DefaultHttpResponseFactory();
    method protected java.util.Locale determineLocale(org.apache.http.protocol.HttpContext);
    method public org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion, int, org.apache.http.protocol.HttpContext);
    method public org.apache.http.HttpResponse newHttpResponse(org.apache.http.StatusLine, org.apache.http.protocol.HttpContext);
    field protected final org.apache.http.ReasonPhraseCatalog reasonCatalog;
  }

  public deprecated class DefaultHttpServerConnection extends org.apache.http.impl.SocketHttpServerConnection {
    ctor public DefaultHttpServerConnection();
    method public void bind(java.net.Socket, org.apache.http.params.HttpParams) throws java.io.IOException;
  }

  public deprecated class EnglishReasonPhraseCatalog implements org.apache.http.ReasonPhraseCatalog {
    ctor protected EnglishReasonPhraseCatalog();
    method public java.lang.String getReason(int, java.util.Locale);
    field public static final org.apache.http.impl.EnglishReasonPhraseCatalog INSTANCE;
  }

  public deprecated class HttpConnectionMetricsImpl implements org.apache.http.HttpConnectionMetrics {
    ctor public HttpConnectionMetricsImpl(org.apache.http.io.HttpTransportMetrics, org.apache.http.io.HttpTransportMetrics);
    method public java.lang.Object getMetric(java.lang.String);
    method public long getReceivedBytesCount();
    method public long getRequestCount();
    method public long getResponseCount();
    method public long getSentBytesCount();
    method public void incrementRequestCount();
    method public void incrementResponseCount();
    method public void reset();
    method public void setMetric(java.lang.String, java.lang.Object);
    field public static final java.lang.String RECEIVED_BYTES_COUNT = "http.received-bytes-count";
    field public static final java.lang.String REQUEST_COUNT = "http.request-count";
    field public static final java.lang.String RESPONSE_COUNT = "http.response-count";
    field public static final java.lang.String SENT_BYTES_COUNT = "http.sent-bytes-count";
  }

  public deprecated class NoConnectionReuseStrategy implements org.apache.http.ConnectionReuseStrategy {
    ctor public NoConnectionReuseStrategy();
    method public boolean keepAlive(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
  }

  public deprecated class SocketHttpClientConnection extends org.apache.http.impl.AbstractHttpClientConnection implements org.apache.http.HttpInetConnection {
    ctor public SocketHttpClientConnection();
    method protected void assertNotOpen();
    method protected void assertOpen();
    method protected void bind(java.net.Socket, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public void close() throws java.io.IOException;
    method protected org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException;
    method protected org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public java.net.InetAddress getLocalAddress();
    method public int getLocalPort();
    method public java.net.InetAddress getRemoteAddress();
    method public int getRemotePort();
    method protected java.net.Socket getSocket();
    method public int getSocketTimeout();
    method public boolean isOpen();
    method public void setSocketTimeout(int);
    method public void shutdown() throws java.io.IOException;
  }

  public deprecated class SocketHttpServerConnection extends org.apache.http.impl.AbstractHttpServerConnection implements org.apache.http.HttpInetConnection {
    ctor public SocketHttpServerConnection();
    method protected void assertNotOpen();
    method protected void assertOpen();
    method protected void bind(java.net.Socket, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public void close() throws java.io.IOException;
    method protected org.apache.http.io.SessionInputBuffer createHttpDataReceiver(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException;
    method protected org.apache.http.io.SessionOutputBuffer createHttpDataTransmitter(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public java.net.InetAddress getLocalAddress();
    method public int getLocalPort();
    method public java.net.InetAddress getRemoteAddress();
    method public int getRemotePort();
    method protected java.net.Socket getSocket();
    method public int getSocketTimeout();
    method public boolean isOpen();
    method public void setSocketTimeout(int);
    method public void shutdown() throws java.io.IOException;
  }

}

package org.apache.http.impl.auth {

  public abstract deprecated class AuthSchemeBase implements org.apache.http.auth.AuthScheme {
    ctor public AuthSchemeBase();
    method public boolean isProxy();
    method protected abstract void parseChallenge(org.apache.http.util.CharArrayBuffer, int, int) throws org.apache.http.auth.MalformedChallengeException;
    method public void processChallenge(org.apache.http.Header) throws org.apache.http.auth.MalformedChallengeException;
  }

  public deprecated class BasicScheme extends org.apache.http.impl.auth.RFC2617Scheme {
    ctor public BasicScheme();
    method public org.apache.http.Header authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest) throws org.apache.http.auth.AuthenticationException;
    method public static org.apache.http.Header authenticate(org.apache.http.auth.Credentials, java.lang.String, boolean);
    method public java.lang.String getSchemeName();
    method public boolean isComplete();
    method public boolean isConnectionBased();
  }

  public deprecated class BasicSchemeFactory implements org.apache.http.auth.AuthSchemeFactory {
    ctor public BasicSchemeFactory();
    method public org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams);
  }

  public deprecated class DigestScheme extends org.apache.http.impl.auth.RFC2617Scheme {
    ctor public DigestScheme();
    method public org.apache.http.Header authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest) throws org.apache.http.auth.AuthenticationException;
    method public static java.lang.String createCnonce();
    method public java.lang.String getSchemeName();
    method public boolean isComplete();
    method public boolean isConnectionBased();
    method public void overrideParamter(java.lang.String, java.lang.String);
  }

  public deprecated class DigestSchemeFactory implements org.apache.http.auth.AuthSchemeFactory {
    ctor public DigestSchemeFactory();
    method public org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams);
  }

  public abstract deprecated interface NTLMEngine {
    method public abstract java.lang.String generateType1Msg(java.lang.String, java.lang.String) throws org.apache.http.impl.auth.NTLMEngineException;
    method public abstract java.lang.String generateType3Msg(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.apache.http.impl.auth.NTLMEngineException;
  }

  public deprecated class NTLMEngineException extends org.apache.http.auth.AuthenticationException {
    ctor public NTLMEngineException();
    ctor public NTLMEngineException(java.lang.String);
    ctor public NTLMEngineException(java.lang.String, java.lang.Throwable);
  }

  public deprecated class NTLMScheme extends org.apache.http.impl.auth.AuthSchemeBase {
    ctor public NTLMScheme(org.apache.http.impl.auth.NTLMEngine);
    method public org.apache.http.Header authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest) throws org.apache.http.auth.AuthenticationException;
    method public java.lang.String getParameter(java.lang.String);
    method public java.lang.String getRealm();
    method public java.lang.String getSchemeName();
    method public boolean isComplete();
    method public boolean isConnectionBased();
    method protected void parseChallenge(org.apache.http.util.CharArrayBuffer, int, int) throws org.apache.http.auth.MalformedChallengeException;
  }

  public abstract deprecated class RFC2617Scheme extends org.apache.http.impl.auth.AuthSchemeBase {
    ctor public RFC2617Scheme();
    method public java.lang.String getParameter(java.lang.String);
    method protected java.util.Map<java.lang.String, java.lang.String> getParameters();
    method public java.lang.String getRealm();
    method protected void parseChallenge(org.apache.http.util.CharArrayBuffer, int, int) throws org.apache.http.auth.MalformedChallengeException;
  }

  public deprecated class UnsupportedDigestAlgorithmException extends java.lang.RuntimeException {
    ctor public UnsupportedDigestAlgorithmException();
    ctor public UnsupportedDigestAlgorithmException(java.lang.String);
    ctor public UnsupportedDigestAlgorithmException(java.lang.String, java.lang.Throwable);
  }

}

package org.apache.http.impl.client {

  public abstract deprecated class AbstractAuthenticationHandler implements org.apache.http.client.AuthenticationHandler {
    ctor public AbstractAuthenticationHandler();
    method protected java.util.List<java.lang.String> getAuthPreferences();
    method protected java.util.Map<java.lang.String, org.apache.http.Header> parseChallenges(org.apache.http.Header[]) throws org.apache.http.auth.MalformedChallengeException;
    method public org.apache.http.auth.AuthScheme selectScheme(java.util.Map<java.lang.String, org.apache.http.Header>, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.auth.AuthenticationException;
  }

  public abstract deprecated class AbstractHttpClient implements org.apache.http.client.HttpClient {
    ctor protected AbstractHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams);
    method public synchronized void addRequestInterceptor(org.apache.http.HttpRequestInterceptor);
    method public synchronized void addRequestInterceptor(org.apache.http.HttpRequestInterceptor, int);
    method public synchronized void addResponseInterceptor(org.apache.http.HttpResponseInterceptor);
    method public synchronized void addResponseInterceptor(org.apache.http.HttpResponseInterceptor, int);
    method public synchronized void clearRequestInterceptors();
    method public synchronized void clearResponseInterceptors();
    method protected abstract org.apache.http.auth.AuthSchemeRegistry createAuthSchemeRegistry();
    method protected abstract org.apache.http.conn.ClientConnectionManager createClientConnectionManager();
    method protected org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor, org.apache.http.conn.ClientConnectionManager, org.apache.http.ConnectionReuseStrategy, org.apache.http.conn.ConnectionKeepAliveStrategy, org.apache.http.conn.routing.HttpRoutePlanner, org.apache.http.protocol.HttpProcessor, org.apache.http.client.HttpRequestRetryHandler, org.apache.http.client.RedirectHandler, org.apache.http.client.AuthenticationHandler, org.apache.http.client.AuthenticationHandler, org.apache.http.client.UserTokenHandler, org.apache.http.params.HttpParams);
    method protected abstract org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy();
    method protected abstract org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy();
    method protected abstract org.apache.http.cookie.CookieSpecRegistry createCookieSpecRegistry();
    method protected abstract org.apache.http.client.CookieStore createCookieStore();
    method protected abstract org.apache.http.client.CredentialsProvider createCredentialsProvider();
    method protected abstract org.apache.http.protocol.HttpContext createHttpContext();
    method protected abstract org.apache.http.params.HttpParams createHttpParams();
    method protected abstract org.apache.http.protocol.BasicHttpProcessor createHttpProcessor();
    method protected abstract org.apache.http.client.HttpRequestRetryHandler createHttpRequestRetryHandler();
    method protected abstract org.apache.http.conn.routing.HttpRoutePlanner createHttpRoutePlanner();
    method protected abstract org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler();
    method protected abstract org.apache.http.client.RedirectHandler createRedirectHandler();
    method protected abstract org.apache.http.protocol.HttpRequestExecutor createRequestExecutor();
    method protected abstract org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler();
    method protected abstract org.apache.http.client.UserTokenHandler createUserTokenHandler();
    method protected org.apache.http.params.HttpParams determineParams(org.apache.http.HttpRequest);
    method public final org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public final org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public final org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public final org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public <T> T execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler<? extends T>) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public <T> T execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler<? extends T>, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public <T> T execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler<? extends T>) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public <T> T execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler<? extends T>, org.apache.http.protocol.HttpContext) throws org.apache.http.client.ClientProtocolException, java.io.IOException;
    method public final synchronized org.apache.http.auth.AuthSchemeRegistry getAuthSchemes();
    method public final synchronized org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy();
    method public final synchronized org.apache.http.conn.ClientConnectionManager getConnectionManager();
    method public final synchronized org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy();
    method public final synchronized org.apache.http.cookie.CookieSpecRegistry getCookieSpecs();
    method public final synchronized org.apache.http.client.CookieStore getCookieStore();
    method public final synchronized org.apache.http.client.CredentialsProvider getCredentialsProvider();
    method protected final synchronized org.apache.http.protocol.BasicHttpProcessor getHttpProcessor();
    method public final synchronized org.apache.http.client.HttpRequestRetryHandler getHttpRequestRetryHandler();
    method public final synchronized org.apache.http.params.HttpParams getParams();
    method public final synchronized org.apache.http.client.AuthenticationHandler getProxyAuthenticationHandler();
    method public final synchronized org.apache.http.client.RedirectHandler getRedirectHandler();
    method public final synchronized org.apache.http.protocol.HttpRequestExecutor getRequestExecutor();
    method public synchronized org.apache.http.HttpRequestInterceptor getRequestInterceptor(int);
    method public synchronized int getRequestInterceptorCount();
    method public synchronized org.apache.http.HttpResponseInterceptor getResponseInterceptor(int);
    method public synchronized int getResponseInterceptorCount();
    method public final synchronized org.apache.http.conn.routing.HttpRoutePlanner getRoutePlanner();
    method public final synchronized org.apache.http.client.AuthenticationHandler getTargetAuthenticationHandler();
    method public final synchronized org.apache.http.client.UserTokenHandler getUserTokenHandler();
    method public void removeRequestInterceptorByClass(java.lang.Class<? extends org.apache.http.HttpRequestInterceptor>);
    method public void removeResponseInterceptorByClass(java.lang.Class<? extends org.apache.http.HttpResponseInterceptor>);
    method public synchronized void setAuthSchemes(org.apache.http.auth.AuthSchemeRegistry);
    method public synchronized void setCookieSpecs(org.apache.http.cookie.CookieSpecRegistry);
    method public synchronized void setCookieStore(org.apache.http.client.CookieStore);
    method public synchronized void setCredentialsProvider(org.apache.http.client.CredentialsProvider);
    method public synchronized void setHttpRequestRetryHandler(org.apache.http.client.HttpRequestRetryHandler);
    method public synchronized void setKeepAliveStrategy(org.apache.http.conn.ConnectionKeepAliveStrategy);
    method public synchronized void setParams(org.apache.http.params.HttpParams);
    method public synchronized void setProxyAuthenticationHandler(org.apache.http.client.AuthenticationHandler);
    method public synchronized void setRedirectHandler(org.apache.http.client.RedirectHandler);
    method public synchronized void setReuseStrategy(org.apache.http.ConnectionReuseStrategy);
    method public synchronized void setRoutePlanner(org.apache.http.conn.routing.HttpRoutePlanner);
    method public synchronized void setTargetAuthenticationHandler(org.apache.http.client.AuthenticationHandler);
    method public synchronized void setUserTokenHandler(org.apache.http.client.UserTokenHandler);
  }

  public deprecated class BasicCookieStore implements org.apache.http.client.CookieStore {
    ctor public BasicCookieStore();
    method public synchronized void addCookie(org.apache.http.cookie.Cookie);
    method public synchronized void addCookies(org.apache.http.cookie.Cookie[]);
    method public synchronized void clear();
    method public synchronized boolean clearExpired(java.util.Date);
    method public synchronized java.util.List<org.apache.http.cookie.Cookie> getCookies();
  }

  public deprecated class BasicCredentialsProvider implements org.apache.http.client.CredentialsProvider {
    ctor public BasicCredentialsProvider();
    method public synchronized void clear();
    method public synchronized org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope);
    method public synchronized void setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.Credentials);
  }

  public deprecated class BasicResponseHandler implements org.apache.http.client.ResponseHandler {
    ctor public BasicResponseHandler();
    method public java.lang.String handleResponse(org.apache.http.HttpResponse) throws org.apache.http.client.HttpResponseException, java.io.IOException;
  }

  public deprecated class ClientParamsStack extends org.apache.http.params.AbstractHttpParams {
    ctor public ClientParamsStack(org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams);
    ctor public ClientParamsStack(org.apache.http.impl.client.ClientParamsStack);
    ctor public ClientParamsStack(org.apache.http.impl.client.ClientParamsStack, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams, org.apache.http.params.HttpParams);
    method public org.apache.http.params.HttpParams copy();
    method public final org.apache.http.params.HttpParams getApplicationParams();
    method public final org.apache.http.params.HttpParams getClientParams();
    method public final org.apache.http.params.HttpParams getOverrideParams();
    method public java.lang.Object getParameter(java.lang.String);
    method public final org.apache.http.params.HttpParams getRequestParams();
    method public boolean removeParameter(java.lang.String);
    method public org.apache.http.params.HttpParams setParameter(java.lang.String, java.lang.Object) throws java.lang.UnsupportedOperationException;
    field protected final org.apache.http.params.HttpParams applicationParams;
    field protected final org.apache.http.params.HttpParams clientParams;
    field protected final org.apache.http.params.HttpParams overrideParams;
    field protected final org.apache.http.params.HttpParams requestParams;
  }

  public deprecated class DefaultConnectionKeepAliveStrategy implements org.apache.http.conn.ConnectionKeepAliveStrategy {
    ctor public DefaultConnectionKeepAliveStrategy();
    method public long getKeepAliveDuration(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
  }

  public deprecated class DefaultHttpClient extends org.apache.http.impl.client.AbstractHttpClient {
    ctor public DefaultHttpClient(org.apache.http.conn.ClientConnectionManager, org.apache.http.params.HttpParams);
    ctor public DefaultHttpClient(org.apache.http.params.HttpParams);
    ctor public DefaultHttpClient();
    method protected org.apache.http.auth.AuthSchemeRegistry createAuthSchemeRegistry();
    method protected org.apache.http.conn.ClientConnectionManager createClientConnectionManager();
    method protected org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy();
    method protected org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy();
    method protected org.apache.http.cookie.CookieSpecRegistry createCookieSpecRegistry();
    method protected org.apache.http.client.CookieStore createCookieStore();
    method protected org.apache.http.client.CredentialsProvider createCredentialsProvider();
    method protected org.apache.http.protocol.HttpContext createHttpContext();
    method protected org.apache.http.params.HttpParams createHttpParams();
    method protected org.apache.http.protocol.BasicHttpProcessor createHttpProcessor();
    method protected org.apache.http.client.HttpRequestRetryHandler createHttpRequestRetryHandler();
    method protected org.apache.http.conn.routing.HttpRoutePlanner createHttpRoutePlanner();
    method protected org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler();
    method protected org.apache.http.client.RedirectHandler createRedirectHandler();
    method protected org.apache.http.protocol.HttpRequestExecutor createRequestExecutor();
    method protected org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler();
    method protected org.apache.http.client.UserTokenHandler createUserTokenHandler();
  }

  public deprecated class DefaultHttpRequestRetryHandler implements org.apache.http.client.HttpRequestRetryHandler {
    ctor public DefaultHttpRequestRetryHandler(int, boolean);
    ctor public DefaultHttpRequestRetryHandler();
    method public int getRetryCount();
    method public boolean isRequestSentRetryEnabled();
    method public boolean retryRequest(java.io.IOException, int, org.apache.http.protocol.HttpContext);
  }

  public deprecated class DefaultProxyAuthenticationHandler extends org.apache.http.impl.client.AbstractAuthenticationHandler {
    ctor public DefaultProxyAuthenticationHandler();
    method public java.util.Map<java.lang.String, org.apache.http.Header> getChallenges(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.auth.MalformedChallengeException;
    method public boolean isAuthenticationRequested(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
  }

  public deprecated class DefaultRedirectHandler implements org.apache.http.client.RedirectHandler {
    ctor public DefaultRedirectHandler();
    method public java.net.URI getLocationURI(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.ProtocolException;
    method public boolean isRedirectRequested(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
  }

  public deprecated class DefaultRequestDirector implements org.apache.http.client.RequestDirector {
    ctor public DefaultRequestDirector(org.apache.http.protocol.HttpRequestExecutor, org.apache.http.conn.ClientConnectionManager, org.apache.http.ConnectionReuseStrategy, org.apache.http.conn.ConnectionKeepAliveStrategy, org.apache.http.conn.routing.HttpRoutePlanner, org.apache.http.protocol.HttpProcessor, org.apache.http.client.HttpRequestRetryHandler, org.apache.http.client.RedirectHandler, org.apache.http.client.AuthenticationHandler, org.apache.http.client.AuthenticationHandler, org.apache.http.client.UserTokenHandler, org.apache.http.params.HttpParams);
    method protected org.apache.http.HttpRequest createConnectRequest(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext);
    method protected boolean createTunnelToProxy(org.apache.http.conn.routing.HttpRoute, int, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method protected boolean createTunnelToTarget(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method protected org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException;
    method protected void establishRoute(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method public org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method protected org.apache.http.impl.client.RoutedRequest handleResponse(org.apache.http.impl.client.RoutedRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method protected void releaseConnection();
    method protected void rewriteRequestURI(org.apache.http.impl.client.RequestWrapper, org.apache.http.conn.routing.HttpRoute) throws org.apache.http.ProtocolException;
    field protected final org.apache.http.conn.ClientConnectionManager connManager;
    field protected final org.apache.http.protocol.HttpProcessor httpProcessor;
    field protected final org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy;
    field protected org.apache.http.conn.ManagedClientConnection managedConn;
    field protected final org.apache.http.params.HttpParams params;
    field protected final org.apache.http.client.RedirectHandler redirectHandler;
    field protected final org.apache.http.protocol.HttpRequestExecutor requestExec;
    field protected final org.apache.http.client.HttpRequestRetryHandler retryHandler;
    field protected final org.apache.http.ConnectionReuseStrategy reuseStrategy;
    field protected final org.apache.http.conn.routing.HttpRoutePlanner routePlanner;
  }

  public deprecated class DefaultTargetAuthenticationHandler extends org.apache.http.impl.client.AbstractAuthenticationHandler {
    ctor public DefaultTargetAuthenticationHandler();
    method public java.util.Map<java.lang.String, org.apache.http.Header> getChallenges(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.auth.MalformedChallengeException;
    method public boolean isAuthenticationRequested(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext);
  }

  public deprecated class DefaultUserTokenHandler implements org.apache.http.client.UserTokenHandler {
    ctor public DefaultUserTokenHandler();
    method public java.lang.Object getUserToken(org.apache.http.protocol.HttpContext);
  }

  public deprecated class EntityEnclosingRequestWrapper extends org.apache.http.impl.client.RequestWrapper implements org.apache.http.HttpEntityEnclosingRequest {
    ctor public EntityEnclosingRequestWrapper(org.apache.http.HttpEntityEnclosingRequest) throws org.apache.http.ProtocolException;
    method public boolean expectContinue();
    method public org.apache.http.HttpEntity getEntity();
    method public void setEntity(org.apache.http.HttpEntity);
  }

  public deprecated class RedirectLocations {
    ctor public RedirectLocations();
    method public void add(java.net.URI);
    method public boolean contains(java.net.URI);
    method public boolean remove(java.net.URI);
  }

  public deprecated class RequestWrapper extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.client.methods.HttpUriRequest {
    ctor public RequestWrapper(org.apache.http.HttpRequest) throws org.apache.http.ProtocolException;
    method public void abort() throws java.lang.UnsupportedOperationException;
    method public int getExecCount();
    method public java.lang.String getMethod();
    method public org.apache.http.HttpRequest getOriginal();
    method public org.apache.http.ProtocolVersion getProtocolVersion();
    method public org.apache.http.RequestLine getRequestLine();
    method public java.net.URI getURI();
    method public void incrementExecCount();
    method public boolean isAborted();
    method public boolean isRepeatable();
    method public void resetHeaders();
    method public void setMethod(java.lang.String);
    method public void setProtocolVersion(org.apache.http.ProtocolVersion);
    method public void setURI(java.net.URI);
  }

  public deprecated class RoutedRequest {
    ctor public RoutedRequest(org.apache.http.impl.client.RequestWrapper, org.apache.http.conn.routing.HttpRoute);
    method public final org.apache.http.impl.client.RequestWrapper getRequest();
    method public final org.apache.http.conn.routing.HttpRoute getRoute();
    field protected final org.apache.http.impl.client.RequestWrapper request;
    field protected final org.apache.http.conn.routing.HttpRoute route;
  }

  public deprecated class TunnelRefusedException extends org.apache.http.HttpException {
    ctor public TunnelRefusedException(java.lang.String, org.apache.http.HttpResponse);
    method public org.apache.http.HttpResponse getResponse();
  }

}

package org.apache.http.impl.conn {

  public abstract deprecated class AbstractClientConnAdapter implements org.apache.http.conn.ManagedClientConnection {
    ctor protected AbstractClientConnAdapter(org.apache.http.conn.ClientConnectionManager, org.apache.http.conn.OperatedClientConnection);
    method public void abortConnection();
    method protected final void assertNotAborted() throws java.io.InterruptedIOException;
    method protected final void assertValid(org.apache.http.conn.OperatedClientConnection);
    method protected void detach();
    method public void flush() throws java.io.IOException;
    method public java.net.InetAddress getLocalAddress();
    method public int getLocalPort();
    method protected org.apache.http.conn.ClientConnectionManager getManager();
    method public org.apache.http.HttpConnectionMetrics getMetrics();
    method public java.net.InetAddress getRemoteAddress();
    method public int getRemotePort();
    method public javax.net.ssl.SSLSession getSSLSession();
    method public int getSocketTimeout();
    method protected org.apache.http.conn.OperatedClientConnection getWrappedConnection();
    method public boolean isMarkedReusable();
    method public boolean isOpen();
    method public boolean isResponseAvailable(int) throws java.io.IOException;
    method public boolean isSecure();
    method public boolean isStale();
    method public void markReusable();
    method public void receiveResponseEntity(org.apache.http.HttpResponse) throws org.apache.http.HttpException, java.io.IOException;
    method public org.apache.http.HttpResponse receiveResponseHeader() throws org.apache.http.HttpException, java.io.IOException;
    method public void releaseConnection();
    method public void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) throws org.apache.http.HttpException, java.io.IOException;
    method public void sendRequestHeader(org.apache.http.HttpRequest) throws org.apache.http.HttpException, java.io.IOException;
    method public void setIdleDuration(long, java.util.concurrent.TimeUnit);
    method public void setSocketTimeout(int);
    method public void unmarkReusable();
  }

  public abstract deprecated class AbstractPoolEntry {
    ctor protected AbstractPoolEntry(org.apache.http.conn.ClientConnectionOperator, org.apache.http.conn.routing.HttpRoute);
    method public java.lang.Object getState();
    method public void layerProtocol(org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public void open(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public void setState(java.lang.Object);
    method protected void shutdownEntry();
    method public void tunnelProxy(org.apache.http.HttpHost, boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public void tunnelTarget(boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
    field protected final org.apache.http.conn.ClientConnectionOperator connOperator;
    field protected final org.apache.http.conn.OperatedClientConnection connection;
    field protected volatile org.apache.http.conn.routing.HttpRoute route;
    field protected volatile java.lang.Object state;
    field protected volatile org.apache.http.conn.routing.RouteTracker tracker;
  }

  public abstract deprecated class AbstractPooledConnAdapter extends org.apache.http.impl.conn.AbstractClientConnAdapter {
    ctor protected AbstractPooledConnAdapter(org.apache.http.conn.ClientConnectionManager, org.apache.http.impl.conn.AbstractPoolEntry);
    method protected final void assertAttached();
    method public void close() throws java.io.IOException;
    method public org.apache.http.conn.routing.HttpRoute getRoute();
    method public java.lang.Object getState();
    method public void layerProtocol(org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public void open(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public void setState(java.lang.Object);
    method public void shutdown() throws java.io.IOException;
    method public void tunnelProxy(org.apache.http.HttpHost, boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public void tunnelTarget(boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
    field protected volatile org.apache.http.impl.conn.AbstractPoolEntry poolEntry;
  }

  public deprecated class DefaultClientConnection extends org.apache.http.impl.SocketHttpClientConnection implements org.apache.http.conn.OperatedClientConnection {
    ctor public DefaultClientConnection();
    method public final java.net.Socket getSocket();
    method public final org.apache.http.HttpHost getTargetHost();
    method public final boolean isSecure();
    method public void openCompleted(boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public void opening(java.net.Socket, org.apache.http.HttpHost) throws java.io.IOException;
    method public void update(java.net.Socket, org.apache.http.HttpHost, boolean, org.apache.http.params.HttpParams) throws java.io.IOException;
  }

  public deprecated class DefaultClientConnectionOperator implements org.apache.http.conn.ClientConnectionOperator {
    ctor public DefaultClientConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry);
    method public org.apache.http.conn.OperatedClientConnection createConnection();
    method public void openConnection(org.apache.http.conn.OperatedClientConnection, org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    method protected void prepareSocket(java.net.Socket, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public void updateSecureConnection(org.apache.http.conn.OperatedClientConnection, org.apache.http.HttpHost, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException;
    field protected org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;
  }

  public deprecated class DefaultHttpRoutePlanner implements org.apache.http.conn.routing.HttpRoutePlanner {
    ctor public DefaultHttpRoutePlanner(org.apache.http.conn.scheme.SchemeRegistry);
    method public org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException;
    field protected org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;
  }

  public deprecated class DefaultResponseParser extends org.apache.http.impl.io.AbstractMessageParser {
    ctor public DefaultResponseParser(org.apache.http.io.SessionInputBuffer, org.apache.http.message.LineParser, org.apache.http.HttpResponseFactory, org.apache.http.params.HttpParams);
    method protected org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) throws org.apache.http.HttpException, java.io.IOException;
  }

  public deprecated class IdleConnectionHandler {
    ctor public IdleConnectionHandler();
    method public void add(org.apache.http.HttpConnection, long, java.util.concurrent.TimeUnit);
    method public void closeExpiredConnections();
    method public void closeIdleConnections(long);
    method public boolean remove(org.apache.http.HttpConnection);
    method public void removeAll();
  }

  public deprecated class LoggingSessionInputBuffer implements org.apache.http.io.SessionInputBuffer {
    ctor public LoggingSessionInputBuffer(org.apache.http.io.SessionInputBuffer, org.apache.http.impl.conn.Wire);
    method public org.apache.http.io.HttpTransportMetrics getMetrics();
    method public boolean isDataAvailable(int) throws java.io.IOException;
    method public int read(byte[], int, int) throws java.io.IOException;
    method public int read() throws java.io.IOException;
    method public int read(byte[]) throws java.io.IOException;
    method public java.lang.String readLine() throws java.io.IOException;
    method public int readLine(org.apache.http.util.CharArrayBuffer) throws java.io.IOException;
  }

  public deprecated class LoggingSessionOutputBuffer implements org.apache.http.io.SessionOutputBuffer {
    ctor public LoggingSessionOutputBuffer(org.apache.http.io.SessionOutputBuffer, org.apache.http.impl.conn.Wire);
    method public void flush() throws java.io.IOException;
    method public org.apache.http.io.HttpTransportMetrics getMetrics();
    method public void write(byte[], int, int) throws java.io.IOException;
    method public void write(int) throws java.io.IOException;
    method public void write(byte[]) throws java.io.IOException;
    method public void writeLine(org.apache.http.util.CharArrayBuffer) throws java.io.IOException;
    method public void writeLine(java.lang.String) throws java.io.IOException;
  }

  public deprecated class ProxySelectorRoutePlanner implements org.apache.http.conn.routing.HttpRoutePlanner {
    ctor public ProxySelectorRoutePlanner(org.apache.http.conn.scheme.SchemeRegistry, java.net.ProxySelector);
    method protected java.net.Proxy chooseProxy(java.util.List<java.net.Proxy>, org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext);
    method protected org.apache.http.HttpHost determineProxy(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException;
    method public org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException;
    method protected java.lang.String getHost(java.net.InetSocketAddress);
    method public java.net.ProxySelector getProxySelector();
    method public void setProxySelector(java.net.ProxySelector);
    field protected java.net.ProxySelector proxySelector;
    field protected org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;
  }

  public deprecated class SingleClientConnManager implements org.apache.http.conn.ClientConnectionManager {
    ctor public SingleClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry);
    method protected final void assertStillUp() throws java.lang.IllegalStateException;
    method public void closeExpiredConnections();
    method public void closeIdleConnections(long, java.util.concurrent.TimeUnit);
    method protected org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry);
    method public org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute, java.lang.Object);
    method public org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry();
    method public void releaseConnection(org.apache.http.conn.ManagedClientConnection, long, java.util.concurrent.TimeUnit);
    method public final org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute, java.lang.Object);
    method protected void revokeConnection();
    method public void shutdown();
    field public static final java.lang.String MISUSE_MESSAGE = "Invalid use of SingleClientConnManager: connection still allocated.\nMake sure to release the connection before allocating another one.";
    field protected boolean alwaysShutDown;
    field protected org.apache.http.conn.ClientConnectionOperator connOperator;
    field protected long connectionExpiresTime;
    field protected volatile boolean isShutDown;
    field protected long lastReleaseTime;
    field protected org.apache.http.impl.conn.SingleClientConnManager.ConnAdapter managedConn;
    field protected org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;
    field protected org.apache.http.impl.conn.SingleClientConnManager.PoolEntry uniquePoolEntry;
  }

  protected class SingleClientConnManager.ConnAdapter extends org.apache.http.impl.conn.AbstractPooledConnAdapter {
    ctor protected SingleClientConnManager.ConnAdapter(org.apache.http.impl.conn.SingleClientConnManager.PoolEntry, org.apache.http.conn.routing.HttpRoute);
  }

  protected class SingleClientConnManager.PoolEntry extends org.apache.http.impl.conn.AbstractPoolEntry {
    ctor protected SingleClientConnManager.PoolEntry();
    method protected void close() throws java.io.IOException;
    method protected void shutdown() throws java.io.IOException;
  }

  public deprecated class Wire {
    ctor public Wire(org.apache.commons.logging.Log);
    method public boolean enabled();
    method public void input(java.io.InputStream) throws java.io.IOException;
    method public void input(byte[], int, int) throws java.io.IOException;
    method public void input(byte[]) throws java.io.IOException;
    method public void input(int) throws java.io.IOException;
    method public void input(java.lang.String) throws java.io.IOException;
    method public void output(java.io.InputStream) throws java.io.IOException;
    method public void output(byte[], int, int) throws java.io.IOException;
    method public void output(byte[]) throws java.io.IOException;
    method public void output(int) throws java.io.IOException;
    method public void output(java.lang.String) throws java.io.IOException;
  }

}

package org.apache.http.impl.conn.tsccm {

  public abstract deprecated class AbstractConnPool implements org.apache.http.impl.conn.tsccm.RefQueueHandler {
    ctor protected AbstractConnPool();
    method protected void closeConnection(org.apache.http.conn.OperatedClientConnection);
    method public void closeExpiredConnections();
    method public void closeIdleConnections(long, java.util.concurrent.TimeUnit);
    method public abstract void deleteClosedConnections();
    method public void enableConnectionGC() throws java.lang.IllegalStateException;
    method public abstract void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry, boolean, long, java.util.concurrent.TimeUnit);
    method public final org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntry(org.apache.http.conn.routing.HttpRoute, java.lang.Object, long, java.util.concurrent.TimeUnit) throws org.apache.http.conn.ConnectionPoolTimeoutException, java.lang.InterruptedException;
    method protected abstract void handleLostEntry(org.apache.http.conn.routing.HttpRoute);
    method public void handleReference(java.lang.ref.Reference);
    method public abstract org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute, java.lang.Object);
    method public void shutdown();
    field protected org.apache.http.impl.conn.IdleConnectionHandler idleConnHandler;
    field protected volatile boolean isShutDown;
    field protected java.util.Set<org.apache.http.impl.conn.tsccm.BasicPoolEntryRef> issuedConnections;
    field protected int numConnections;
    field protected final java.util.concurrent.locks.Lock poolLock;
    field protected java.lang.ref.ReferenceQueue<java.lang.Object> refQueue;
  }

  public deprecated class BasicPoolEntry extends org.apache.http.impl.conn.AbstractPoolEntry {
    ctor public BasicPoolEntry(org.apache.http.conn.ClientConnectionOperator, org.apache.http.conn.routing.HttpRoute, java.lang.ref.ReferenceQueue<java.lang.Object>);
    method protected final org.apache.http.conn.OperatedClientConnection getConnection();
    method protected final org.apache.http.conn.routing.HttpRoute getPlannedRoute();
    method protected final org.apache.http.impl.conn.tsccm.BasicPoolEntryRef getWeakRef();
  }

  public deprecated class BasicPoolEntryRef extends java.lang.ref.WeakReference {
    ctor public BasicPoolEntryRef(org.apache.http.impl.conn.tsccm.BasicPoolEntry, java.lang.ref.ReferenceQueue<java.lang.Object>);
    method public final org.apache.http.conn.routing.HttpRoute getRoute();
  }

  public deprecated class BasicPooledConnAdapter extends org.apache.http.impl.conn.AbstractPooledConnAdapter {
    ctor protected BasicPooledConnAdapter(org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager, org.apache.http.impl.conn.AbstractPoolEntry);
    method protected org.apache.http.impl.conn.AbstractPoolEntry getPoolEntry();
  }

  public deprecated class ConnPoolByRoute extends org.apache.http.impl.conn.tsccm.AbstractConnPool {
    ctor public ConnPoolByRoute(org.apache.http.conn.ClientConnectionOperator, org.apache.http.params.HttpParams);
    method protected org.apache.http.impl.conn.tsccm.BasicPoolEntry createEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool, org.apache.http.conn.ClientConnectionOperator);
    method protected java.util.Queue<org.apache.http.impl.conn.tsccm.BasicPoolEntry> createFreeConnQueue();
    method protected java.util.Map<org.apache.http.conn.routing.HttpRoute, org.apache.http.impl.conn.tsccm.RouteSpecificPool> createRouteToPoolMap();
    method protected java.util.Queue<org.apache.http.impl.conn.tsccm.WaitingThread> createWaitingThreadQueue();
    method public void deleteClosedConnections();
    method protected void deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry);
    method protected void deleteLeastUsedEntry();
    method public void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry, boolean, long, java.util.concurrent.TimeUnit);
    method public int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute);
    method protected org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntryBlocking(org.apache.http.conn.routing.HttpRoute, java.lang.Object, long, java.util.concurrent.TimeUnit, org.apache.http.impl.conn.tsccm.WaitingThreadAborter) throws org.apache.http.conn.ConnectionPoolTimeoutException, java.lang.InterruptedException;
    method protected org.apache.http.impl.conn.tsccm.BasicPoolEntry getFreeEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool, java.lang.Object);
    method protected org.apache.http.impl.conn.tsccm.RouteSpecificPool getRoutePool(org.apache.http.conn.routing.HttpRoute, boolean);
    method protected void handleLostEntry(org.apache.http.conn.routing.HttpRoute);
    method protected org.apache.http.impl.conn.tsccm.RouteSpecificPool newRouteSpecificPool(org.apache.http.conn.routing.HttpRoute);
    method protected org.apache.http.impl.conn.tsccm.WaitingThread newWaitingThread(java.util.concurrent.locks.Condition, org.apache.http.impl.conn.tsccm.RouteSpecificPool);
    method protected void notifyWaitingThread(org.apache.http.impl.conn.tsccm.RouteSpecificPool);
    method public org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute, java.lang.Object);
    field protected java.util.Queue<org.apache.http.impl.conn.tsccm.BasicPoolEntry> freeConnections;
    field protected final int maxTotalConnections;
    field protected final org.apache.http.conn.ClientConnectionOperator operator;
    field protected final java.util.Map<org.apache.http.conn.routing.HttpRoute, org.apache.http.impl.conn.tsccm.RouteSpecificPool> routeToPool;
    field protected java.util.Queue<org.apache.http.impl.conn.tsccm.WaitingThread> waitingThreads;
  }

  public abstract deprecated interface PoolEntryRequest {
    method public abstract void abortRequest();
    method public abstract org.apache.http.impl.conn.tsccm.BasicPoolEntry getPoolEntry(long, java.util.concurrent.TimeUnit) throws org.apache.http.conn.ConnectionPoolTimeoutException, java.lang.InterruptedException;
  }

  public abstract deprecated interface RefQueueHandler {
    method public abstract void handleReference(java.lang.ref.Reference<?>);
  }

  public deprecated class RefQueueWorker implements java.lang.Runnable {
    ctor public RefQueueWorker(java.lang.ref.ReferenceQueue<?>, org.apache.http.impl.conn.tsccm.RefQueueHandler);
    method public void run();
    method public void shutdown();
    field protected final org.apache.http.impl.conn.tsccm.RefQueueHandler refHandler;
    field protected final java.lang.ref.ReferenceQueue<?> refQueue;
    field protected volatile java.lang.Thread workerThread;
  }

  public deprecated class RouteSpecificPool {
    ctor public RouteSpecificPool(org.apache.http.conn.routing.HttpRoute, int);
    method public org.apache.http.impl.conn.tsccm.BasicPoolEntry allocEntry(java.lang.Object);
    method public void createdEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry);
    method public boolean deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry);
    method public void dropEntry();
    method public void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry);
    method public int getCapacity();
    method public final int getEntryCount();
    method public final int getMaxEntries();
    method public final org.apache.http.conn.routing.HttpRoute getRoute();
    method public boolean hasThread();
    method public boolean isUnused();
    method public org.apache.http.impl.conn.tsccm.WaitingThread nextThread();
    method public void queueThread(org.apache.http.impl.conn.tsccm.WaitingThread);
    method public void removeThread(org.apache.http.impl.conn.tsccm.WaitingThread);
    field protected final java.util.LinkedList<org.apache.http.impl.conn.tsccm.BasicPoolEntry> freeEntries;
    field protected final int maxEntries;
    field protected int numEntries;
    field protected final org.apache.http.conn.routing.HttpRoute route;
    field protected final java.util.Queue<org.apache.http.impl.conn.tsccm.WaitingThread> waitingThreads;
  }

  public deprecated class ThreadSafeClientConnManager implements org.apache.http.conn.ClientConnectionManager {
    ctor public ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry);
    method public void closeExpiredConnections();
    method public void closeIdleConnections(long, java.util.concurrent.TimeUnit);
    method protected org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry);
    method protected org.apache.http.impl.conn.tsccm.AbstractConnPool createConnectionPool(org.apache.http.params.HttpParams);
    method public int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute);
    method public int getConnectionsInPool();
    method public org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry();
    method public void releaseConnection(org.apache.http.conn.ManagedClientConnection, long, java.util.concurrent.TimeUnit);
    method public org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute, java.lang.Object);
    method public void shutdown();
    field protected org.apache.http.conn.ClientConnectionOperator connOperator;
    field protected final org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool;
    field protected org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;
  }

  public deprecated class WaitingThread {
    ctor public WaitingThread(java.util.concurrent.locks.Condition, org.apache.http.impl.conn.tsccm.RouteSpecificPool);
    method public boolean await(java.util.Date) throws java.lang.InterruptedException;
    method public final java.util.concurrent.locks.Condition getCondition();
    method public final org.apache.http.impl.conn.tsccm.RouteSpecificPool getPool();
    method public final java.lang.Thread getThread();
    method public void interrupt();
    method public void wakeup();
  }

  public deprecated class WaitingThreadAborter {
    ctor public WaitingThreadAborter();
    method public void abort();
    method public void setWaitingThread(org.apache.http.impl.conn.tsccm.WaitingThread);
  }

}

package org.apache.http.impl.cookie {

  public abstract deprecated class AbstractCookieAttributeHandler implements org.apache.http.cookie.CookieAttributeHandler {
    ctor public AbstractCookieAttributeHandler();
    method public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  public abstract deprecated class AbstractCookieSpec implements org.apache.http.cookie.CookieSpec {
    ctor public AbstractCookieSpec();
    method protected org.apache.http.cookie.CookieAttributeHandler findAttribHandler(java.lang.String);
    method protected org.apache.http.cookie.CookieAttributeHandler getAttribHandler(java.lang.String);
    method protected java.util.Collection<org.apache.http.cookie.CookieAttributeHandler> getAttribHandlers();
    method public void registerAttribHandler(java.lang.String, org.apache.http.cookie.CookieAttributeHandler);
  }

  public deprecated class BasicClientCookie implements org.apache.http.cookie.ClientCookie java.lang.Cloneable org.apache.http.cookie.SetCookie {
    ctor public BasicClientCookie(java.lang.String, java.lang.String);
    method public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    method public boolean containsAttribute(java.lang.String);
    method public java.lang.String getAttribute(java.lang.String);
    method public java.lang.String getComment();
    method public java.lang.String getCommentURL();
    method public java.lang.String getDomain();
    method public java.util.Date getExpiryDate();
    method public java.lang.String getName();
    method public java.lang.String getPath();
    method public int[] getPorts();
    method public java.lang.String getValue();
    method public int getVersion();
    method public boolean isExpired(java.util.Date);
    method public boolean isPersistent();
    method public boolean isSecure();
    method public void setAttribute(java.lang.String, java.lang.String);
    method public void setComment(java.lang.String);
    method public void setDomain(java.lang.String);
    method public void setExpiryDate(java.util.Date);
    method public void setPath(java.lang.String);
    method public void setSecure(boolean);
    method public void setValue(java.lang.String);
    method public void setVersion(int);
  }

  public deprecated class BasicClientCookie2 extends org.apache.http.impl.cookie.BasicClientCookie implements org.apache.http.cookie.SetCookie2 {
    ctor public BasicClientCookie2(java.lang.String, java.lang.String);
    method public void setCommentURL(java.lang.String);
    method public void setDiscard(boolean);
    method public void setPorts(int[]);
  }

  public deprecated class BasicCommentHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
    ctor public BasicCommentHandler();
    method public void parse(org.apache.http.cookie.SetCookie, java.lang.String) throws org.apache.http.cookie.MalformedCookieException;
  }

  public deprecated class BasicDomainHandler implements org.apache.http.cookie.CookieAttributeHandler {
    ctor public BasicDomainHandler();
    method public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method public void parse(org.apache.http.cookie.SetCookie, java.lang.String) throws org.apache.http.cookie.MalformedCookieException;
    method public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  public deprecated class BasicExpiresHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
    ctor public BasicExpiresHandler(java.lang.String[]);
    method public void parse(org.apache.http.cookie.SetCookie, java.lang.String) throws org.apache.http.cookie.MalformedCookieException;
  }

  public deprecated class BasicMaxAgeHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
    ctor public BasicMaxAgeHandler();
    method public void parse(org.apache.http.cookie.SetCookie, java.lang.String) throws org.apache.http.cookie.MalformedCookieException;
  }

  public deprecated class BasicPathHandler implements org.apache.http.cookie.CookieAttributeHandler {
    ctor public BasicPathHandler();
    method public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method public void parse(org.apache.http.cookie.SetCookie, java.lang.String) throws org.apache.http.cookie.MalformedCookieException;
    method public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  public deprecated class BasicSecureHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
    ctor public BasicSecureHandler();
    method public void parse(org.apache.http.cookie.SetCookie, java.lang.String) throws org.apache.http.cookie.MalformedCookieException;
  }

  public deprecated class BestMatchSpec implements org.apache.http.cookie.CookieSpec {
    ctor public BestMatchSpec(java.lang.String[], boolean);
    ctor public BestMatchSpec();
    method public java.util.List<org.apache.http.Header> formatCookies(java.util.List<org.apache.http.cookie.Cookie>);
    method public int getVersion();
    method public org.apache.http.Header getVersionHeader();
    method public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method public java.util.List<org.apache.http.cookie.Cookie> parse(org.apache.http.Header, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
    method public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  public deprecated class BestMatchSpecFactory implements org.apache.http.cookie.CookieSpecFactory {
    ctor public BestMatchSpecFactory();
    method public org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams);
  }

  public deprecated class BrowserCompatSpec extends org.apache.http.impl.cookie.CookieSpecBase {
    ctor public BrowserCompatSpec(java.lang.String[]);
    ctor public BrowserCompatSpec();
    method public java.util.List<org.apache.http.Header> formatCookies(java.util.List<org.apache.http.cookie.Cookie>);
    method public int getVersion();
    method public org.apache.http.Header getVersionHeader();
    method public java.util.List<org.apache.http.cookie.Cookie> parse(org.apache.http.Header, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
    field protected static final java.lang.String[] DATE_PATTERNS;
  }

  public deprecated class BrowserCompatSpecFactory implements org.apache.http.cookie.CookieSpecFactory {
    ctor public BrowserCompatSpecFactory();
    method public org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams);
  }

  public abstract deprecated class CookieSpecBase extends org.apache.http.impl.cookie.AbstractCookieSpec {
    ctor public CookieSpecBase();
    method protected static java.lang.String getDefaultDomain(org.apache.http.cookie.CookieOrigin);
    method protected static java.lang.String getDefaultPath(org.apache.http.cookie.CookieOrigin);
    method public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method protected java.util.List<org.apache.http.cookie.Cookie> parse(org.apache.http.HeaderElement[], org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
    method public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  public deprecated class DateParseException extends java.lang.Exception {
    ctor public DateParseException();
    ctor public DateParseException(java.lang.String);
  }

  public final deprecated class DateUtils {
    method public static java.lang.String formatDate(java.util.Date);
    method public static java.lang.String formatDate(java.util.Date, java.lang.String);
    method public static java.util.Date parseDate(java.lang.String) throws org.apache.http.impl.cookie.DateParseException;
    method public static java.util.Date parseDate(java.lang.String, java.lang.String[]) throws org.apache.http.impl.cookie.DateParseException;
    method public static java.util.Date parseDate(java.lang.String, java.lang.String[], java.util.Date) throws org.apache.http.impl.cookie.DateParseException;
    field public static final java.util.TimeZone GMT;
    field public static final java.lang.String PATTERN_ASCTIME = "EEE MMM d HH:mm:ss yyyy";
    field public static final java.lang.String PATTERN_RFC1036 = "EEEE, dd-MMM-yy HH:mm:ss zzz";
    field public static final java.lang.String PATTERN_RFC1123 = "EEE, dd MMM yyyy HH:mm:ss zzz";
  }

  public deprecated class NetscapeDomainHandler extends org.apache.http.impl.cookie.BasicDomainHandler {
    ctor public NetscapeDomainHandler();
  }

  public deprecated class NetscapeDraftHeaderParser {
    ctor public NetscapeDraftHeaderParser();
    method public org.apache.http.HeaderElement parseHeader(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
    field public static final org.apache.http.impl.cookie.NetscapeDraftHeaderParser DEFAULT;
  }

  public deprecated class NetscapeDraftSpec extends org.apache.http.impl.cookie.CookieSpecBase {
    ctor public NetscapeDraftSpec(java.lang.String[]);
    ctor public NetscapeDraftSpec();
    method public java.util.List<org.apache.http.Header> formatCookies(java.util.List<org.apache.http.cookie.Cookie>);
    method public int getVersion();
    method public org.apache.http.Header getVersionHeader();
    method public java.util.List<org.apache.http.cookie.Cookie> parse(org.apache.http.Header, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
    field protected static final java.lang.String EXPIRES_PATTERN = "EEE, dd-MMM-yyyy HH:mm:ss z";
  }

  public deprecated class NetscapeDraftSpecFactory implements org.apache.http.cookie.CookieSpecFactory {
    ctor public NetscapeDraftSpecFactory();
    method public org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams);
  }

  public deprecated class RFC2109DomainHandler implements org.apache.http.cookie.CookieAttributeHandler {
    ctor public RFC2109DomainHandler();
    method public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method public void parse(org.apache.http.cookie.SetCookie, java.lang.String) throws org.apache.http.cookie.MalformedCookieException;
    method public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  public deprecated class RFC2109Spec extends org.apache.http.impl.cookie.CookieSpecBase {
    ctor public RFC2109Spec(java.lang.String[], boolean);
    ctor public RFC2109Spec();
    method protected void formatCookieAsVer(org.apache.http.util.CharArrayBuffer, org.apache.http.cookie.Cookie, int);
    method public java.util.List<org.apache.http.Header> formatCookies(java.util.List<org.apache.http.cookie.Cookie>);
    method protected void formatParamAsVer(org.apache.http.util.CharArrayBuffer, java.lang.String, java.lang.String, int);
    method public int getVersion();
    method public org.apache.http.Header getVersionHeader();
    method public java.util.List<org.apache.http.cookie.Cookie> parse(org.apache.http.Header, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  public deprecated class RFC2109SpecFactory implements org.apache.http.cookie.CookieSpecFactory {
    ctor public RFC2109SpecFactory();
    method public org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams);
  }

  public deprecated class RFC2109VersionHandler extends org.apache.http.impl.cookie.AbstractCookieAttributeHandler {
    ctor public RFC2109VersionHandler();
    method public void parse(org.apache.http.cookie.SetCookie, java.lang.String) throws org.apache.http.cookie.MalformedCookieException;
  }

  public deprecated class RFC2965CommentUrlAttributeHandler implements org.apache.http.cookie.CookieAttributeHandler {
    ctor public RFC2965CommentUrlAttributeHandler();
    method public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method public void parse(org.apache.http.cookie.SetCookie, java.lang.String) throws org.apache.http.cookie.MalformedCookieException;
    method public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  public deprecated class RFC2965DiscardAttributeHandler implements org.apache.http.cookie.CookieAttributeHandler {
    ctor public RFC2965DiscardAttributeHandler();
    method public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method public void parse(org.apache.http.cookie.SetCookie, java.lang.String) throws org.apache.http.cookie.MalformedCookieException;
    method public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  public deprecated class RFC2965DomainAttributeHandler implements org.apache.http.cookie.CookieAttributeHandler {
    ctor public RFC2965DomainAttributeHandler();
    method public boolean domainMatch(java.lang.String, java.lang.String);
    method public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method public void parse(org.apache.http.cookie.SetCookie, java.lang.String) throws org.apache.http.cookie.MalformedCookieException;
    method public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  public deprecated class RFC2965PortAttributeHandler implements org.apache.http.cookie.CookieAttributeHandler {
    ctor public RFC2965PortAttributeHandler();
    method public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method public void parse(org.apache.http.cookie.SetCookie, java.lang.String) throws org.apache.http.cookie.MalformedCookieException;
    method public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

  public deprecated class RFC2965Spec extends org.apache.http.impl.cookie.RFC2109Spec {
    ctor public RFC2965Spec();
    ctor public RFC2965Spec(java.lang.String[], boolean);
  }

  public deprecated class RFC2965SpecFactory implements org.apache.http.cookie.CookieSpecFactory {
    ctor public RFC2965SpecFactory();
    method public org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams);
  }

  public deprecated class RFC2965VersionAttributeHandler implements org.apache.http.cookie.CookieAttributeHandler {
    ctor public RFC2965VersionAttributeHandler();
    method public boolean match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin);
    method public void parse(org.apache.http.cookie.SetCookie, java.lang.String) throws org.apache.http.cookie.MalformedCookieException;
    method public void validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin) throws org.apache.http.cookie.MalformedCookieException;
  }

}

package org.apache.http.impl.entity {

  public deprecated class EntityDeserializer {
    ctor public EntityDeserializer(org.apache.http.entity.ContentLengthStrategy);
    method public org.apache.http.HttpEntity deserialize(org.apache.http.io.SessionInputBuffer, org.apache.http.HttpMessage) throws org.apache.http.HttpException, java.io.IOException;
    method protected org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer, org.apache.http.HttpMessage) throws org.apache.http.HttpException, java.io.IOException;
  }

  public deprecated class EntitySerializer {
    ctor public EntitySerializer(org.apache.http.entity.ContentLengthStrategy);
    method protected java.io.OutputStream doSerialize(org.apache.http.io.SessionOutputBuffer, org.apache.http.HttpMessage) throws org.apache.http.HttpException, java.io.IOException;
    method public void serialize(org.apache.http.io.SessionOutputBuffer, org.apache.http.HttpMessage, org.apache.http.HttpEntity) throws org.apache.http.HttpException, java.io.IOException;
  }

  public deprecated class LaxContentLengthStrategy implements org.apache.http.entity.ContentLengthStrategy {
    ctor public LaxContentLengthStrategy();
    method public long determineLength(org.apache.http.HttpMessage) throws org.apache.http.HttpException;
  }

  public deprecated class StrictContentLengthStrategy implements org.apache.http.entity.ContentLengthStrategy {
    ctor public StrictContentLengthStrategy();
    method public long determineLength(org.apache.http.HttpMessage) throws org.apache.http.HttpException;
  }

}

package org.apache.http.impl.io {

  public abstract deprecated class AbstractMessageParser implements org.apache.http.io.HttpMessageParser {
    ctor public AbstractMessageParser(org.apache.http.io.SessionInputBuffer, org.apache.http.message.LineParser, org.apache.http.params.HttpParams);
    method public org.apache.http.HttpMessage parse() throws org.apache.http.HttpException, java.io.IOException;
    method protected abstract org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) throws org.apache.http.HttpException, java.io.IOException, org.apache.http.ParseException;
    method public static org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer, int, int, org.apache.http.message.LineParser) throws org.apache.http.HttpException, java.io.IOException;
    field protected final org.apache.http.message.LineParser lineParser;
  }

  public abstract deprecated class AbstractMessageWriter implements org.apache.http.io.HttpMessageWriter {
    ctor public AbstractMessageWriter(org.apache.http.io.SessionOutputBuffer, org.apache.http.message.LineFormatter, org.apache.http.params.HttpParams);
    method public void write(org.apache.http.HttpMessage) throws org.apache.http.HttpException, java.io.IOException;
    method protected abstract void writeHeadLine(org.apache.http.HttpMessage) throws java.io.IOException;
    field protected final org.apache.http.util.CharArrayBuffer lineBuf;
    field protected final org.apache.http.message.LineFormatter lineFormatter;
    field protected final org.apache.http.io.SessionOutputBuffer sessionBuffer;
  }

  public abstract deprecated class AbstractSessionInputBuffer implements org.apache.http.io.SessionInputBuffer {
    ctor public AbstractSessionInputBuffer();
    method protected int fillBuffer() throws java.io.IOException;
    method public org.apache.http.io.HttpTransportMetrics getMetrics();
    method protected boolean hasBufferedData();
    method protected void init(java.io.InputStream, int, org.apache.http.params.HttpParams);
    method public int read() throws java.io.IOException;
    method public int read(byte[], int, int) throws java.io.IOException;
    method public int read(byte[]) throws java.io.IOException;
    method public int readLine(org.apache.http.util.CharArrayBuffer) throws java.io.IOException;
    method public java.lang.String readLine() throws java.io.IOException;
  }

  public abstract deprecated class AbstractSessionOutputBuffer implements org.apache.http.io.SessionOutputBuffer {
    ctor public AbstractSessionOutputBuffer();
    method public void flush() throws java.io.IOException;
    method protected void flushBuffer() throws java.io.IOException;
    method public org.apache.http.io.HttpTransportMetrics getMetrics();
    method protected void init(java.io.OutputStream, int, org.apache.http.params.HttpParams);
    method public void write(byte[], int, int) throws java.io.IOException;
    method public void write(byte[]) throws java.io.IOException;
    method public void write(int) throws java.io.IOException;
    method public void writeLine(java.lang.String) throws java.io.IOException;
    method public void writeLine(org.apache.http.util.CharArrayBuffer) throws java.io.IOException;
  }

  public deprecated class ChunkedInputStream extends java.io.InputStream {
    ctor public ChunkedInputStream(org.apache.http.io.SessionInputBuffer);
    method public org.apache.http.Header[] getFooters();
    method public int read() throws java.io.IOException;
  }

  public deprecated class ChunkedOutputStream extends java.io.OutputStream {
    ctor public ChunkedOutputStream(org.apache.http.io.SessionOutputBuffer, int) throws java.io.IOException;
    ctor public ChunkedOutputStream(org.apache.http.io.SessionOutputBuffer) throws java.io.IOException;
    method public void finish() throws java.io.IOException;
    method protected void flushCache() throws java.io.IOException;
    method protected void flushCacheWithAppend(byte[], int, int) throws java.io.IOException;
    method public void write(int) throws java.io.IOException;
    method protected void writeClosingChunk() throws java.io.IOException;
  }

  public deprecated class ContentLengthInputStream extends java.io.InputStream {
    ctor public ContentLengthInputStream(org.apache.http.io.SessionInputBuffer, long);
    method public int read() throws java.io.IOException;
  }

  public deprecated class ContentLengthOutputStream extends java.io.OutputStream {
    ctor public ContentLengthOutputStream(org.apache.http.io.SessionOutputBuffer, long);
    method public void write(int) throws java.io.IOException;
  }

  public deprecated class HttpRequestParser extends org.apache.http.impl.io.AbstractMessageParser {
    ctor public HttpRequestParser(org.apache.http.io.SessionInputBuffer, org.apache.http.message.LineParser, org.apache.http.HttpRequestFactory, org.apache.http.params.HttpParams);
    method protected org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) throws org.apache.http.HttpException, java.io.IOException, org.apache.http.ParseException;
  }

  public deprecated class HttpRequestWriter extends org.apache.http.impl.io.AbstractMessageWriter {
    ctor public HttpRequestWriter(org.apache.http.io.SessionOutputBuffer, org.apache.http.message.LineFormatter, org.apache.http.params.HttpParams);
    method protected void writeHeadLine(org.apache.http.HttpMessage) throws java.io.IOException;
  }

  public deprecated class HttpResponseParser extends org.apache.http.impl.io.AbstractMessageParser {
    ctor public HttpResponseParser(org.apache.http.io.SessionInputBuffer, org.apache.http.message.LineParser, org.apache.http.HttpResponseFactory, org.apache.http.params.HttpParams);
    method protected org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) throws org.apache.http.HttpException, java.io.IOException, org.apache.http.ParseException;
  }

  public deprecated class HttpResponseWriter extends org.apache.http.impl.io.AbstractMessageWriter {
    ctor public HttpResponseWriter(org.apache.http.io.SessionOutputBuffer, org.apache.http.message.LineFormatter, org.apache.http.params.HttpParams);
    method protected void writeHeadLine(org.apache.http.HttpMessage) throws java.io.IOException;
  }

  public deprecated class HttpTransportMetricsImpl implements org.apache.http.io.HttpTransportMetrics {
    ctor public HttpTransportMetricsImpl();
    method public long getBytesTransferred();
    method public void incrementBytesTransferred(long);
    method public void reset();
    method public void setBytesTransferred(long);
  }

  public deprecated class IdentityInputStream extends java.io.InputStream {
    ctor public IdentityInputStream(org.apache.http.io.SessionInputBuffer);
    method public int read() throws java.io.IOException;
  }

  public deprecated class IdentityOutputStream extends java.io.OutputStream {
    ctor public IdentityOutputStream(org.apache.http.io.SessionOutputBuffer);
    method public void write(int) throws java.io.IOException;
  }

  public deprecated class SocketInputBuffer extends org.apache.http.impl.io.AbstractSessionInputBuffer {
    ctor public SocketInputBuffer(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException;
    method public boolean isDataAvailable(int) throws java.io.IOException;
    method public boolean isStale() throws java.io.IOException;
  }

  public deprecated class SocketOutputBuffer extends org.apache.http.impl.io.AbstractSessionOutputBuffer {
    ctor public SocketOutputBuffer(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException;
  }

}

package org.apache.http.io {

  public abstract deprecated interface HttpMessageParser {
    method public abstract org.apache.http.HttpMessage parse() throws org.apache.http.HttpException, java.io.IOException;
  }

  public abstract deprecated interface HttpMessageWriter {
    method public abstract void write(org.apache.http.HttpMessage) throws org.apache.http.HttpException, java.io.IOException;
  }

  public abstract deprecated interface HttpTransportMetrics {
    method public abstract long getBytesTransferred();
    method public abstract void reset();
  }

  public abstract deprecated interface SessionInputBuffer {
    method public abstract org.apache.http.io.HttpTransportMetrics getMetrics();
    method public abstract boolean isDataAvailable(int) throws java.io.IOException;
    method public abstract int read(byte[], int, int) throws java.io.IOException;
    method public abstract int read(byte[]) throws java.io.IOException;
    method public abstract int read() throws java.io.IOException;
    method public abstract int readLine(org.apache.http.util.CharArrayBuffer) throws java.io.IOException;
    method public abstract java.lang.String readLine() throws java.io.IOException;
  }

  public abstract deprecated interface SessionOutputBuffer {
    method public abstract void flush() throws java.io.IOException;
    method public abstract org.apache.http.io.HttpTransportMetrics getMetrics();
    method public abstract void write(byte[], int, int) throws java.io.IOException;
    method public abstract void write(byte[]) throws java.io.IOException;
    method public abstract void write(int) throws java.io.IOException;
    method public abstract void writeLine(java.lang.String) throws java.io.IOException;
    method public abstract void writeLine(org.apache.http.util.CharArrayBuffer) throws java.io.IOException;
  }

}

package org.apache.http.message {

  public abstract deprecated class AbstractHttpMessage implements org.apache.http.HttpMessage {
    ctor protected AbstractHttpMessage(org.apache.http.params.HttpParams);
    ctor protected AbstractHttpMessage();
    method public void addHeader(org.apache.http.Header);
    method public void addHeader(java.lang.String, java.lang.String);
    method public boolean containsHeader(java.lang.String);
    method public org.apache.http.Header[] getAllHeaders();
    method public org.apache.http.Header getFirstHeader(java.lang.String);
    method public org.apache.http.Header[] getHeaders(java.lang.String);
    method public org.apache.http.Header getLastHeader(java.lang.String);
    method public org.apache.http.params.HttpParams getParams();
    method public org.apache.http.HeaderIterator headerIterator();
    method public org.apache.http.HeaderIterator headerIterator(java.lang.String);
    method public void removeHeader(org.apache.http.Header);
    method public void removeHeaders(java.lang.String);
    method public void setHeader(org.apache.http.Header);
    method public void setHeader(java.lang.String, java.lang.String);
    method public void setHeaders(org.apache.http.Header[]);
    method public void setParams(org.apache.http.params.HttpParams);
    field protected org.apache.http.message.HeaderGroup headergroup;
    field protected org.apache.http.params.HttpParams params;
  }

  public deprecated class BasicHeader implements java.lang.Cloneable org.apache.http.Header {
    ctor public BasicHeader(java.lang.String, java.lang.String);
    method public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    method public org.apache.http.HeaderElement[] getElements() throws org.apache.http.ParseException;
    method public java.lang.String getName();
    method public java.lang.String getValue();
  }

  public deprecated class BasicHeaderElement implements java.lang.Cloneable org.apache.http.HeaderElement {
    ctor public BasicHeaderElement(java.lang.String, java.lang.String, org.apache.http.NameValuePair[]);
    ctor public BasicHeaderElement(java.lang.String, java.lang.String);
    method public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    method public java.lang.String getName();
    method public org.apache.http.NameValuePair getParameter(int);
    method public org.apache.http.NameValuePair getParameterByName(java.lang.String);
    method public int getParameterCount();
    method public org.apache.http.NameValuePair[] getParameters();
    method public java.lang.String getValue();
  }

  public deprecated class BasicHeaderElementIterator implements org.apache.http.HeaderElementIterator {
    ctor public BasicHeaderElementIterator(org.apache.http.HeaderIterator, org.apache.http.message.HeaderValueParser);
    ctor public BasicHeaderElementIterator(org.apache.http.HeaderIterator);
    method public boolean hasNext();
    method public final java.lang.Object next() throws java.util.NoSuchElementException;
    method public org.apache.http.HeaderElement nextElement() throws java.util.NoSuchElementException;
    method public void remove() throws java.lang.UnsupportedOperationException;
  }

  public deprecated class BasicHeaderIterator implements org.apache.http.HeaderIterator {
    ctor public BasicHeaderIterator(org.apache.http.Header[], java.lang.String);
    method protected boolean filterHeader(int);
    method protected int findNext(int);
    method public boolean hasNext();
    method public final java.lang.Object next() throws java.util.NoSuchElementException;
    method public org.apache.http.Header nextHeader() throws java.util.NoSuchElementException;
    method public void remove() throws java.lang.UnsupportedOperationException;
    field protected final org.apache.http.Header[] allHeaders;
    field protected int currentIndex;
    field protected java.lang.String headerName;
  }

  public deprecated class BasicHeaderValueFormatter implements org.apache.http.message.HeaderValueFormatter {
    ctor public BasicHeaderValueFormatter();
    method protected void doFormatValue(org.apache.http.util.CharArrayBuffer, java.lang.String, boolean);
    method protected int estimateElementsLen(org.apache.http.HeaderElement[]);
    method protected int estimateHeaderElementLen(org.apache.http.HeaderElement);
    method protected int estimateNameValuePairLen(org.apache.http.NameValuePair);
    method protected int estimateParametersLen(org.apache.http.NameValuePair[]);
    method public static final java.lang.String formatElements(org.apache.http.HeaderElement[], boolean, org.apache.http.message.HeaderValueFormatter);
    method public org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer, org.apache.http.HeaderElement[], boolean);
    method public static final java.lang.String formatHeaderElement(org.apache.http.HeaderElement, boolean, org.apache.http.message.HeaderValueFormatter);
    method public org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer, org.apache.http.HeaderElement, boolean);
    method public static final java.lang.String formatNameValuePair(org.apache.http.NameValuePair, boolean, org.apache.http.message.HeaderValueFormatter);
    method public org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.NameValuePair, boolean);
    method public static final java.lang.String formatParameters(org.apache.http.NameValuePair[], boolean, org.apache.http.message.HeaderValueFormatter);
    method public org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer, org.apache.http.NameValuePair[], boolean);
    method protected boolean isSeparator(char);
    method protected boolean isUnsafe(char);
    field public static final org.apache.http.message.BasicHeaderValueFormatter DEFAULT;
    field public static final java.lang.String SEPARATORS = " ;,:@()<>\\\"/[]?={}\t";
    field public static final java.lang.String UNSAFE_CHARS = "\"\\";
  }

  public deprecated class BasicHeaderValueParser implements org.apache.http.message.HeaderValueParser {
    ctor public BasicHeaderValueParser();
    method protected org.apache.http.HeaderElement createHeaderElement(java.lang.String, java.lang.String, org.apache.http.NameValuePair[]);
    method protected org.apache.http.NameValuePair createNameValuePair(java.lang.String, java.lang.String);
    method public static final org.apache.http.HeaderElement[] parseElements(java.lang.String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException;
    method public org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
    method public static final org.apache.http.HeaderElement parseHeaderElement(java.lang.String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException;
    method public org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
    method public static final org.apache.http.NameValuePair parseNameValuePair(java.lang.String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException;
    method public org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
    method public org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor, char[]);
    method public static final org.apache.http.NameValuePair[] parseParameters(java.lang.String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException;
    method public org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
    field public static final org.apache.http.message.BasicHeaderValueParser DEFAULT;
  }

  public deprecated class BasicHttpEntityEnclosingRequest extends org.apache.http.message.BasicHttpRequest implements org.apache.http.HttpEntityEnclosingRequest {
    ctor public BasicHttpEntityEnclosingRequest(java.lang.String, java.lang.String);
    ctor public BasicHttpEntityEnclosingRequest(java.lang.String, java.lang.String, org.apache.http.ProtocolVersion);
    ctor public BasicHttpEntityEnclosingRequest(org.apache.http.RequestLine);
    method public boolean expectContinue();
    method public org.apache.http.HttpEntity getEntity();
    method public void setEntity(org.apache.http.HttpEntity);
  }

  public deprecated class BasicHttpRequest extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.HttpRequest {
    ctor public BasicHttpRequest(java.lang.String, java.lang.String);
    ctor public BasicHttpRequest(java.lang.String, java.lang.String, org.apache.http.ProtocolVersion);
    ctor public BasicHttpRequest(org.apache.http.RequestLine);
    method public org.apache.http.ProtocolVersion getProtocolVersion();
    method public org.apache.http.RequestLine getRequestLine();
  }

  public deprecated class BasicHttpResponse extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.HttpResponse {
    ctor public BasicHttpResponse(org.apache.http.StatusLine, org.apache.http.ReasonPhraseCatalog, java.util.Locale);
    ctor public BasicHttpResponse(org.apache.http.StatusLine);
    ctor public BasicHttpResponse(org.apache.http.ProtocolVersion, int, java.lang.String);
    method public org.apache.http.HttpEntity getEntity();
    method public java.util.Locale getLocale();
    method public org.apache.http.ProtocolVersion getProtocolVersion();
    method protected java.lang.String getReason(int);
    method public org.apache.http.StatusLine getStatusLine();
    method public void setEntity(org.apache.http.HttpEntity);
    method public void setLocale(java.util.Locale);
    method public void setReasonPhrase(java.lang.String);
    method public void setStatusCode(int);
    method public void setStatusLine(org.apache.http.StatusLine);
    method public void setStatusLine(org.apache.http.ProtocolVersion, int);
    method public void setStatusLine(org.apache.http.ProtocolVersion, int, java.lang.String);
  }

  public deprecated class BasicLineFormatter implements org.apache.http.message.LineFormatter {
    ctor public BasicLineFormatter();
    method public org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.ProtocolVersion);
    method protected void doFormatHeader(org.apache.http.util.CharArrayBuffer, org.apache.http.Header);
    method protected void doFormatRequestLine(org.apache.http.util.CharArrayBuffer, org.apache.http.RequestLine);
    method protected void doFormatStatusLine(org.apache.http.util.CharArrayBuffer, org.apache.http.StatusLine);
    method protected int estimateProtocolVersionLen(org.apache.http.ProtocolVersion);
    method public static final java.lang.String formatHeader(org.apache.http.Header, org.apache.http.message.LineFormatter);
    method public org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer, org.apache.http.Header);
    method public static final java.lang.String formatProtocolVersion(org.apache.http.ProtocolVersion, org.apache.http.message.LineFormatter);
    method public static final java.lang.String formatRequestLine(org.apache.http.RequestLine, org.apache.http.message.LineFormatter);
    method public org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer, org.apache.http.RequestLine);
    method public static final java.lang.String formatStatusLine(org.apache.http.StatusLine, org.apache.http.message.LineFormatter);
    method public org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer, org.apache.http.StatusLine);
    method protected org.apache.http.util.CharArrayBuffer initBuffer(org.apache.http.util.CharArrayBuffer);
    field public static final org.apache.http.message.BasicLineFormatter DEFAULT;
  }

  public deprecated class BasicLineParser implements org.apache.http.message.LineParser {
    ctor public BasicLineParser(org.apache.http.ProtocolVersion);
    ctor public BasicLineParser();
    method protected org.apache.http.ProtocolVersion createProtocolVersion(int, int);
    method protected org.apache.http.RequestLine createRequestLine(java.lang.String, java.lang.String, org.apache.http.ProtocolVersion);
    method protected org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion, int, java.lang.String);
    method public boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
    method public static final org.apache.http.Header parseHeader(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException;
    method public org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer) throws org.apache.http.ParseException;
    method public static final org.apache.http.ProtocolVersion parseProtocolVersion(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException;
    method public org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
    method public static final org.apache.http.RequestLine parseRequestLine(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException;
    method public org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
    method public static final org.apache.http.StatusLine parseStatusLine(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException;
    method public org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
    method protected void skipWhitespace(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
    field public static final org.apache.http.message.BasicLineParser DEFAULT;
    field protected final org.apache.http.ProtocolVersion protocol;
  }

  public deprecated class BasicListHeaderIterator implements org.apache.http.HeaderIterator {
    ctor public BasicListHeaderIterator(java.util.List, java.lang.String);
    method protected boolean filterHeader(int);
    method protected int findNext(int);
    method public boolean hasNext();
    method public final java.lang.Object next() throws java.util.NoSuchElementException;
    method public org.apache.http.Header nextHeader() throws java.util.NoSuchElementException;
    method public void remove() throws java.lang.UnsupportedOperationException;
    field protected final java.util.List allHeaders;
    field protected int currentIndex;
    field protected java.lang.String headerName;
    field protected int lastIndex;
  }

  public deprecated class BasicNameValuePair implements java.lang.Cloneable org.apache.http.NameValuePair {
    ctor public BasicNameValuePair(java.lang.String, java.lang.String);
    method public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    method public java.lang.String getName();
    method public java.lang.String getValue();
  }

  public deprecated class BasicRequestLine implements java.lang.Cloneable org.apache.http.RequestLine {
    ctor public BasicRequestLine(java.lang.String, java.lang.String, org.apache.http.ProtocolVersion);
    method public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    method public java.lang.String getMethod();
    method public org.apache.http.ProtocolVersion getProtocolVersion();
    method public java.lang.String getUri();
  }

  public deprecated class BasicStatusLine implements java.lang.Cloneable org.apache.http.StatusLine {
    ctor public BasicStatusLine(org.apache.http.ProtocolVersion, int, java.lang.String);
    method public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    method public org.apache.http.ProtocolVersion getProtocolVersion();
    method public java.lang.String getReasonPhrase();
    method public int getStatusCode();
  }

  public deprecated class BasicTokenIterator implements org.apache.http.TokenIterator {
    ctor public BasicTokenIterator(org.apache.http.HeaderIterator);
    method protected java.lang.String createToken(java.lang.String, int, int);
    method protected int findNext(int) throws org.apache.http.ParseException;
    method protected int findTokenEnd(int);
    method protected int findTokenSeparator(int);
    method protected int findTokenStart(int);
    method public boolean hasNext();
    method protected boolean isHttpSeparator(char);
    method protected boolean isTokenChar(char);
    method protected boolean isTokenSeparator(char);
    method protected boolean isWhitespace(char);
    method public final java.lang.Object next() throws java.util.NoSuchElementException, org.apache.http.ParseException;
    method public java.lang.String nextToken() throws java.util.NoSuchElementException, org.apache.http.ParseException;
    method public final void remove() throws java.lang.UnsupportedOperationException;
    field public static final java.lang.String HTTP_SEPARATORS = " ,;=()<>@:\\\"/[]?{}\t";
    field protected java.lang.String currentHeader;
    field protected java.lang.String currentToken;
    field protected final org.apache.http.HeaderIterator headerIt;
    field protected int searchPos;
  }

  public deprecated class BufferedHeader implements java.lang.Cloneable org.apache.http.FormattedHeader {
    ctor public BufferedHeader(org.apache.http.util.CharArrayBuffer) throws org.apache.http.ParseException;
    method public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    method public org.apache.http.util.CharArrayBuffer getBuffer();
    method public org.apache.http.HeaderElement[] getElements() throws org.apache.http.ParseException;
    method public java.lang.String getName();
    method public java.lang.String getValue();
    method public int getValuePos();
  }

  public deprecated class HeaderGroup implements java.lang.Cloneable {
    ctor public HeaderGroup();
    method public void addHeader(org.apache.http.Header);
    method public void clear();
    method public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    method public boolean containsHeader(java.lang.String);
    method public org.apache.http.message.HeaderGroup copy();
    method public org.apache.http.Header[] getAllHeaders();
    method public org.apache.http.Header getCondensedHeader(java.lang.String);
    method public org.apache.http.Header getFirstHeader(java.lang.String);
    method public org.apache.http.Header[] getHeaders(java.lang.String);
    method public org.apache.http.Header getLastHeader(java.lang.String);
    method public org.apache.http.HeaderIterator iterator();
    method public org.apache.http.HeaderIterator iterator(java.lang.String);
    method public void removeHeader(org.apache.http.Header);
    method public void setHeaders(org.apache.http.Header[]);
    method public void updateHeader(org.apache.http.Header);
  }

  public abstract deprecated interface HeaderValueFormatter {
    method public abstract org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer, org.apache.http.HeaderElement[], boolean);
    method public abstract org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer, org.apache.http.HeaderElement, boolean);
    method public abstract org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.NameValuePair, boolean);
    method public abstract org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer, org.apache.http.NameValuePair[], boolean);
  }

  public abstract deprecated interface HeaderValueParser {
    method public abstract org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
    method public abstract org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
    method public abstract org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
    method public abstract org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
  }

  public abstract deprecated interface LineFormatter {
    method public abstract org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.ProtocolVersion);
    method public abstract org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer, org.apache.http.Header);
    method public abstract org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer, org.apache.http.RequestLine);
    method public abstract org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer, org.apache.http.StatusLine);
  }

  public abstract deprecated interface LineParser {
    method public abstract boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor);
    method public abstract org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer) throws org.apache.http.ParseException;
    method public abstract org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
    method public abstract org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
    method public abstract org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException;
  }

  public deprecated class ParserCursor {
    ctor public ParserCursor(int, int);
    method public boolean atEnd();
    method public int getLowerBound();
    method public int getPos();
    method public int getUpperBound();
    method public void updatePos(int);
  }

}

package org.apache.http.params {

  public abstract deprecated class AbstractHttpParams implements org.apache.http.params.HttpParams {
    ctor protected AbstractHttpParams();
    method public boolean getBooleanParameter(java.lang.String, boolean);
    method public double getDoubleParameter(java.lang.String, double);
    method public int getIntParameter(java.lang.String, int);
    method public long getLongParameter(java.lang.String, long);
    method public boolean isParameterFalse(java.lang.String);
    method public boolean isParameterTrue(java.lang.String);
    method public org.apache.http.params.HttpParams setBooleanParameter(java.lang.String, boolean);
    method public org.apache.http.params.HttpParams setDoubleParameter(java.lang.String, double);
    method public org.apache.http.params.HttpParams setIntParameter(java.lang.String, int);
    method public org.apache.http.params.HttpParams setLongParameter(java.lang.String, long);
  }

  public final deprecated class BasicHttpParams extends org.apache.http.params.AbstractHttpParams implements java.lang.Cloneable java.io.Serializable {
    ctor public BasicHttpParams();
    method public void clear();
    method public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    method public org.apache.http.params.HttpParams copy();
    method protected void copyParams(org.apache.http.params.HttpParams);
    method public java.lang.Object getParameter(java.lang.String);
    method public boolean isParameterSet(java.lang.String);
    method public boolean isParameterSetLocally(java.lang.String);
    method public boolean removeParameter(java.lang.String);
    method public org.apache.http.params.HttpParams setParameter(java.lang.String, java.lang.Object);
    method public void setParameters(java.lang.String[], java.lang.Object);
  }

  public abstract deprecated interface CoreConnectionPNames {
    field public static final java.lang.String CONNECTION_TIMEOUT = "http.connection.timeout";
    field public static final java.lang.String MAX_HEADER_COUNT = "http.connection.max-header-count";
    field public static final java.lang.String MAX_LINE_LENGTH = "http.connection.max-line-length";
    field public static final java.lang.String SOCKET_BUFFER_SIZE = "http.socket.buffer-size";
    field public static final java.lang.String SO_LINGER = "http.socket.linger";
    field public static final java.lang.String SO_TIMEOUT = "http.socket.timeout";
    field public static final java.lang.String STALE_CONNECTION_CHECK = "http.connection.stalecheck";
    field public static final java.lang.String TCP_NODELAY = "http.tcp.nodelay";
  }

  public abstract deprecated interface CoreProtocolPNames {
    field public static final java.lang.String HTTP_CONTENT_CHARSET = "http.protocol.content-charset";
    field public static final java.lang.String HTTP_ELEMENT_CHARSET = "http.protocol.element-charset";
    field public static final java.lang.String ORIGIN_SERVER = "http.origin-server";
    field public static final java.lang.String PROTOCOL_VERSION = "http.protocol.version";
    field public static final java.lang.String STRICT_TRANSFER_ENCODING = "http.protocol.strict-transfer-encoding";
    field public static final java.lang.String USER_AGENT = "http.useragent";
    field public static final java.lang.String USE_EXPECT_CONTINUE = "http.protocol.expect-continue";
    field public static final java.lang.String WAIT_FOR_CONTINUE = "http.protocol.wait-for-continue";
  }

  public final deprecated class DefaultedHttpParams extends org.apache.http.params.AbstractHttpParams {
    ctor public DefaultedHttpParams(org.apache.http.params.HttpParams, org.apache.http.params.HttpParams);
    method public org.apache.http.params.HttpParams copy();
    method public org.apache.http.params.HttpParams getDefaults();
    method public java.lang.Object getParameter(java.lang.String);
    method public boolean removeParameter(java.lang.String);
    method public org.apache.http.params.HttpParams setParameter(java.lang.String, java.lang.Object);
  }

  public abstract deprecated class HttpAbstractParamBean {
    ctor public HttpAbstractParamBean(org.apache.http.params.HttpParams);
    field protected final org.apache.http.params.HttpParams params;
  }

  public deprecated class HttpConnectionParamBean extends org.apache.http.params.HttpAbstractParamBean {
    ctor public HttpConnectionParamBean(org.apache.http.params.HttpParams);
    method public void setConnectionTimeout(int);
    method public void setLinger(int);
    method public void setSoTimeout(int);
    method public void setSocketBufferSize(int);
    method public void setStaleCheckingEnabled(boolean);
    method public void setTcpNoDelay(boolean);
  }

  public final deprecated class HttpConnectionParams implements org.apache.http.params.CoreConnectionPNames {
    method public static int getConnectionTimeout(org.apache.http.params.HttpParams);
    method public static int getLinger(org.apache.http.params.HttpParams);
    method public static int getSoTimeout(org.apache.http.params.HttpParams);
    method public static int getSocketBufferSize(org.apache.http.params.HttpParams);
    method public static boolean getTcpNoDelay(org.apache.http.params.HttpParams);
    method public static boolean isStaleCheckingEnabled(org.apache.http.params.HttpParams);
    method public static void setConnectionTimeout(org.apache.http.params.HttpParams, int);
    method public static void setLinger(org.apache.http.params.HttpParams, int);
    method public static void setSoTimeout(org.apache.http.params.HttpParams, int);
    method public static void setSocketBufferSize(org.apache.http.params.HttpParams, int);
    method public static void setStaleCheckingEnabled(org.apache.http.params.HttpParams, boolean);
    method public static void setTcpNoDelay(org.apache.http.params.HttpParams, boolean);
  }

  public abstract deprecated interface HttpParams {
    method public abstract org.apache.http.params.HttpParams copy();
    method public abstract boolean getBooleanParameter(java.lang.String, boolean);
    method public abstract double getDoubleParameter(java.lang.String, double);
    method public abstract int getIntParameter(java.lang.String, int);
    method public abstract long getLongParameter(java.lang.String, long);
    method public abstract java.lang.Object getParameter(java.lang.String);
    method public abstract boolean isParameterFalse(java.lang.String);
    method public abstract boolean isParameterTrue(java.lang.String);
    method public abstract boolean removeParameter(java.lang.String);
    method public abstract org.apache.http.params.HttpParams setBooleanParameter(java.lang.String, boolean);
    method public abstract org.apache.http.params.HttpParams setDoubleParameter(java.lang.String, double);
    method public abstract org.apache.http.params.HttpParams setIntParameter(java.lang.String, int);
    method public abstract org.apache.http.params.HttpParams setLongParameter(java.lang.String, long);
    method public abstract org.apache.http.params.HttpParams setParameter(java.lang.String, java.lang.Object);
  }

  public deprecated class HttpProtocolParamBean extends org.apache.http.params.HttpAbstractParamBean {
    ctor public HttpProtocolParamBean(org.apache.http.params.HttpParams);
    method public void setContentCharset(java.lang.String);
    method public void setHttpElementCharset(java.lang.String);
    method public void setUseExpectContinue(boolean);
    method public void setUserAgent(java.lang.String);
    method public void setVersion(org.apache.http.HttpVersion);
  }

  public final deprecated class HttpProtocolParams implements org.apache.http.params.CoreProtocolPNames {
    method public static java.lang.String getContentCharset(org.apache.http.params.HttpParams);
    method public static java.lang.String getHttpElementCharset(org.apache.http.params.HttpParams);
    method public static java.lang.String getUserAgent(org.apache.http.params.HttpParams);
    method public static org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams);
    method public static void setContentCharset(org.apache.http.params.HttpParams, java.lang.String);
    method public static void setHttpElementCharset(org.apache.http.params.HttpParams, java.lang.String);
    method public static void setUseExpectContinue(org.apache.http.params.HttpParams, boolean);
    method public static void setUserAgent(org.apache.http.params.HttpParams, java.lang.String);
    method public static void setVersion(org.apache.http.params.HttpParams, org.apache.http.ProtocolVersion);
    method public static boolean useExpectContinue(org.apache.http.params.HttpParams);
  }

}

package org.apache.http.protocol {

  public deprecated class BasicHttpContext implements org.apache.http.protocol.HttpContext {
    ctor public BasicHttpContext();
    ctor public BasicHttpContext(org.apache.http.protocol.HttpContext);
    method public java.lang.Object getAttribute(java.lang.String);
    method public java.lang.Object removeAttribute(java.lang.String);
    method public void setAttribute(java.lang.String, java.lang.Object);
  }

  public final deprecated class BasicHttpProcessor implements java.lang.Cloneable org.apache.http.protocol.HttpProcessor org.apache.http.protocol.HttpRequestInterceptorList org.apache.http.protocol.HttpResponseInterceptorList {
    ctor public BasicHttpProcessor();
    method public void addInterceptor(org.apache.http.HttpRequestInterceptor);
    method public void addInterceptor(org.apache.http.HttpRequestInterceptor, int);
    method public void addInterceptor(org.apache.http.HttpResponseInterceptor);
    method public void addInterceptor(org.apache.http.HttpResponseInterceptor, int);
    method public void addRequestInterceptor(org.apache.http.HttpRequestInterceptor);
    method public void addRequestInterceptor(org.apache.http.HttpRequestInterceptor, int);
    method public void addResponseInterceptor(org.apache.http.HttpResponseInterceptor, int);
    method public void addResponseInterceptor(org.apache.http.HttpResponseInterceptor);
    method public void clearInterceptors();
    method public void clearRequestInterceptors();
    method public void clearResponseInterceptors();
    method public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    method public org.apache.http.protocol.BasicHttpProcessor copy();
    method protected void copyInterceptors(org.apache.http.protocol.BasicHttpProcessor);
    method public org.apache.http.HttpRequestInterceptor getRequestInterceptor(int);
    method public int getRequestInterceptorCount();
    method public org.apache.http.HttpResponseInterceptor getResponseInterceptor(int);
    method public int getResponseInterceptorCount();
    method public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method public void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method public void removeRequestInterceptorByClass(java.lang.Class);
    method public void removeResponseInterceptorByClass(java.lang.Class);
    method public void setInterceptors(java.util.List);
    field protected java.util.List requestInterceptors;
    field protected java.util.List responseInterceptors;
  }

  public final deprecated class DefaultedHttpContext implements org.apache.http.protocol.HttpContext {
    ctor public DefaultedHttpContext(org.apache.http.protocol.HttpContext, org.apache.http.protocol.HttpContext);
    method public java.lang.Object getAttribute(java.lang.String);
    method public org.apache.http.protocol.HttpContext getDefaults();
    method public java.lang.Object removeAttribute(java.lang.String);
    method public void setAttribute(java.lang.String, java.lang.Object);
  }

  public abstract deprecated interface ExecutionContext {
    field public static final java.lang.String HTTP_CONNECTION = "http.connection";
    field public static final java.lang.String HTTP_PROXY_HOST = "http.proxy_host";
    field public static final java.lang.String HTTP_REQUEST = "http.request";
    field public static final java.lang.String HTTP_REQ_SENT = "http.request_sent";
    field public static final java.lang.String HTTP_RESPONSE = "http.response";
    field public static final java.lang.String HTTP_TARGET_HOST = "http.target_host";
  }

  public final deprecated class HTTP {
    method public static boolean isWhitespace(char);
    field public static final java.lang.String ASCII = "ASCII";
    field public static final java.lang.String CHARSET_PARAM = "; charset=";
    field public static final java.lang.String CHUNK_CODING = "chunked";
    field public static final java.lang.String CONN_CLOSE = "Close";
    field public static final java.lang.String CONN_DIRECTIVE = "Connection";
    field public static final java.lang.String CONN_KEEP_ALIVE = "Keep-Alive";
    field public static final java.lang.String CONTENT_ENCODING = "Content-Encoding";
    field public static final java.lang.String CONTENT_LEN = "Content-Length";
    field public static final java.lang.String CONTENT_TYPE = "Content-Type";
    field public static final int CR = 13; // 0xd
    field public static final java.lang.String DATE_HEADER = "Date";
    field public static final java.lang.String DEFAULT_CONTENT_CHARSET = "ISO-8859-1";
    field public static final java.lang.String DEFAULT_CONTENT_TYPE = "application/octet-stream";
    field public static final java.lang.String DEFAULT_PROTOCOL_CHARSET = "US-ASCII";
    field public static final java.lang.String EXPECT_CONTINUE = "100-continue";
    field public static final java.lang.String EXPECT_DIRECTIVE = "Expect";
    field public static final int HT = 9; // 0x9
    field public static final java.lang.String IDENTITY_CODING = "identity";
    field public static final java.lang.String ISO_8859_1 = "ISO-8859-1";
    field public static final int LF = 10; // 0xa
    field public static final java.lang.String OCTET_STREAM_TYPE = "application/octet-stream";
    field public static final java.lang.String PLAIN_TEXT_TYPE = "text/plain";
    field public static final java.lang.String SERVER_HEADER = "Server";
    field public static final int SP = 32; // 0x20
    field public static final java.lang.String TARGET_HOST = "Host";
    field public static final java.lang.String TRANSFER_ENCODING = "Transfer-Encoding";
    field public static final java.lang.String USER_AGENT = "User-Agent";
    field public static final java.lang.String US_ASCII = "US-ASCII";
    field public static final java.lang.String UTF_16 = "UTF-16";
    field public static final java.lang.String UTF_8 = "UTF-8";
  }

  public abstract deprecated interface HttpContext {
    method public abstract java.lang.Object getAttribute(java.lang.String);
    method public abstract java.lang.Object removeAttribute(java.lang.String);
    method public abstract void setAttribute(java.lang.String, java.lang.Object);
    field public static final java.lang.String RESERVED_PREFIX = "http.";
  }

  public deprecated class HttpDateGenerator {
    ctor public HttpDateGenerator();
    method public synchronized java.lang.String getCurrentDate();
    field public static final java.util.TimeZone GMT;
    field public static final java.lang.String PATTERN_RFC1123 = "EEE, dd MMM yyyy HH:mm:ss zzz";
  }

  public abstract deprecated interface HttpExpectationVerifier {
    method public abstract void verify(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException;
  }

  public abstract deprecated interface HttpProcessor implements org.apache.http.HttpRequestInterceptor org.apache.http.HttpResponseInterceptor {
  }

  public deprecated class HttpRequestExecutor {
    ctor public HttpRequestExecutor();
    method protected boolean canResponseHaveBody(org.apache.http.HttpRequest, org.apache.http.HttpResponse);
    method protected org.apache.http.HttpResponse doReceiveResponse(org.apache.http.HttpRequest, org.apache.http.HttpClientConnection, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method protected org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest, org.apache.http.HttpClientConnection, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method public org.apache.http.HttpResponse execute(org.apache.http.HttpRequest, org.apache.http.HttpClientConnection, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method public void postProcess(org.apache.http.HttpResponse, org.apache.http.protocol.HttpProcessor, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method public void preProcess(org.apache.http.HttpRequest, org.apache.http.protocol.HttpProcessor, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  public abstract deprecated interface HttpRequestHandler {
    method public abstract void handle(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  public deprecated class HttpRequestHandlerRegistry implements org.apache.http.protocol.HttpRequestHandlerResolver {
    ctor public HttpRequestHandlerRegistry();
    method public org.apache.http.protocol.HttpRequestHandler lookup(java.lang.String);
    method protected deprecated boolean matchUriRequestPattern(java.lang.String, java.lang.String);
    method public void register(java.lang.String, org.apache.http.protocol.HttpRequestHandler);
    method public void setHandlers(java.util.Map);
    method public void unregister(java.lang.String);
  }

  public abstract deprecated interface HttpRequestHandlerResolver {
    method public abstract org.apache.http.protocol.HttpRequestHandler lookup(java.lang.String);
  }

  public abstract deprecated interface HttpRequestInterceptorList {
    method public abstract void addRequestInterceptor(org.apache.http.HttpRequestInterceptor);
    method public abstract void addRequestInterceptor(org.apache.http.HttpRequestInterceptor, int);
    method public abstract void clearRequestInterceptors();
    method public abstract org.apache.http.HttpRequestInterceptor getRequestInterceptor(int);
    method public abstract int getRequestInterceptorCount();
    method public abstract void removeRequestInterceptorByClass(java.lang.Class);
    method public abstract void setInterceptors(java.util.List);
  }

  public abstract deprecated interface HttpResponseInterceptorList {
    method public abstract void addResponseInterceptor(org.apache.http.HttpResponseInterceptor);
    method public abstract void addResponseInterceptor(org.apache.http.HttpResponseInterceptor, int);
    method public abstract void clearResponseInterceptors();
    method public abstract org.apache.http.HttpResponseInterceptor getResponseInterceptor(int);
    method public abstract int getResponseInterceptorCount();
    method public abstract void removeResponseInterceptorByClass(java.lang.Class);
    method public abstract void setInterceptors(java.util.List);
  }

  public deprecated class HttpService {
    ctor public HttpService(org.apache.http.protocol.HttpProcessor, org.apache.http.ConnectionReuseStrategy, org.apache.http.HttpResponseFactory);
    method protected void doService(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method public org.apache.http.params.HttpParams getParams();
    method protected void handleException(org.apache.http.HttpException, org.apache.http.HttpResponse);
    method public void handleRequest(org.apache.http.HttpServerConnection, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
    method public void setConnReuseStrategy(org.apache.http.ConnectionReuseStrategy);
    method public void setExpectationVerifier(org.apache.http.protocol.HttpExpectationVerifier);
    method public void setHandlerResolver(org.apache.http.protocol.HttpRequestHandlerResolver);
    method public void setHttpProcessor(org.apache.http.protocol.HttpProcessor);
    method public void setParams(org.apache.http.params.HttpParams);
    method public void setResponseFactory(org.apache.http.HttpResponseFactory);
  }

  public deprecated class RequestConnControl implements org.apache.http.HttpRequestInterceptor {
    ctor public RequestConnControl();
    method public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  public deprecated class RequestContent implements org.apache.http.HttpRequestInterceptor {
    ctor public RequestContent();
    method public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  public deprecated class RequestDate implements org.apache.http.HttpRequestInterceptor {
    ctor public RequestDate();
    method public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  public deprecated class RequestExpectContinue implements org.apache.http.HttpRequestInterceptor {
    ctor public RequestExpectContinue();
    method public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  public deprecated class RequestTargetHost implements org.apache.http.HttpRequestInterceptor {
    ctor public RequestTargetHost();
    method public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  public deprecated class RequestUserAgent implements org.apache.http.HttpRequestInterceptor {
    ctor public RequestUserAgent();
    method public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  public deprecated class ResponseConnControl implements org.apache.http.HttpResponseInterceptor {
    ctor public ResponseConnControl();
    method public void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  public deprecated class ResponseContent implements org.apache.http.HttpResponseInterceptor {
    ctor public ResponseContent();
    method public void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  public deprecated class ResponseDate implements org.apache.http.HttpResponseInterceptor {
    ctor public ResponseDate();
    method public void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  public deprecated class ResponseServer implements org.apache.http.HttpResponseInterceptor {
    ctor public ResponseServer();
    method public void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException;
  }

  public deprecated class SyncBasicHttpContext extends org.apache.http.protocol.BasicHttpContext {
    ctor public SyncBasicHttpContext(org.apache.http.protocol.HttpContext);
    method public synchronized java.lang.Object getAttribute(java.lang.String);
    method public synchronized java.lang.Object removeAttribute(java.lang.String);
    method public synchronized void setAttribute(java.lang.String, java.lang.Object);
  }

  public deprecated class UriPatternMatcher {
    ctor public UriPatternMatcher();
    method public java.lang.Object lookup(java.lang.String);
    method protected boolean matchUriRequestPattern(java.lang.String, java.lang.String);
    method public void register(java.lang.String, java.lang.Object);
    method public void setHandlers(java.util.Map);
    method public void unregister(java.lang.String);
  }

}

package org.apache.http.util {

  public final deprecated class ByteArrayBuffer {
    ctor public ByteArrayBuffer(int);
    method public void append(byte[], int, int);
    method public void append(int);
    method public void append(char[], int, int);
    method public void append(org.apache.http.util.CharArrayBuffer, int, int);
    method public byte[] buffer();
    method public int byteAt(int);
    method public int capacity();
    method public void clear();
    method public boolean isEmpty();
    method public boolean isFull();
    method public int length();
    method public void setLength(int);
    method public byte[] toByteArray();
  }

  public final deprecated class CharArrayBuffer {
    ctor public CharArrayBuffer(int);
    method public void append(char[], int, int);
    method public void append(java.lang.String);
    method public void append(org.apache.http.util.CharArrayBuffer, int, int);
    method public void append(org.apache.http.util.CharArrayBuffer);
    method public void append(char);
    method public void append(byte[], int, int);
    method public void append(org.apache.http.util.ByteArrayBuffer, int, int);
    method public void append(java.lang.Object);
    method public char[] buffer();
    method public int capacity();
    method public char charAt(int);
    method public void clear();
    method public void ensureCapacity(int);
    method public int indexOf(int, int, int);
    method public int indexOf(int);
    method public boolean isEmpty();
    method public boolean isFull();
    method public int length();
    method public void setLength(int);
    method public java.lang.String substring(int, int);
    method public java.lang.String substringTrimmed(int, int);
    method public char[] toCharArray();
  }

  public final deprecated class EncodingUtils {
    method public static byte[] getAsciiBytes(java.lang.String);
    method public static java.lang.String getAsciiString(byte[], int, int);
    method public static java.lang.String getAsciiString(byte[]);
    method public static byte[] getBytes(java.lang.String, java.lang.String);
    method public static java.lang.String getString(byte[], int, int, java.lang.String);
    method public static java.lang.String getString(byte[], java.lang.String);
  }

  public final deprecated class EntityUtils {
    method public static java.lang.String getContentCharSet(org.apache.http.HttpEntity) throws org.apache.http.ParseException;
    method public static byte[] toByteArray(org.apache.http.HttpEntity) throws java.io.IOException;
    method public static java.lang.String toString(org.apache.http.HttpEntity, java.lang.String) throws java.io.IOException, org.apache.http.ParseException;
    method public static java.lang.String toString(org.apache.http.HttpEntity) throws java.io.IOException, org.apache.http.ParseException;
  }

  public final deprecated class ExceptionUtils {
    method public static void initCause(java.lang.Throwable, java.lang.Throwable);
  }

  public final deprecated class LangUtils {
    method public static boolean equals(java.lang.Object, java.lang.Object);
    method public static boolean equals(java.lang.Object[], java.lang.Object[]);
    method public static int hashCode(int, int);
    method public static int hashCode(int, boolean);
    method public static int hashCode(int, java.lang.Object);
    field public static final int HASH_OFFSET = 37; // 0x25
    field public static final int HASH_SEED = 17; // 0x11
  }

  public deprecated class VersionInfo {
    ctor protected VersionInfo(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
    method protected static final org.apache.http.util.VersionInfo fromMap(java.lang.String, java.util.Map, java.lang.ClassLoader);
    method public final java.lang.String getClassloader();
    method public final java.lang.String getModule();
    method public final java.lang.String getPackage();
    method public final java.lang.String getRelease();
    method public final java.lang.String getTimestamp();
    method public static final org.apache.http.util.VersionInfo[] loadVersionInfo(java.lang.String[], java.lang.ClassLoader);
    method public static final org.apache.http.util.VersionInfo loadVersionInfo(java.lang.String, java.lang.ClassLoader);
    field public static final java.lang.String PROPERTY_MODULE = "info.module";
    field public static final java.lang.String PROPERTY_RELEASE = "info.release";
    field public static final java.lang.String PROPERTY_TIMESTAMP = "info.timestamp";
    field public static final java.lang.String UNAVAILABLE = "UNAVAILABLE";
    field public static final java.lang.String VERSION_PROPERTY_FILE = "version.properties";
  }

}

