# Copyright (c) 2015, Intel Corporation
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

find_package(SWIG)
# Hide these variables from CMake GUIs and `cmake -L`
set_property(CACHE
    SWIG_DIR SWIG_EXECUTABLE SWIG_VERSION
    PROPERTY ADVANCED TRUE)
if(NOT SWIG_FOUND)
    message(FATAL_ERROR
        "Swig is needed to compile the Python bindings but was not found."
        "Please either install swig2.0 or disable Python bindings by setting"
        "PYTHON_BINDINGS to OFF (e.g. '-DPYTHON_BINDINGS=OFF' in the"
        "invocation of CMake.). See the 'Compilation' section of README.md"
        "for more details.")
endif()

include(${SWIG_USE_FILE})

# Force usage of Python 2.7.x ...
find_package(PythonInterp 2.7 REQUIRED)

# ... and force the libs to be at the same version as the interpreter
find_package(PythonLibs ${PYTHON_VERSION_STRING} EXACT REQUIRED)
include_directories(${PYTHON_INCLUDE_DIRS})

set_property(SOURCE pfw.i PROPERTY CPLUSPLUS ON)
set_property(SOURCE pfw.i PROPERTY SWIG_FLAGS "-Wall")
if(FATAL_WARNINGS)
    set_property(SOURCE pfw.i APPEND PROPERTY SWIG_FLAGS "-Werror")
endif()

swig_add_module(PyPfw python pfw.i)
swig_link_libraries(PyPfw parameter ${PYTHON_LIBRARIES})
# For convenience, the global library output directory
# (CMAKE_LIBRARY_OUTPUT_DIRECTORY) is set to ${PROJECT_BINARY_DIR}/lib, so that
# all libs are generated in the same folder. This help writing test targets
# (add_test) that do not need "make install" to be run.
# However, putting _PyPfw.so in that folder defeats the purpose described
# above because when running tests using the python bindings, the PYTHONPATH
# needs to contain both _PyPfw.so and PyPfw.py. Without the line below,
# _PyPfw.so would be put in ${PROJECT_BINARY_DIR}/lib while PyPfw.py is put in
# ${CMAKE_CURRENT_BINARY_DIR}.
set_property(TARGET _PyPfw PROPERTY LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})

# '-DSWIG_PYTHON_SILENT_MEMLEAK' is needed because the "memleak" warning
# pollutes the standard output. At the time of writing, the only warning is
# spurious anyway, as it relates to "ILogger *" which is an abstract
# class/interface class and as such cannot be destroyed.
# -Wno-error is set to prevent compilation failure in case of the code
# generated by swig generates warnings. We don't apply the FATAL_WARNING policy
# here, since we consider this generated code as external.
target_compile_definitions(_PyPfw PRIVATE SWIG_PYTHON_SILENT_MEMLEAK)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error")


# Find the python modules install path.
# plat_specific is needed because we are installing a shared-library python
# module and not only a pure python module.
# prefix='' makes get_python_lib return a relative path.
execute_process(COMMAND
    ${PYTHON_EXECUTABLE} -c
        "from distutils import sysconfig;\\
         print(sysconfig.get_python_lib(plat_specific=True, prefix=''))"
    OUTPUT_VARIABLE PYTHON_MODULE_PATH OUTPUT_STRIP_TRAILING_WHITESPACE)

install(TARGETS _PyPfw LIBRARY DESTINATION ${PYTHON_MODULE_PATH})

# install the generated Python file as well
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/PyPfw.py DESTINATION ${PYTHON_MODULE_PATH})
