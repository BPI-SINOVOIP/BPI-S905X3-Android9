op {
  graph_op_name: "ExecuteInCriticalSection"
  in_arg {
    name: "critical_section"
    description: <<END
The handle of the `critical_section`.
END
  }
  in_arg {
    name: "arguments"
    description: <<END
Arguments for `f`, including any captured inputs appended at the end.
END
  }
  out_arg {
    name: "outputs"
    description: <<END
The outputs of `f`.
END
  }
  attr {
    name: "f"
    description: <<END
The `Function` to execute.
END
  }
  summary: "Executes function `f` within critical section `critical_section`."
  description: <<END
While `f` is running in `critical_section`, no other functions which wish to
use this critical section may run.

Often the use case is that two executions of the same graph, in parallel,
wish to run `f`; and we wish to ensure that only one of them executes
at a time.  This is especially important if `f` modifies one or more
variables at a time.

It is also useful if two separate functions must share a resource, but we
wish to ensure the usage is exclusive.

The signature of `f` is expected to be:

```
  outputs <- F(arguments)
```
Typically, but this is not required, `arguments` contain resources.  The
primary purpose of this op is to limit access to these resources to one
execution of `F` at a time.
END
}
