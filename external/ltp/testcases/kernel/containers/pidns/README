################################################################################
##                                                                            ##
## Copyright (c) International Business Machines  Corp., 2007                 ##
##                                                                            ##
## This program is free software;  you can redistribute it and#or modify      ##
## it under the terms of the GNU General Public License as published by       ##
## the Free Software Foundation; either version 2 of the License, or          ##
## (at your option) any later version.                                        ##
##                                                                            ##
## This program is distributed in the hope that it will be useful, but        ##
## WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY ##
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License   ##
## for more details.                                                          ##
##                                                                            ##
## You should have received a copy of the GNU General Public License          ##
## along with this program;  if not, write to the Free Software               ##
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA    ##
##                                                                            ##
################################################################################

PIDNS testcases Overview:

 A pid namespace is a view of particular set of tasks on the system. For processes, a process may have pid 1234 in one namespace, but have pid 1 in another.This allows processes to use process ids which are in use in other pid namespaces, without having to worry about what pids exist in other namespaces.

"A process has a pid in every ancestor pid namespaces up to the initial pid namespace.  If process B is in a child namespace relative to process A, then process A will see process B by the pid which is valid in process A's pid namespace."

"Another way of specifying process visibility, then is that process A will see all tasks which have a valid pid in process A's pid namespace."



Testcases:

1> Check the process id of container after cloning as 1.
2> After creation of container the PID Namespace of the container should have the parent group id as 1 and also session id as 1.
3> Create container: pass the parent namespacei id: mount /proc directory: check parent namespace id inside container: if it is exiting then PASS otherwise FAIL.

Check for PIDNS enablement: from 2.6.24 kernel version.
