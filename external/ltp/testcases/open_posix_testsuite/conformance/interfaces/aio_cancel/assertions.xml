<assertions>
	<assertion id="1" tag="ef:XSH6TC2:3966:3967">
	The aiocbp argument points to the AIO control block to be canceled.
	</assertion>
	<assertion id="2" tag="ef:XSH6TC2:3967:3968">
	if aiobcp is NULL, all outstanding cancelable AIO against fildes
	shall be canceled.
	</assertion>
	<assertion id="3" tag="ef:XSH6TC2:3969:3970">
	Asynchronous notification shall occur for AIO that are successfully
	cancelled.
	</assertion>
	<assertion id="4" tag="ef:XSH6TC2:3972:3973">
	Error status should be set to [ECANCELED] and return shall be -1 for
	successfully canceled AIO.
	</assertion>
	<assertion id="5" tag="ef:XSH6TC2:3973:3974">
	aiocbp not successfully canceled shall not be modified
	</assertion>
	<assertion id="6" tag="ef:XSH6TC2:3979:3980">
	aio_cancel() shall return AIO_CANCELED if the requested operations
	were canceled.
	</assertion>
	<assertion id="7" tag="ef:XSH6TC2:3980:3981">
	aio_cancel() shall return AIO_NOTCANCELED if at least one of the
	requested operations cannot be canceled because it is in progress.
	</assertion>
	<assertion id="8" tag="ef:XSH6TC2:3984:3985">
	aio_cancel() shall return AIO_ALLDONE if all operation have already
	completed
	</assertion>
	<assertion id="9" tag="ef:XSH6TC2:3985:3985">
	aio_cancel() shall return -1 and set errno in all other case.
	</assertion>
	<assertion id="10" tag="ef:XSH6TC2:3988:3988">
	aio_cancel() shall fail if:
	[EBADF] The fildes argument is not a valid descriptor.
	</assertion>
</assertions>
