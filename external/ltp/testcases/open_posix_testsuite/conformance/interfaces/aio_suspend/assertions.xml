<assertions>
	<assertion id="1" tag="ref:XSH6TC2:4266:4269">
	The aio_suspend() function shall suspend the calling thread until at
	least one of the asynchronous I/O operations referenced by the list
	argument has completed, until a signal interrupts the function, or,
	if timeout is not NULL, until the time interval specified by timeout
	has passed.
	The application may determine which AIO completed by scanning operations
	using aio_error() and aio_return().
	aio_supend() shall return zero after one or more AIO operations have
	completed.
	</assertion>
	<assertion id="2" tag="ref:XSH6TC2:4266:4269">
	If any of the aiocb structures in the list correspond to a completed
	AIO, the aio_suspend() shall return without suspending.
	</assertion>
	<assertion id="3" tag="ref:XSH6TC2:4272:4273">
	The list array may contain NULL pointers which are ignored.
	</assertion>
	<assertion id="4" tag="ref:XSH6TC2:4275:4276">
	On a timeout exit, aio_suspend shall return with an error.
	</assertion>
	<assertion id="5" tag="ref:XSH6TC2:4277:4278">
	If the monotonic clock option is supported, the clock that shall be
	used to measure this time interval shall be CLOCK_MONOTONIC clock.
	</assertion>
	<assertion id="7" tag="ref:XSH6TC2:4281:4282">
	aio_suspend() shall return the value -1 and set errno to indicate error
	if it returns before at least one AIO operation have completed.
	</assertion>
	<assertion id="9" tag="ref:XSH6TC2:4287:4288">
	aio_suspend() shall fail if:
	[EAGAIN] No AIO indicated in the list completed before timeout
	</assertion>
	<assertion id="10" tag="ref:XSH6TC2:4289:4292">
	aio_suspend() shall fail if:
	[EINTR] A signal interrupted aio_suspend().
	</assertion>
</assertions>
