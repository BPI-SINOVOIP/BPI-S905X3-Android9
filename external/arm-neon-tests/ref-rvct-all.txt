
VLD1/VLD1Q output:
VLD1/VLD1Q:0:result_int8x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VLD1/VLD1Q:1:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD1/VLD1Q:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VLD1/VLD1Q:3:result_int64x1 [] = { fffffffffffffff0,  }
VLD1/VLD1Q:4:result_uint8x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VLD1/VLD1Q:5:result_uint16x4 [] = { fff0, fff1, fff2, fff3,  }
VLD1/VLD1Q:6:result_uint32x2 [] = { fffffff0, fffffff1,  }
VLD1/VLD1Q:7:result_uint64x1 [] = { fffffffffffffff0,  }
VLD1/VLD1Q:8:result_poly8x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VLD1/VLD1Q:9:result_poly16x4 [] = { fff0, fff1, fff2, fff3,  }
VLD1/VLD1Q:10:result_float32x2 [] = { c1800000, c1700000,  }
VLD1/VLD1Q:11:result_float16x4 [] = { cc00, cb80, cb00, ca80,  }
VLD1/VLD1Q:12:result_int8x16 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7, fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff,  }
VLD1/VLD1Q:13:result_int16x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VLD1/VLD1Q:14:result_int32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD1/VLD1Q:15:result_int64x2 [] = { fffffffffffffff0, fffffffffffffff1,  }
VLD1/VLD1Q:16:result_uint8x16 [] = { f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fa, fb, fc, fd, fe, ff,  }
VLD1/VLD1Q:17:result_uint16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, fff6, fff7,  }
VLD1/VLD1Q:18:result_uint32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD1/VLD1Q:19:result_uint64x2 [] = { fffffffffffffff0, fffffffffffffff1,  }
VLD1/VLD1Q:20:result_poly8x16 [] = { f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fa, fb, fc, fd, fe, ff,  }
VLD1/VLD1Q:21:result_poly16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, fff6, fff7,  }
VLD1/VLD1Q:22:result_float32x4 [] = { c1800000, c1700000, c1600000, c1500000,  }
VLD1/VLD1Q:23:result_float16x8 [] = { cc00, cb80, cb00, ca80, ca00, c980, c900, c880,  }

VADD/VADDQ output:
VADD/VADDQ:0:result_int8x8 [] = { fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7, fffffff8, fffffff9,  }
VADD/VADDQ:1:result_int16x4 [] = { ffffffec, ffffffed, ffffffee, ffffffef,  }
VADD/VADDQ:2:result_int32x2 [] = { fffffff3, fffffff4,  }
VADD/VADDQ:3:result_int64x1 [] = { 54,  }
VADD/VADDQ:4:result_uint8x8 [] = { 4, 5, 6, 7, 8, 9, a, b,  }
VADD/VADDQ:5:result_uint16x4 [] = { e, f, 10, 11,  }
VADD/VADDQ:6:result_uint32x2 [] = { 18, 19,  }
VADD/VADDQ:7:result_uint64x1 [] = { fffffffffffffff2,  }
VADD/VADDQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VADD/VADDQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VADD/VADDQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VADD/VADDQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VADD/VADDQ:12:result_int8x16 [] = { ffffffe6, ffffffe7, ffffffe8, ffffffe9, ffffffea, ffffffeb, ffffffec, ffffffed, ffffffee, ffffffef, fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5,  }
VADD/VADDQ:13:result_int16x8 [] = { ffffffdc, ffffffdd, ffffffde, ffffffdf, ffffffe0, ffffffe1, ffffffe2, ffffffe3,  }
VADD/VADDQ:14:result_int32x4 [] = { ffffffd2, ffffffd3, ffffffd4, ffffffd5,  }
VADD/VADDQ:15:result_int64x2 [] = { 8, 9,  }
VADD/VADDQ:16:result_uint8x16 [] = { fc, fd, fe, ff, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b,  }
VADD/VADDQ:17:result_uint16x8 [] = { fff3, fff4, fff5, fff6, fff7, fff8, fff9, fffa,  }
VADD/VADDQ:18:result_uint32x4 [] = { 27, 28, 29, 2a,  }
VADD/VADDQ:19:result_uint64x2 [] = { fffffffffffffff3, fffffffffffffff4,  }
VADD/VADDQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VADD/VADDQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VADD/VADDQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VADD/VADDQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

float32:
VADD/VADDQ:24:result_float32x2 [] = { 40d9999a, 40d9999a,  }
VADD/VADDQ:25:result_float32x4 [] = { 41100000, 41100000, 41100000, 41100000,  }

VLD1_LANE/VLD1_LANEQ output:
VLD1_LANE/VLD1_LANEQ:0:result_int8x8 [] = { ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, fffffff0, ffffffaa,  }
VLD1_LANE/VLD1_LANEQ:1:result_int16x4 [] = { ffffaaaa, ffffaaaa, ffffaaaa, fffffff0,  }
VLD1_LANE/VLD1_LANEQ:2:result_int32x2 [] = { aaaaaaaa, fffffff0,  }
VLD1_LANE/VLD1_LANEQ:3:result_int64x1 [] = { fffffffffffffff0,  }
VLD1_LANE/VLD1_LANEQ:4:result_uint8x8 [] = { aa, aa, aa, aa, aa, aa, aa, f0,  }
VLD1_LANE/VLD1_LANEQ:5:result_uint16x4 [] = { aaaa, aaaa, aaaa, fff0,  }
VLD1_LANE/VLD1_LANEQ:6:result_uint32x2 [] = { aaaaaaaa, fffffff0,  }
VLD1_LANE/VLD1_LANEQ:7:result_uint64x1 [] = { fffffffffffffff0,  }
VLD1_LANE/VLD1_LANEQ:8:result_poly8x8 [] = { aa, aa, aa, aa, aa, aa, aa, f0,  }
VLD1_LANE/VLD1_LANEQ:9:result_poly16x4 [] = { aaaa, aaaa, aaaa, fff0,  }
VLD1_LANE/VLD1_LANEQ:10:result_float32x2 [] = { aaaaaaaa, c1800000,  }
VLD1_LANE/VLD1_LANEQ:11:result_float16x4 [] = { aaaa, aaaa, cc00, aaaa,  }
VLD1_LANE/VLD1_LANEQ:12:result_int8x16 [] = { ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, fffffff0,  }
VLD1_LANE/VLD1_LANEQ:13:result_int16x8 [] = { ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, fffffff0, ffffaaaa, ffffaaaa,  }
VLD1_LANE/VLD1_LANEQ:14:result_int32x4 [] = { aaaaaaaa, aaaaaaaa, fffffff0, aaaaaaaa,  }
VLD1_LANE/VLD1_LANEQ:15:result_int64x2 [] = { aaaaaaaaaaaaaaaa, fffffffffffffff0,  }
VLD1_LANE/VLD1_LANEQ:16:result_uint8x16 [] = { aa, aa, aa, aa, aa, aa, aa, aa, aa, aa, aa, aa, f0, aa, aa, aa,  }
VLD1_LANE/VLD1_LANEQ:17:result_uint16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, fff0, aaaa,  }
VLD1_LANE/VLD1_LANEQ:18:result_uint32x4 [] = { aaaaaaaa, aaaaaaaa, fffffff0, aaaaaaaa,  }
VLD1_LANE/VLD1_LANEQ:19:result_uint64x2 [] = { fffffffffffffff0, aaaaaaaaaaaaaaaa,  }
VLD1_LANE/VLD1_LANEQ:20:result_poly8x16 [] = { aa, aa, aa, aa, aa, aa, aa, aa, aa, aa, aa, aa, f0, aa, aa, aa,  }
VLD1_LANE/VLD1_LANEQ:21:result_poly16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, fff0, aaaa,  }
VLD1_LANE/VLD1_LANEQ:22:result_float32x4 [] = { aaaaaaaa, aaaaaaaa, c1800000, aaaaaaaa,  }
VLD1_LANE/VLD1_LANEQ:23:result_float16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, cc00, aaaa, aaaa,  }

VLD1_DUP/VLD1_DUPQ output:
VLD1_DUP/VLD1_DUPQ:0:result_int8x8 [] = { fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0,  }
VLD1_DUP/VLD1_DUPQ:1:result_int16x4 [] = { fffffff0, fffffff0, fffffff0, fffffff0,  }
VLD1_DUP/VLD1_DUPQ:2:result_int32x2 [] = { fffffff0, fffffff0,  }
VLD1_DUP/VLD1_DUPQ:3:result_int64x1 [] = { fffffffffffffff0,  }
VLD1_DUP/VLD1_DUPQ:4:result_uint8x8 [] = { f0, f0, f0, f0, f0, f0, f0, f0,  }
VLD1_DUP/VLD1_DUPQ:5:result_uint16x4 [] = { fff0, fff0, fff0, fff0,  }
VLD1_DUP/VLD1_DUPQ:6:result_uint32x2 [] = { fffffff0, fffffff0,  }
VLD1_DUP/VLD1_DUPQ:7:result_uint64x1 [] = { fffffffffffffff0,  }
VLD1_DUP/VLD1_DUPQ:8:result_poly8x8 [] = { f0, f0, f0, f0, f0, f0, f0, f0,  }
VLD1_DUP/VLD1_DUPQ:9:result_poly16x4 [] = { fff0, fff0, fff0, fff0,  }
VLD1_DUP/VLD1_DUPQ:10:result_float32x2 [] = { c1800000, c1800000,  }
VLD1_DUP/VLD1_DUPQ:11:result_float16x4 [] = { cc00, cc00, cc00, cc00,  }
VLD1_DUP/VLD1_DUPQ:12:result_int8x16 [] = { fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0,  }
VLD1_DUP/VLD1_DUPQ:13:result_int16x8 [] = { fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0,  }
VLD1_DUP/VLD1_DUPQ:14:result_int32x4 [] = { fffffff0, fffffff0, fffffff0, fffffff0,  }
VLD1_DUP/VLD1_DUPQ:15:result_int64x2 [] = { fffffffffffffff0, fffffffffffffff0,  }
VLD1_DUP/VLD1_DUPQ:16:result_uint8x16 [] = { f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0,  }
VLD1_DUP/VLD1_DUPQ:17:result_uint16x8 [] = { fff0, fff0, fff0, fff0, fff0, fff0, fff0, fff0,  }
VLD1_DUP/VLD1_DUPQ:18:result_uint32x4 [] = { fffffff0, fffffff0, fffffff0, fffffff0,  }
VLD1_DUP/VLD1_DUPQ:19:result_uint64x2 [] = { fffffffffffffff0, fffffffffffffff0,  }
VLD1_DUP/VLD1_DUPQ:20:result_poly8x16 [] = { f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0,  }
VLD1_DUP/VLD1_DUPQ:21:result_poly16x8 [] = { fff0, fff0, fff0, fff0, fff0, fff0, fff0, fff0,  }
VLD1_DUP/VLD1_DUPQ:22:result_float32x4 [] = { c1800000, c1800000, c1800000, c1800000,  }
VLD1_DUP/VLD1_DUPQ:23:result_float16x8 [] = { cc00, cc00, cc00, cc00, cc00, cc00, cc00, cc00,  }

VLD1_DUP/VLD1_DUPQ output:
VLD1_DUP/VLD1_DUPQ:0:result_int8x8 [] = { fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1,  }
VLD1_DUP/VLD1_DUPQ:1:result_int16x4 [] = { fffffff1, fffffff1, fffffff1, fffffff1,  }
VLD1_DUP/VLD1_DUPQ:2:result_int32x2 [] = { fffffff1, fffffff1,  }
VLD1_DUP/VLD1_DUPQ:3:result_int64x1 [] = { fffffffffffffff1,  }
VLD1_DUP/VLD1_DUPQ:4:result_uint8x8 [] = { f1, f1, f1, f1, f1, f1, f1, f1,  }
VLD1_DUP/VLD1_DUPQ:5:result_uint16x4 [] = { fff1, fff1, fff1, fff1,  }
VLD1_DUP/VLD1_DUPQ:6:result_uint32x2 [] = { fffffff1, fffffff1,  }
VLD1_DUP/VLD1_DUPQ:7:result_uint64x1 [] = { fffffffffffffff1,  }
VLD1_DUP/VLD1_DUPQ:8:result_poly8x8 [] = { f1, f1, f1, f1, f1, f1, f1, f1,  }
VLD1_DUP/VLD1_DUPQ:9:result_poly16x4 [] = { fff1, fff1, fff1, fff1,  }
VLD1_DUP/VLD1_DUPQ:10:result_float32x2 [] = { c1700000, c1700000,  }
VLD1_DUP/VLD1_DUPQ:11:result_float16x4 [] = { cb80, cb80, cb80, cb80,  }
VLD1_DUP/VLD1_DUPQ:12:result_int8x16 [] = { fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1,  }
VLD1_DUP/VLD1_DUPQ:13:result_int16x8 [] = { fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1,  }
VLD1_DUP/VLD1_DUPQ:14:result_int32x4 [] = { fffffff1, fffffff1, fffffff1, fffffff1,  }
VLD1_DUP/VLD1_DUPQ:15:result_int64x2 [] = { fffffffffffffff1, fffffffffffffff1,  }
VLD1_DUP/VLD1_DUPQ:16:result_uint8x16 [] = { f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1,  }
VLD1_DUP/VLD1_DUPQ:17:result_uint16x8 [] = { fff1, fff1, fff1, fff1, fff1, fff1, fff1, fff1,  }
VLD1_DUP/VLD1_DUPQ:18:result_uint32x4 [] = { fffffff1, fffffff1, fffffff1, fffffff1,  }
VLD1_DUP/VLD1_DUPQ:19:result_uint64x2 [] = { fffffffffffffff1, fffffffffffffff1,  }
VLD1_DUP/VLD1_DUPQ:20:result_poly8x16 [] = { f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1,  }
VLD1_DUP/VLD1_DUPQ:21:result_poly16x8 [] = { fff1, fff1, fff1, fff1, fff1, fff1, fff1, fff1,  }
VLD1_DUP/VLD1_DUPQ:22:result_float32x4 [] = { c1700000, c1700000, c1700000, c1700000,  }
VLD1_DUP/VLD1_DUPQ:23:result_float16x8 [] = { cb80, cb80, cb80, cb80, cb80, cb80, cb80, cb80,  }

VLD1_DUP/VLD1_DUPQ output:
VLD1_DUP/VLD1_DUPQ:0:result_int8x8 [] = { fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2,  }
VLD1_DUP/VLD1_DUPQ:1:result_int16x4 [] = { fffffff2, fffffff2, fffffff2, fffffff2,  }
VLD1_DUP/VLD1_DUPQ:2:result_int32x2 [] = { fffffff2, fffffff2,  }
VLD1_DUP/VLD1_DUPQ:3:result_int64x1 [] = { fffffffffffffff2,  }
VLD1_DUP/VLD1_DUPQ:4:result_uint8x8 [] = { f2, f2, f2, f2, f2, f2, f2, f2,  }
VLD1_DUP/VLD1_DUPQ:5:result_uint16x4 [] = { fff2, fff2, fff2, fff2,  }
VLD1_DUP/VLD1_DUPQ:6:result_uint32x2 [] = { fffffff2, fffffff2,  }
VLD1_DUP/VLD1_DUPQ:7:result_uint64x1 [] = { fffffffffffffff2,  }
VLD1_DUP/VLD1_DUPQ:8:result_poly8x8 [] = { f2, f2, f2, f2, f2, f2, f2, f2,  }
VLD1_DUP/VLD1_DUPQ:9:result_poly16x4 [] = { fff2, fff2, fff2, fff2,  }
VLD1_DUP/VLD1_DUPQ:10:result_float32x2 [] = { c1600000, c1600000,  }
VLD1_DUP/VLD1_DUPQ:11:result_float16x4 [] = { cb00, cb00, cb00, cb00,  }
VLD1_DUP/VLD1_DUPQ:12:result_int8x16 [] = { fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2,  }
VLD1_DUP/VLD1_DUPQ:13:result_int16x8 [] = { fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2,  }
VLD1_DUP/VLD1_DUPQ:14:result_int32x4 [] = { fffffff2, fffffff2, fffffff2, fffffff2,  }
VLD1_DUP/VLD1_DUPQ:15:result_int64x2 [] = { fffffffffffffff2, fffffffffffffff2,  }
VLD1_DUP/VLD1_DUPQ:16:result_uint8x16 [] = { f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2,  }
VLD1_DUP/VLD1_DUPQ:17:result_uint16x8 [] = { fff2, fff2, fff2, fff2, fff2, fff2, fff2, fff2,  }
VLD1_DUP/VLD1_DUPQ:18:result_uint32x4 [] = { fffffff2, fffffff2, fffffff2, fffffff2,  }
VLD1_DUP/VLD1_DUPQ:19:result_uint64x2 [] = { fffffffffffffff2, fffffffffffffff2,  }
VLD1_DUP/VLD1_DUPQ:20:result_poly8x16 [] = { f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2,  }
VLD1_DUP/VLD1_DUPQ:21:result_poly16x8 [] = { fff2, fff2, fff2, fff2, fff2, fff2, fff2, fff2,  }
VLD1_DUP/VLD1_DUPQ:22:result_float32x4 [] = { c1600000, c1600000, c1600000, c1600000,  }
VLD1_DUP/VLD1_DUPQ:23:result_float16x8 [] = { cb00, cb00, cb00, cb00, cb00, cb00, cb00, cb00,  }

VDUP/VDUPQ output:
VDUP/VDUPQ:0:result_int8x8 [] = { fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0,  }
VDUP/VDUPQ:1:result_int16x4 [] = { fffffff0, fffffff0, fffffff0, fffffff0,  }
VDUP/VDUPQ:2:result_int32x2 [] = { fffffff0, fffffff0,  }
VDUP/VDUPQ:3:result_int64x1 [] = { fffffffffffffff0,  }
VDUP/VDUPQ:4:result_uint8x8 [] = { f0, f0, f0, f0, f0, f0, f0, f0,  }
VDUP/VDUPQ:5:result_uint16x4 [] = { fff0, fff0, fff0, fff0,  }
VDUP/VDUPQ:6:result_uint32x2 [] = { fffffff0, fffffff0,  }
VDUP/VDUPQ:7:result_uint64x1 [] = { fffffffffffffff0,  }
VDUP/VDUPQ:8:result_poly8x8 [] = { f0, f0, f0, f0, f0, f0, f0, f0,  }
VDUP/VDUPQ:9:result_poly16x4 [] = { fff0, fff0, fff0, fff0,  }
VDUP/VDUPQ:10:result_float32x2 [] = { c1800000, c1800000,  }
VDUP/VDUPQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VDUP/VDUPQ:12:result_int8x16 [] = { fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0,  }
VDUP/VDUPQ:13:result_int16x8 [] = { fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0,  }
VDUP/VDUPQ:14:result_int32x4 [] = { fffffff0, fffffff0, fffffff0, fffffff0,  }
VDUP/VDUPQ:15:result_int64x2 [] = { fffffffffffffff0, fffffffffffffff0,  }
VDUP/VDUPQ:16:result_uint8x16 [] = { f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0,  }
VDUP/VDUPQ:17:result_uint16x8 [] = { fff0, fff0, fff0, fff0, fff0, fff0, fff0, fff0,  }
VDUP/VDUPQ:18:result_uint32x4 [] = { fffffff0, fffffff0, fffffff0, fffffff0,  }
VDUP/VDUPQ:19:result_uint64x2 [] = { fffffffffffffff0, fffffffffffffff0,  }
VDUP/VDUPQ:20:result_poly8x16 [] = { f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0,  }
VDUP/VDUPQ:21:result_poly16x8 [] = { fff0, fff0, fff0, fff0, fff0, fff0, fff0, fff0,  }
VDUP/VDUPQ:22:result_float32x4 [] = { c1800000, c1800000, c1800000, c1800000,  }
VDUP/VDUPQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VDUP/VDUPQ output:
VDUP/VDUPQ:0:result_int8x8 [] = { fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1,  }
VDUP/VDUPQ:1:result_int16x4 [] = { fffffff1, fffffff1, fffffff1, fffffff1,  }
VDUP/VDUPQ:2:result_int32x2 [] = { fffffff1, fffffff1,  }
VDUP/VDUPQ:3:result_int64x1 [] = { fffffffffffffff1,  }
VDUP/VDUPQ:4:result_uint8x8 [] = { f1, f1, f1, f1, f1, f1, f1, f1,  }
VDUP/VDUPQ:5:result_uint16x4 [] = { fff1, fff1, fff1, fff1,  }
VDUP/VDUPQ:6:result_uint32x2 [] = { fffffff1, fffffff1,  }
VDUP/VDUPQ:7:result_uint64x1 [] = { fffffffffffffff1,  }
VDUP/VDUPQ:8:result_poly8x8 [] = { f1, f1, f1, f1, f1, f1, f1, f1,  }
VDUP/VDUPQ:9:result_poly16x4 [] = { fff1, fff1, fff1, fff1,  }
VDUP/VDUPQ:10:result_float32x2 [] = { c1700000, c1700000,  }
VDUP/VDUPQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VDUP/VDUPQ:12:result_int8x16 [] = { fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1,  }
VDUP/VDUPQ:13:result_int16x8 [] = { fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1,  }
VDUP/VDUPQ:14:result_int32x4 [] = { fffffff1, fffffff1, fffffff1, fffffff1,  }
VDUP/VDUPQ:15:result_int64x2 [] = { fffffffffffffff1, fffffffffffffff1,  }
VDUP/VDUPQ:16:result_uint8x16 [] = { f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1,  }
VDUP/VDUPQ:17:result_uint16x8 [] = { fff1, fff1, fff1, fff1, fff1, fff1, fff1, fff1,  }
VDUP/VDUPQ:18:result_uint32x4 [] = { fffffff1, fffffff1, fffffff1, fffffff1,  }
VDUP/VDUPQ:19:result_uint64x2 [] = { fffffffffffffff1, fffffffffffffff1,  }
VDUP/VDUPQ:20:result_poly8x16 [] = { f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1,  }
VDUP/VDUPQ:21:result_poly16x8 [] = { fff1, fff1, fff1, fff1, fff1, fff1, fff1, fff1,  }
VDUP/VDUPQ:22:result_float32x4 [] = { c1700000, c1700000, c1700000, c1700000,  }
VDUP/VDUPQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VDUP/VDUPQ output:
VDUP/VDUPQ:0:result_int8x8 [] = { fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2,  }
VDUP/VDUPQ:1:result_int16x4 [] = { fffffff2, fffffff2, fffffff2, fffffff2,  }
VDUP/VDUPQ:2:result_int32x2 [] = { fffffff2, fffffff2,  }
VDUP/VDUPQ:3:result_int64x1 [] = { fffffffffffffff2,  }
VDUP/VDUPQ:4:result_uint8x8 [] = { f2, f2, f2, f2, f2, f2, f2, f2,  }
VDUP/VDUPQ:5:result_uint16x4 [] = { fff2, fff2, fff2, fff2,  }
VDUP/VDUPQ:6:result_uint32x2 [] = { fffffff2, fffffff2,  }
VDUP/VDUPQ:7:result_uint64x1 [] = { fffffffffffffff2,  }
VDUP/VDUPQ:8:result_poly8x8 [] = { f2, f2, f2, f2, f2, f2, f2, f2,  }
VDUP/VDUPQ:9:result_poly16x4 [] = { fff2, fff2, fff2, fff2,  }
VDUP/VDUPQ:10:result_float32x2 [] = { c1600000, c1600000,  }
VDUP/VDUPQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VDUP/VDUPQ:12:result_int8x16 [] = { fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2,  }
VDUP/VDUPQ:13:result_int16x8 [] = { fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2,  }
VDUP/VDUPQ:14:result_int32x4 [] = { fffffff2, fffffff2, fffffff2, fffffff2,  }
VDUP/VDUPQ:15:result_int64x2 [] = { fffffffffffffff2, fffffffffffffff2,  }
VDUP/VDUPQ:16:result_uint8x16 [] = { f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2,  }
VDUP/VDUPQ:17:result_uint16x8 [] = { fff2, fff2, fff2, fff2, fff2, fff2, fff2, fff2,  }
VDUP/VDUPQ:18:result_uint32x4 [] = { fffffff2, fffffff2, fffffff2, fffffff2,  }
VDUP/VDUPQ:19:result_uint64x2 [] = { fffffffffffffff2, fffffffffffffff2,  }
VDUP/VDUPQ:20:result_poly8x16 [] = { f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2,  }
VDUP/VDUPQ:21:result_poly16x8 [] = { fff2, fff2, fff2, fff2, fff2, fff2, fff2, fff2,  }
VDUP/VDUPQ:22:result_float32x4 [] = { c1600000, c1600000, c1600000, c1600000,  }
VDUP/VDUPQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMOV/VMOVQ output:
VMOV/VMOVQ:0:result_int8x8 [] = { fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0,  }
VMOV/VMOVQ:1:result_int16x4 [] = { fffffff0, fffffff0, fffffff0, fffffff0,  }
VMOV/VMOVQ:2:result_int32x2 [] = { fffffff0, fffffff0,  }
VMOV/VMOVQ:3:result_int64x1 [] = { fffffffffffffff0,  }
VMOV/VMOVQ:4:result_uint8x8 [] = { f0, f0, f0, f0, f0, f0, f0, f0,  }
VMOV/VMOVQ:5:result_uint16x4 [] = { fff0, fff0, fff0, fff0,  }
VMOV/VMOVQ:6:result_uint32x2 [] = { fffffff0, fffffff0,  }
VMOV/VMOVQ:7:result_uint64x1 [] = { fffffffffffffff0,  }
VMOV/VMOVQ:8:result_poly8x8 [] = { f0, f0, f0, f0, f0, f0, f0, f0,  }
VMOV/VMOVQ:9:result_poly16x4 [] = { fff0, fff0, fff0, fff0,  }
VMOV/VMOVQ:10:result_float32x2 [] = { c1800000, c1800000,  }
VMOV/VMOVQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMOV/VMOVQ:12:result_int8x16 [] = { fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0,  }
VMOV/VMOVQ:13:result_int16x8 [] = { fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0,  }
VMOV/VMOVQ:14:result_int32x4 [] = { fffffff0, fffffff0, fffffff0, fffffff0,  }
VMOV/VMOVQ:15:result_int64x2 [] = { fffffffffffffff0, fffffffffffffff0,  }
VMOV/VMOVQ:16:result_uint8x16 [] = { f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0,  }
VMOV/VMOVQ:17:result_uint16x8 [] = { fff0, fff0, fff0, fff0, fff0, fff0, fff0, fff0,  }
VMOV/VMOVQ:18:result_uint32x4 [] = { fffffff0, fffffff0, fffffff0, fffffff0,  }
VMOV/VMOVQ:19:result_uint64x2 [] = { fffffffffffffff0, fffffffffffffff0,  }
VMOV/VMOVQ:20:result_poly8x16 [] = { f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0, f0,  }
VMOV/VMOVQ:21:result_poly16x8 [] = { fff0, fff0, fff0, fff0, fff0, fff0, fff0, fff0,  }
VMOV/VMOVQ:22:result_float32x4 [] = { c1800000, c1800000, c1800000, c1800000,  }
VMOV/VMOVQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMOV/VMOVQ output:
VMOV/VMOVQ:0:result_int8x8 [] = { fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1,  }
VMOV/VMOVQ:1:result_int16x4 [] = { fffffff1, fffffff1, fffffff1, fffffff1,  }
VMOV/VMOVQ:2:result_int32x2 [] = { fffffff1, fffffff1,  }
VMOV/VMOVQ:3:result_int64x1 [] = { fffffffffffffff1,  }
VMOV/VMOVQ:4:result_uint8x8 [] = { f1, f1, f1, f1, f1, f1, f1, f1,  }
VMOV/VMOVQ:5:result_uint16x4 [] = { fff1, fff1, fff1, fff1,  }
VMOV/VMOVQ:6:result_uint32x2 [] = { fffffff1, fffffff1,  }
VMOV/VMOVQ:7:result_uint64x1 [] = { fffffffffffffff1,  }
VMOV/VMOVQ:8:result_poly8x8 [] = { f1, f1, f1, f1, f1, f1, f1, f1,  }
VMOV/VMOVQ:9:result_poly16x4 [] = { fff1, fff1, fff1, fff1,  }
VMOV/VMOVQ:10:result_float32x2 [] = { c1700000, c1700000,  }
VMOV/VMOVQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMOV/VMOVQ:12:result_int8x16 [] = { fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1,  }
VMOV/VMOVQ:13:result_int16x8 [] = { fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1,  }
VMOV/VMOVQ:14:result_int32x4 [] = { fffffff1, fffffff1, fffffff1, fffffff1,  }
VMOV/VMOVQ:15:result_int64x2 [] = { fffffffffffffff1, fffffffffffffff1,  }
VMOV/VMOVQ:16:result_uint8x16 [] = { f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1,  }
VMOV/VMOVQ:17:result_uint16x8 [] = { fff1, fff1, fff1, fff1, fff1, fff1, fff1, fff1,  }
VMOV/VMOVQ:18:result_uint32x4 [] = { fffffff1, fffffff1, fffffff1, fffffff1,  }
VMOV/VMOVQ:19:result_uint64x2 [] = { fffffffffffffff1, fffffffffffffff1,  }
VMOV/VMOVQ:20:result_poly8x16 [] = { f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1, f1,  }
VMOV/VMOVQ:21:result_poly16x8 [] = { fff1, fff1, fff1, fff1, fff1, fff1, fff1, fff1,  }
VMOV/VMOVQ:22:result_float32x4 [] = { c1700000, c1700000, c1700000, c1700000,  }
VMOV/VMOVQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMOV/VMOVQ output:
VMOV/VMOVQ:0:result_int8x8 [] = { fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2,  }
VMOV/VMOVQ:1:result_int16x4 [] = { fffffff2, fffffff2, fffffff2, fffffff2,  }
VMOV/VMOVQ:2:result_int32x2 [] = { fffffff2, fffffff2,  }
VMOV/VMOVQ:3:result_int64x1 [] = { fffffffffffffff2,  }
VMOV/VMOVQ:4:result_uint8x8 [] = { f2, f2, f2, f2, f2, f2, f2, f2,  }
VMOV/VMOVQ:5:result_uint16x4 [] = { fff2, fff2, fff2, fff2,  }
VMOV/VMOVQ:6:result_uint32x2 [] = { fffffff2, fffffff2,  }
VMOV/VMOVQ:7:result_uint64x1 [] = { fffffffffffffff2,  }
VMOV/VMOVQ:8:result_poly8x8 [] = { f2, f2, f2, f2, f2, f2, f2, f2,  }
VMOV/VMOVQ:9:result_poly16x4 [] = { fff2, fff2, fff2, fff2,  }
VMOV/VMOVQ:10:result_float32x2 [] = { c1600000, c1600000,  }
VMOV/VMOVQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMOV/VMOVQ:12:result_int8x16 [] = { fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2,  }
VMOV/VMOVQ:13:result_int16x8 [] = { fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2,  }
VMOV/VMOVQ:14:result_int32x4 [] = { fffffff2, fffffff2, fffffff2, fffffff2,  }
VMOV/VMOVQ:15:result_int64x2 [] = { fffffffffffffff2, fffffffffffffff2,  }
VMOV/VMOVQ:16:result_uint8x16 [] = { f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2,  }
VMOV/VMOVQ:17:result_uint16x8 [] = { fff2, fff2, fff2, fff2, fff2, fff2, fff2, fff2,  }
VMOV/VMOVQ:18:result_uint32x4 [] = { fffffff2, fffffff2, fffffff2, fffffff2,  }
VMOV/VMOVQ:19:result_uint64x2 [] = { fffffffffffffff2, fffffffffffffff2,  }
VMOV/VMOVQ:20:result_poly8x16 [] = { f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2, f2,  }
VMOV/VMOVQ:21:result_poly16x8 [] = { fff2, fff2, fff2, fff2, fff2, fff2, fff2, fff2,  }
VMOV/VMOVQ:22:result_float32x4 [] = { c1600000, c1600000, c1600000, c1600000,  }
VMOV/VMOVQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VGET_HIGH output:
VGET_HIGH:0:result_int8x8 [] = { fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff,  }
VGET_HIGH:1:result_int16x4 [] = { fffffff4, fffffff5, fffffff6, fffffff7,  }
VGET_HIGH:2:result_int32x2 [] = { fffffff2, fffffff3,  }
VGET_HIGH:3:result_int64x1 [] = { fffffffffffffff1,  }
VGET_HIGH:4:result_uint8x8 [] = { f8, f9, fa, fb, fc, fd, fe, ff,  }
VGET_HIGH:5:result_uint16x4 [] = { fff4, fff5, fff6, fff7,  }
VGET_HIGH:6:result_uint32x2 [] = { fffffff2, fffffff3,  }
VGET_HIGH:7:result_uint64x1 [] = { fffffffffffffff1,  }
VGET_HIGH:8:result_poly8x8 [] = { f8, f9, fa, fb, fc, fd, fe, ff,  }
VGET_HIGH:9:result_poly16x4 [] = { fff4, fff5, fff6, fff7,  }
VGET_HIGH:10:result_float32x2 [] = { c1600000, c1500000,  }
VGET_HIGH:11:result_float16x4 [] = { ca00, c980, c900, c880,  }
VGET_HIGH:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VGET_HIGH:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VGET_HIGH:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VGET_HIGH:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VGET_HIGH:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VGET_HIGH:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VGET_HIGH:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VGET_HIGH:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VGET_HIGH:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VGET_HIGH:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VGET_HIGH:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VGET_HIGH:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VGET_LOW output:
VGET_LOW:0:result_int8x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VGET_LOW:1:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VGET_LOW:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VGET_LOW:3:result_int64x1 [] = { fffffffffffffff0,  }
VGET_LOW:4:result_uint8x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VGET_LOW:5:result_uint16x4 [] = { fff0, fff1, fff2, fff3,  }
VGET_LOW:6:result_uint32x2 [] = { fffffff0, fffffff1,  }
VGET_LOW:7:result_uint64x1 [] = { fffffffffffffff0,  }
VGET_LOW:8:result_poly8x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VGET_LOW:9:result_poly16x4 [] = { fff0, fff1, fff2, fff3,  }
VGET_LOW:10:result_float32x2 [] = { c1800000, c1700000,  }
VGET_LOW:11:result_float16x4 [] = { cc00, cb80, cb00, ca80,  }
VGET_LOW:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VGET_LOW:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VGET_LOW:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VGET_LOW:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VGET_LOW:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VGET_LOW:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VGET_LOW:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VGET_LOW:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VGET_LOW:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VGET_LOW:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VGET_LOW:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VGET_LOW:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMLAL_LANE cumulative saturation output:
VQDMLAL_LANE:0:vqdmlal_lane_s16 Neon cumulative saturation 0
VQDMLAL_LANE:1:vqdmlal_lane_s32 Neon cumulative saturation 0

VQDMLAL_LANE output:
VQDMLAL_LANE:2:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_LANE:3:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL_LANE:4:result_int32x2 [] = { 33333333, 33333333,  }
VQDMLAL_LANE:5:result_int64x1 [] = { 3333333333333333,  }
VQDMLAL_LANE:6:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_LANE:7:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL_LANE:8:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMLAL_LANE:9:result_uint64x1 [] = { 3333333333333333,  }
VQDMLAL_LANE:10:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_LANE:11:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL_LANE:12:result_float32x2 [] = { 33333333, 33333333,  }
VQDMLAL_LANE:13:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMLAL_LANE:14:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_LANE:15:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL_LANE:16:result_int32x4 [] = { 7c1e, 7c1f, 7c20, 7c21,  }
VQDMLAL_LANE:17:result_int64x2 [] = { 7c1e, 7c1f,  }
VQDMLAL_LANE:18:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_LANE:19:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL_LANE:20:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLAL_LANE:21:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMLAL_LANE:22:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_LANE:23:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL_LANE:24:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLAL_LANE:25:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMLAL_LANE (mul with input=0) cumulative saturation output:
VQDMLAL_LANE:26:vqdmlal_lane_s16 Neon cumulative saturation 0
VQDMLAL_LANE:27:vqdmlal_lane_s32 Neon cumulative saturation 0

VQDMLAL_LANE (mul with input=0) output:
VQDMLAL_LANE:28:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_LANE:29:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL_LANE:30:result_int32x2 [] = { 33333333, 33333333,  }
VQDMLAL_LANE:31:result_int64x1 [] = { 3333333333333333,  }
VQDMLAL_LANE:32:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_LANE:33:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL_LANE:34:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMLAL_LANE:35:result_uint64x1 [] = { 3333333333333333,  }
VQDMLAL_LANE:36:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_LANE:37:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL_LANE:38:result_float32x2 [] = { 33333333, 33333333,  }
VQDMLAL_LANE:39:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMLAL_LANE:40:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_LANE:41:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL_LANE:42:result_int32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VQDMLAL_LANE:43:result_int64x2 [] = { fffffffffffffff0, fffffffffffffff1,  }
VQDMLAL_LANE:44:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_LANE:45:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL_LANE:46:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLAL_LANE:47:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMLAL_LANE:48:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_LANE:49:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL_LANE:50:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLAL_LANE:51:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMLAL_LANE (check mul cumulative saturation) cumulative saturation output:
VQDMLAL_LANE:52:vqdmlal_lane_s16 Neon cumulative saturation 1
VQDMLAL_LANE:53:vqdmlal_lane_s32 Neon cumulative saturation 1

VQDMLAL_LANE (check mul cumulative saturation) output:
VQDMLAL_LANE:54:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_LANE:55:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL_LANE:56:result_int32x2 [] = { 33333333, 33333333,  }
VQDMLAL_LANE:57:result_int64x1 [] = { 3333333333333333,  }
VQDMLAL_LANE:58:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_LANE:59:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL_LANE:60:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMLAL_LANE:61:result_uint64x1 [] = { 3333333333333333,  }
VQDMLAL_LANE:62:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_LANE:63:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL_LANE:64:result_float32x2 [] = { 33333333, 33333333,  }
VQDMLAL_LANE:65:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMLAL_LANE:66:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_LANE:67:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL_LANE:68:result_int32x4 [] = { 7fffffef, 7ffffff0, 7ffffff1, 7ffffff2,  }
VQDMLAL_LANE:69:result_int64x2 [] = { 7fffffffffffffef, 7ffffffffffffff0,  }
VQDMLAL_LANE:70:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_LANE:71:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL_LANE:72:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLAL_LANE:73:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMLAL_LANE:74:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_LANE:75:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL_LANE:76:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLAL_LANE:77:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMLSL_LANE cumulative saturation output:
VQDMLSL_LANE:0:vqdmlsl_lane_s16 Neon cumulative saturation 0
VQDMLSL_LANE:1:vqdmlsl_lane_s32 Neon cumulative saturation 0

VQDMLSL_LANE output:
VQDMLSL_LANE:2:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_LANE:3:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL_LANE:4:result_int32x2 [] = { 33333333, 33333333,  }
VQDMLSL_LANE:5:result_int64x1 [] = { 3333333333333333,  }
VQDMLSL_LANE:6:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_LANE:7:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL_LANE:8:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMLSL_LANE:9:result_uint64x1 [] = { 3333333333333333,  }
VQDMLSL_LANE:10:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_LANE:11:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL_LANE:12:result_float32x2 [] = { 33333333, 33333333,  }
VQDMLSL_LANE:13:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMLSL_LANE:14:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_LANE:15:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL_LANE:16:result_int32x4 [] = { ffff83c2, ffff83c3, ffff83c4, ffff83c5,  }
VQDMLSL_LANE:17:result_int64x2 [] = { ffffffffffff83c2, ffffffffffff83c3,  }
VQDMLSL_LANE:18:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_LANE:19:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL_LANE:20:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLSL_LANE:21:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMLSL_LANE:22:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_LANE:23:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL_LANE:24:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLSL_LANE:25:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMLSL_LANE (mul with input=0) cumulative saturation output:
VQDMLSL_LANE:26:vqdmlsl_lane_s16 Neon cumulative saturation 0
VQDMLSL_LANE:27:vqdmlsl_lane_s32 Neon cumulative saturation 0

VQDMLSL_LANE (mul with input=0) output:
VQDMLSL_LANE:28:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_LANE:29:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL_LANE:30:result_int32x2 [] = { 33333333, 33333333,  }
VQDMLSL_LANE:31:result_int64x1 [] = { 3333333333333333,  }
VQDMLSL_LANE:32:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_LANE:33:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL_LANE:34:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMLSL_LANE:35:result_uint64x1 [] = { 3333333333333333,  }
VQDMLSL_LANE:36:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_LANE:37:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL_LANE:38:result_float32x2 [] = { 33333333, 33333333,  }
VQDMLSL_LANE:39:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMLSL_LANE:40:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_LANE:41:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL_LANE:42:result_int32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VQDMLSL_LANE:43:result_int64x2 [] = { fffffffffffffff0, fffffffffffffff1,  }
VQDMLSL_LANE:44:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_LANE:45:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL_LANE:46:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLSL_LANE:47:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMLSL_LANE:48:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_LANE:49:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL_LANE:50:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLSL_LANE:51:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMLSL_LANE (check mul cumulative saturation) cumulative saturation output:
VQDMLSL_LANE:52:vqdmlsl_lane_s16 Neon cumulative saturation 1
VQDMLSL_LANE:53:vqdmlsl_lane_s32 Neon cumulative saturation 1

VQDMLSL_LANE (check mul cumulative saturation) output:
VQDMLSL_LANE:54:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_LANE:55:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL_LANE:56:result_int32x2 [] = { 33333333, 33333333,  }
VQDMLSL_LANE:57:result_int64x1 [] = { 3333333333333333,  }
VQDMLSL_LANE:58:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_LANE:59:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL_LANE:60:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMLSL_LANE:61:result_uint64x1 [] = { 3333333333333333,  }
VQDMLSL_LANE:62:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_LANE:63:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL_LANE:64:result_float32x2 [] = { 33333333, 33333333,  }
VQDMLSL_LANE:65:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMLSL_LANE:66:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_LANE:67:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL_LANE:68:result_int32x4 [] = { 80000000, 80000000, 80000000, 80000000,  }
VQDMLSL_LANE:69:result_int64x2 [] = { 8000000000000000, 8000000000000000,  }
VQDMLSL_LANE:70:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_LANE:71:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL_LANE:72:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLSL_LANE:73:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMLSL_LANE:74:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_LANE:75:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL_LANE:76:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLSL_LANE:77:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMLAL_N cumulative saturation output:
VQDMLAL_N:0:vqdmlal_n_s16 Neon cumulative saturation 0
VQDMLAL_N:1:vqdmlal_n_s32 Neon cumulative saturation 0

VQDMLAL_N output:
VQDMLAL_N:2:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_N:3:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL_N:4:result_int32x2 [] = { 33333333, 33333333,  }
VQDMLAL_N:5:result_int64x1 [] = { 3333333333333333,  }
VQDMLAL_N:6:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_N:7:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL_N:8:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMLAL_N:9:result_uint64x1 [] = { 3333333333333333,  }
VQDMLAL_N:10:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_N:11:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL_N:12:result_float32x2 [] = { 33333333, 33333333,  }
VQDMLAL_N:13:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMLAL_N:14:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_N:15:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL_N:16:result_int32x4 [] = { 1684, 1685, 1686, 1687,  }
VQDMLAL_N:17:result_int64x2 [] = { 21ce, 21cf,  }
VQDMLAL_N:18:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_N:19:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL_N:20:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLAL_N:21:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMLAL_N:22:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_N:23:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL_N:24:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLAL_N:25:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMLAL_N (check mul cumulative saturation) cumulative saturation output:
VQDMLAL_N:26:vqdmlal_n_s16 Neon cumulative saturation 1
VQDMLAL_N:27:vqdmlal_n_s32 Neon cumulative saturation 1

VQDMLAL_N (check mul cumulative saturation) output:
VQDMLAL_N:28:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_N:29:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL_N:30:result_int32x2 [] = { 33333333, 33333333,  }
VQDMLAL_N:31:result_int64x1 [] = { 3333333333333333,  }
VQDMLAL_N:32:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_N:33:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL_N:34:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMLAL_N:35:result_uint64x1 [] = { 3333333333333333,  }
VQDMLAL_N:36:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_N:37:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL_N:38:result_float32x2 [] = { 33333333, 33333333,  }
VQDMLAL_N:39:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMLAL_N:40:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_N:41:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL_N:42:result_int32x4 [] = { 7fffffef, 7ffffff0, 7ffffff1, 7ffffff2,  }
VQDMLAL_N:43:result_int64x2 [] = { 7fffffffffffffef, 7ffffffffffffff0,  }
VQDMLAL_N:44:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_N:45:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL_N:46:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLAL_N:47:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMLAL_N:48:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL_N:49:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL_N:50:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLAL_N:51:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMLSL_N cumulative saturation output:
VQDMLSL_N:0:vqdmlsl_n_s16 Neon cumulative saturation 0
VQDMLSL_N:1:vqdmlsl_n_s32 Neon cumulative saturation 0

VQDMLSL_N output:
VQDMLSL_N:2:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_N:3:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL_N:4:result_int32x2 [] = { 33333333, 33333333,  }
VQDMLSL_N:5:result_int64x1 [] = { 3333333333333333,  }
VQDMLSL_N:6:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_N:7:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL_N:8:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMLSL_N:9:result_uint64x1 [] = { 3333333333333333,  }
VQDMLSL_N:10:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_N:11:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL_N:12:result_float32x2 [] = { 33333333, 33333333,  }
VQDMLSL_N:13:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMLSL_N:14:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_N:15:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL_N:16:result_int32x4 [] = { ffffe95c, ffffe95d, ffffe95e, ffffe95f,  }
VQDMLSL_N:17:result_int64x2 [] = { ffffffffffffde12, ffffffffffffde13,  }
VQDMLSL_N:18:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_N:19:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL_N:20:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLSL_N:21:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMLSL_N:22:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_N:23:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL_N:24:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLSL_N:25:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMLSL_N (check mul cumulative saturation) cumulative saturation output:
VQDMLSL_N:26:vqdmlsl_n_s16 Neon cumulative saturation 1
VQDMLSL_N:27:vqdmlsl_n_s32 Neon cumulative saturation 1

VQDMLSL_N (check mul cumulative saturation) output:
VQDMLSL_N:28:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_N:29:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL_N:30:result_int32x2 [] = { 33333333, 33333333,  }
VQDMLSL_N:31:result_int64x1 [] = { 3333333333333333,  }
VQDMLSL_N:32:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_N:33:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL_N:34:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMLSL_N:35:result_uint64x1 [] = { 3333333333333333,  }
VQDMLSL_N:36:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_N:37:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL_N:38:result_float32x2 [] = { 33333333, 33333333,  }
VQDMLSL_N:39:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMLSL_N:40:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_N:41:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL_N:42:result_int32x4 [] = { 80000000, 80000000, 80000000, 80000000,  }
VQDMLSL_N:43:result_int64x2 [] = { 8000000000000000, 8000000000000000,  }
VQDMLSL_N:44:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_N:45:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL_N:46:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLSL_N:47:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMLSL_N:48:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL_N:49:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL_N:50:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLSL_N:51:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VEXT/VEXTQ output:
VEXT/VEXTQ:0:result_int8x8 [] = { fffffff7, 11, 11, 11, 11, 11, 11, 11,  }
VEXT/VEXTQ:1:result_int16x4 [] = { fffffff3, 22, 22, 22,  }
VEXT/VEXTQ:2:result_int32x2 [] = { fffffff1, 33,  }
VEXT/VEXTQ:3:result_int64x1 [] = { fffffffffffffff0,  }
VEXT/VEXTQ:4:result_uint8x8 [] = { f6, f7, 55, 55, 55, 55, 55, 55,  }
VEXT/VEXTQ:5:result_uint16x4 [] = { fff2, fff3, 66, 66,  }
VEXT/VEXTQ:6:result_uint32x2 [] = { fffffff1, 77,  }
VEXT/VEXTQ:7:result_uint64x1 [] = { fffffffffffffff0,  }
VEXT/VEXTQ:8:result_poly8x8 [] = { f6, f7, 55, 55, 55, 55, 55, 55,  }
VEXT/VEXTQ:9:result_poly16x4 [] = { fff2, fff3, 66, 66,  }
VEXT/VEXTQ:10:result_float32x2 [] = { c1700000, 42066666,  }
VEXT/VEXTQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VEXT/VEXTQ:12:result_int8x16 [] = { fffffffe, ffffffff, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,  }
VEXT/VEXTQ:13:result_int16x8 [] = { fffffff7, 22, 22, 22, 22, 22, 22, 22,  }
VEXT/VEXTQ:14:result_int32x4 [] = { fffffff3, 33, 33, 33,  }
VEXT/VEXTQ:15:result_int64x2 [] = { fffffffffffffff1, 44,  }
VEXT/VEXTQ:16:result_uint8x16 [] = { fc, fd, fe, ff, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,  }
VEXT/VEXTQ:17:result_uint16x8 [] = { fff6, fff7, 66, 66, 66, 66, 66, 66,  }
VEXT/VEXTQ:18:result_uint32x4 [] = { fffffff3, 77, 77, 77,  }
VEXT/VEXTQ:19:result_uint64x2 [] = { fffffffffffffff1, 88,  }
VEXT/VEXTQ:20:result_poly8x16 [] = { fc, fd, fe, ff, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,  }
VEXT/VEXTQ:21:result_poly16x8 [] = { fff6, fff7, 66, 66, 66, 66, 66, 66,  }
VEXT/VEXTQ:22:result_float32x4 [] = { c1500000, 4204cccd, 4204cccd, 4204cccd,  }
VEXT/VEXTQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VSHR_N output:
VSHR_N:0:result_int8x8 [] = { fffffff8, fffffff8, fffffff9, fffffff9, fffffffa, fffffffa, fffffffb, fffffffb,  }
VSHR_N:1:result_int16x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }
VSHR_N:2:result_int32x2 [] = { fffffffc, fffffffc,  }
VSHR_N:3:result_int64x1 [] = { ffffffffffffffff,  }
VSHR_N:4:result_uint8x8 [] = { 3c, 3c, 3c, 3c, 3d, 3d, 3d, 3d,  }
VSHR_N:5:result_uint16x4 [] = { 1ffe, 1ffe, 1ffe, 1ffe,  }
VSHR_N:6:result_uint32x2 [] = { 7ffffff, 7ffffff,  }
VSHR_N:7:result_uint64x1 [] = { 7fffffff,  }
VSHR_N:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHR_N:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VSHR_N:10:result_float32x2 [] = { 33333333, 33333333,  }
VSHR_N:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VSHR_N:12:result_int8x16 [] = { fffffff8, fffffff8, fffffff9, fffffff9, fffffffa, fffffffa, fffffffb, fffffffb, fffffffc, fffffffc, fffffffd, fffffffd, fffffffe, fffffffe, ffffffff, ffffffff,  }
VSHR_N:13:result_int16x8 [] = { ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff,  }
VSHR_N:14:result_int32x4 [] = { fffffffc, fffffffc, fffffffc, fffffffc,  }
VSHR_N:15:result_int64x2 [] = { ffffffffffffffff, ffffffffffffffff,  }
VSHR_N:16:result_uint8x16 [] = { 3c, 3c, 3c, 3c, 3d, 3d, 3d, 3d, 3e, 3e, 3e, 3e, 3f, 3f, 3f, 3f,  }
VSHR_N:17:result_uint16x8 [] = { 1ffe, 1ffe, 1ffe, 1ffe, 1ffe, 1ffe, 1ffe, 1ffe,  }
VSHR_N:18:result_uint32x4 [] = { 7ffffff, 7ffffff, 7ffffff, 7ffffff,  }
VSHR_N:19:result_uint64x2 [] = { 7fffffff, 7fffffff,  }
VSHR_N:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHR_N:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VSHR_N:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSHR_N:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VSHRN_N output:
VSHRN_N:0:result_int8x8 [] = { fffffff8, fffffff8, fffffff9, fffffff9, fffffffa, fffffffa, fffffffb, fffffffb,  }
VSHRN_N:1:result_int16x4 [] = { fffffff8, fffffff8, fffffff9, fffffff9,  }
VSHRN_N:2:result_int32x2 [] = { fffffffc, fffffffc,  }
VSHRN_N:3:result_int64x1 [] = { 3333333333333333,  }
VSHRN_N:4:result_uint8x8 [] = { fc, fc, fc, fc, fd, fd, fd, fd,  }
VSHRN_N:5:result_uint16x4 [] = { fffe, fffe, fffe, fffe,  }
VSHRN_N:6:result_uint32x2 [] = { fffffffe, fffffffe,  }
VSHRN_N:7:result_uint64x1 [] = { 3333333333333333,  }
VSHRN_N:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHRN_N:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VSHRN_N:10:result_float32x2 [] = { 33333333, 33333333,  }
VSHRN_N:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VSHRN_N:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHRN_N:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VSHRN_N:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSHRN_N:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VSHRN_N:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHRN_N:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VSHRN_N:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSHRN_N:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VSHRN_N:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHRN_N:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VSHRN_N:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSHRN_N:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSHRN_N (with input = 0) output:
VRSHRN_N:0:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHRN_N:1:result_int16x4 [] = { 0, 0, 0, 0,  }
VRSHRN_N:2:result_int32x2 [] = { 0, 0,  }
VRSHRN_N:3:result_int64x1 [] = { 3333333333333333,  }
VRSHRN_N:4:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHRN_N:5:result_uint16x4 [] = { 0, 0, 0, 0,  }
VRSHRN_N:6:result_uint32x2 [] = { 0, 0,  }
VRSHRN_N:7:result_uint64x1 [] = { 3333333333333333,  }
VRSHRN_N:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHRN_N:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSHRN_N:10:result_float32x2 [] = { 33333333, 33333333,  }
VRSHRN_N:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSHRN_N:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHRN_N:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHRN_N:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHRN_N:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VRSHRN_N:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHRN_N:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHRN_N:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHRN_N:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VRSHRN_N:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHRN_N:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHRN_N:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHRN_N:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSHRN_N output:
VRSHRN_N:24:result_int8x8 [] = { fffffff8, fffffff9, fffffff9, fffffffa, fffffffa, fffffffb, fffffffb, fffffffc,  }
VRSHRN_N:25:result_int16x4 [] = { fffffff8, fffffff9, fffffff9, fffffffa,  }
VRSHRN_N:26:result_int32x2 [] = { fffffffc, fffffffc,  }
VRSHRN_N:27:result_int64x1 [] = { 3333333333333333,  }
VRSHRN_N:28:result_uint8x8 [] = { fc, fc, fd, fd, fd, fd, fe, fe,  }
VRSHRN_N:29:result_uint16x4 [] = { fffe, fffe, fffe, fffe,  }
VRSHRN_N:30:result_uint32x2 [] = { fffffffe, fffffffe,  }
VRSHRN_N:31:result_uint64x1 [] = { 3333333333333333,  }
VRSHRN_N:32:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHRN_N:33:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSHRN_N:34:result_float32x2 [] = { 33333333, 33333333,  }
VRSHRN_N:35:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSHRN_N:36:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHRN_N:37:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHRN_N:38:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHRN_N:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VRSHRN_N:40:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHRN_N:41:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHRN_N:42:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHRN_N:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VRSHRN_N:44:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHRN_N:45:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHRN_N:46:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHRN_N:47:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSHRN_N (with large shift amount) output:
VRSHRN_N:48:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHRN_N:49:result_int16x4 [] = { 0, 0, 0, 0,  }
VRSHRN_N:50:result_int32x2 [] = { 0, 0,  }
VRSHRN_N:51:result_int64x1 [] = { 3333333333333333,  }
VRSHRN_N:52:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHRN_N:53:result_uint16x4 [] = { 0, 0, 0, 0,  }
VRSHRN_N:54:result_uint32x2 [] = { 0, 0,  }
VRSHRN_N:55:result_uint64x1 [] = { 3333333333333333,  }
VRSHRN_N:56:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHRN_N:57:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSHRN_N:58:result_float32x2 [] = { 33333333, 33333333,  }
VRSHRN_N:59:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSHRN_N:60:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHRN_N:61:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHRN_N:62:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHRN_N:63:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VRSHRN_N:64:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHRN_N:65:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHRN_N:66:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHRN_N:67:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VRSHRN_N:68:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHRN_N:69:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHRN_N:70:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHRN_N:71:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRSHRN_N cumulative saturation output:
VQRSHRN_N:0:vqrshrn_n_s16 Neon cumulative saturation 0
VQRSHRN_N:1:vqrshrn_n_s32 Neon cumulative saturation 0
VQRSHRN_N:2:vqrshrn_n_s64 Neon cumulative saturation 0
VQRSHRN_N:3:vqrshrn_n_u16 Neon cumulative saturation 1
VQRSHRN_N:4:vqrshrn_n_u32 Neon cumulative saturation 1
VQRSHRN_N:5:vqrshrn_n_u64 Neon cumulative saturation 1

VQRSHRN_N output:
VQRSHRN_N:6:result_int8x8 [] = { fffffff8, fffffff9, fffffff9, fffffffa, fffffffa, fffffffb, fffffffb, fffffffc,  }
VQRSHRN_N:7:result_int16x4 [] = { fffffff8, fffffff9, fffffff9, fffffffa,  }
VQRSHRN_N:8:result_int32x2 [] = { fffffffc, fffffffc,  }
VQRSHRN_N:9:result_int64x1 [] = { 3333333333333333,  }
VQRSHRN_N:10:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQRSHRN_N:11:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQRSHRN_N:12:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQRSHRN_N:13:result_uint64x1 [] = { 3333333333333333,  }
VQRSHRN_N:14:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRN_N:15:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHRN_N:16:result_float32x2 [] = { 33333333, 33333333,  }
VQRSHRN_N:17:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRSHRN_N:18:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRN_N:19:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRN_N:20:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRN_N:21:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRSHRN_N:22:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRN_N:23:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRN_N:24:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRN_N:25:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRSHRN_N:26:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRN_N:27:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRN_N:28:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRN_N:29:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRSHRN_N (check saturation: shift by 3) cumulative saturation output:
VQRSHRN_N:30:vqrshrn_n_s16 Neon cumulative saturation 1
VQRSHRN_N:31:vqrshrn_n_s32 Neon cumulative saturation 1
VQRSHRN_N:32:vqrshrn_n_s64 Neon cumulative saturation 1
VQRSHRN_N:33:vqrshrn_n_u16 Neon cumulative saturation 1
VQRSHRN_N:34:vqrshrn_n_u32 Neon cumulative saturation 1
VQRSHRN_N:35:vqrshrn_n_u64 Neon cumulative saturation 1

VQRSHRN_N (check saturation: shift by 3) output:
VQRSHRN_N:36:result_int8x8 [] = { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f,  }
VQRSHRN_N:37:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQRSHRN_N:38:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQRSHRN_N:39:result_int64x1 [] = { 3333333333333333,  }
VQRSHRN_N:40:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQRSHRN_N:41:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQRSHRN_N:42:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQRSHRN_N:43:result_uint64x1 [] = { 3333333333333333,  }
VQRSHRN_N:44:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRN_N:45:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHRN_N:46:result_float32x2 [] = { 33333333, 33333333,  }
VQRSHRN_N:47:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRSHRN_N:48:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRN_N:49:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRN_N:50:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRN_N:51:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRSHRN_N:52:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRN_N:53:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRN_N:54:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRN_N:55:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRSHRN_N:56:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRN_N:57:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRN_N:58:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRN_N:59:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRSHRN_N (check saturation: shift by max) cumulative saturation output:
VQRSHRN_N:60:vqrshrn_n_s16 Neon cumulative saturation 1
VQRSHRN_N:61:vqrshrn_n_s32 Neon cumulative saturation 1
VQRSHRN_N:62:vqrshrn_n_s64 Neon cumulative saturation 1
VQRSHRN_N:63:vqrshrn_n_u16 Neon cumulative saturation 1
VQRSHRN_N:64:vqrshrn_n_u32 Neon cumulative saturation 1
VQRSHRN_N:65:vqrshrn_n_u64 Neon cumulative saturation 1

VQRSHRN_N (check saturation: shift by max) output:
VQRSHRN_N:66:result_int8x8 [] = { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f,  }
VQRSHRN_N:67:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQRSHRN_N:68:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQRSHRN_N:69:result_int64x1 [] = { 3333333333333333,  }
VQRSHRN_N:70:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQRSHRN_N:71:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQRSHRN_N:72:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQRSHRN_N:73:result_uint64x1 [] = { 3333333333333333,  }
VQRSHRN_N:74:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRN_N:75:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHRN_N:76:result_float32x2 [] = { 33333333, 33333333,  }
VQRSHRN_N:77:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRSHRN_N:78:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRN_N:79:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRN_N:80:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRN_N:81:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRSHRN_N:82:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRN_N:83:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRN_N:84:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRN_N:85:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRSHRN_N:86:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRN_N:87:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRN_N:88:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRN_N:89:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VSET_LANE/VSET_LANEQ output:
VSET_LANE/VSET_LANEQ:0:result_int8x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, 11,  }
VSET_LANE/VSET_LANEQ:1:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, 22,  }
VSET_LANE/VSET_LANEQ:2:result_int32x2 [] = { fffffff0, 33,  }
VSET_LANE/VSET_LANEQ:3:result_int64x1 [] = { 44,  }
VSET_LANE/VSET_LANEQ:4:result_uint8x8 [] = { f0, f1, f2, f3, f4, f5, 55, f7,  }
VSET_LANE/VSET_LANEQ:5:result_uint16x4 [] = { fff0, fff1, 66, fff3,  }
VSET_LANE/VSET_LANEQ:6:result_uint32x2 [] = { fffffff0, 77,  }
VSET_LANE/VSET_LANEQ:7:result_uint64x1 [] = { 88,  }
VSET_LANE/VSET_LANEQ:8:result_poly8x8 [] = { f0, f1, f2, f3, f4, f5, 55, f7,  }
VSET_LANE/VSET_LANEQ:9:result_poly16x4 [] = { fff0, fff1, 66, fff3,  }
VSET_LANE/VSET_LANEQ:10:result_float32x2 [] = { c1800000, 4204cccd,  }
VSET_LANE/VSET_LANEQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VSET_LANE/VSET_LANEQ:12:result_int8x16 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7, fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffff99,  }
VSET_LANE/VSET_LANEQ:13:result_int16x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, aa, fffffff6, fffffff7,  }
VSET_LANE/VSET_LANEQ:14:result_int32x4 [] = { fffffff0, fffffff1, fffffff2, bb,  }
VSET_LANE/VSET_LANEQ:15:result_int64x2 [] = { fffffffffffffff0, cc,  }
VSET_LANE/VSET_LANEQ:16:result_uint8x16 [] = { f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fa, fb, fc, fd, dd, ff,  }
VSET_LANE/VSET_LANEQ:17:result_uint16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, ee, fff7,  }
VSET_LANE/VSET_LANEQ:18:result_uint32x4 [] = { fffffff0, fffffff1, ff, fffffff3,  }
VSET_LANE/VSET_LANEQ:19:result_uint64x2 [] = { fffffffffffffff0, 11,  }
VSET_LANE/VSET_LANEQ:20:result_poly8x16 [] = { f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fa, fb, fc, fd, dd, ff,  }
VSET_LANE/VSET_LANEQ:21:result_poly16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, ee, fff7,  }
VSET_LANE/VSET_LANEQ:22:result_float32x4 [] = { c1800000, c1700000, c1600000, 41333333,  }
VSET_LANE/VSET_LANEQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VGET_LANE/VGETQ_LANE output:
vget_lane_s8: fffffff7
vget_lane_s16: fffffff3
vget_lane_s32: fffffff1
vget_lane_s64: fffffffffffffff0
vget_lane_u8: f6
vget_lane_u16: fff2
vget_lane_u32: fffffff1
vget_lane_u64: fffffffffffffff0
vget_lane_p8: f6
vget_lane_p16: fff2
vget_lane_f32: c1700000
vgetq_lane_s8: ffffffff
vgetq_lane_s16: fffffff5
vgetq_lane_s32: fffffff3
vgetq_lane_s64: fffffffffffffff1
vgetq_lane_u8: fe
vgetq_lane_u16: fff6
vgetq_lane_u32: fffffff2
vgetq_lane_u64: fffffffffffffff1
vgetq_lane_p8: fe
vgetq_lane_p16: fff6
vgetq_lane_f32: c1500000


VQSUB/VQSUBQ cumulative saturation output:
VQSUB/VQSUBQ:0:vqsub_s8 Neon cumulative saturation 0
VQSUB/VQSUBQ:1:vqsub_s16 Neon cumulative saturation 0
VQSUB/VQSUBQ:2:vqsub_s32 Neon cumulative saturation 0
VQSUB/VQSUBQ:3:vqsub_s64 Neon cumulative saturation 0
VQSUB/VQSUBQ:4:vqsub_u8 Neon cumulative saturation 0
VQSUB/VQSUBQ:5:vqsub_u16 Neon cumulative saturation 0
VQSUB/VQSUBQ:6:vqsub_u32 Neon cumulative saturation 0
VQSUB/VQSUBQ:7:vqsub_u64 Neon cumulative saturation 0
VQSUB/VQSUBQ:8:vqsubq_s8 Neon cumulative saturation 0
VQSUB/VQSUBQ:9:vqsubq_s16 Neon cumulative saturation 0
VQSUB/VQSUBQ:10:vqsubq_s32 Neon cumulative saturation 0
VQSUB/VQSUBQ:11:vqsubq_s64 Neon cumulative saturation 0
VQSUB/VQSUBQ:12:vqsubq_u8 Neon cumulative saturation 0
VQSUB/VQSUBQ:13:vqsubq_u16 Neon cumulative saturation 0
VQSUB/VQSUBQ:14:vqsubq_u32 Neon cumulative saturation 0
VQSUB/VQSUBQ:15:vqsubq_u64 Neon cumulative saturation 0

VQSUB/VQSUBQ output:
VQSUB/VQSUBQ:16:result_int8x8 [] = { ffffffdf, ffffffe0, ffffffe1, ffffffe2, ffffffe3, ffffffe4, ffffffe5, ffffffe6,  }
VQSUB/VQSUBQ:17:result_int16x4 [] = { ffffffce, ffffffcf, ffffffd0, ffffffd1,  }
VQSUB/VQSUBQ:18:result_int32x2 [] = { ffffffbd, ffffffbe,  }
VQSUB/VQSUBQ:19:result_int64x1 [] = { ffffffffffffffac,  }
VQSUB/VQSUBQ:20:result_uint8x8 [] = { 9b, 9c, 9d, 9e, 9f, a0, a1, a2,  }
VQSUB/VQSUBQ:21:result_uint16x4 [] = { ff8a, ff8b, ff8c, ff8d,  }
VQSUB/VQSUBQ:22:result_uint32x2 [] = { ffffff79, ffffff7a,  }
VQSUB/VQSUBQ:23:result_uint64x1 [] = { ffffffffffffff68,  }
VQSUB/VQSUBQ:24:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSUB/VQSUBQ:25:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSUB/VQSUBQ:26:result_float32x2 [] = { 33333333, 33333333,  }
VQSUB/VQSUBQ:27:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSUB/VQSUBQ:28:result_int8x16 [] = { ffffffdf, ffffffe0, ffffffe1, ffffffe2, ffffffe3, ffffffe4, ffffffe5, ffffffe6, ffffffe7, ffffffe8, ffffffe9, ffffffea, ffffffeb, ffffffec, ffffffed, ffffffee,  }
VQSUB/VQSUBQ:29:result_int16x8 [] = { ffffffce, ffffffcf, ffffffd0, ffffffd1, ffffffd2, ffffffd3, ffffffd4, ffffffd5,  }
VQSUB/VQSUBQ:30:result_int32x4 [] = { ffffffbd, ffffffbe, ffffffbf, ffffffc0,  }
VQSUB/VQSUBQ:31:result_int64x2 [] = { ffffffffffffffac, ffffffffffffffad,  }
VQSUB/VQSUBQ:32:result_uint8x16 [] = { 9b, 9c, 9d, 9e, 9f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, aa,  }
VQSUB/VQSUBQ:33:result_uint16x8 [] = { ff8a, ff8b, ff8c, ff8d, ff8e, ff8f, ff90, ff91,  }
VQSUB/VQSUBQ:34:result_uint32x4 [] = { ffffff79, ffffff7a, ffffff7b, ffffff7c,  }
VQSUB/VQSUBQ:35:result_uint64x2 [] = { ffffffffffffff68, ffffffffffffff69,  }
VQSUB/VQSUBQ:36:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSUB/VQSUBQ:37:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSUB/VQSUBQ:38:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSUB/VQSUBQ:39:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSUB/VQSUBQ 64 bits saturation cumulative saturation output:
VQSUB/VQSUBQ:40:vqsub_s64 Neon cumulative saturation 0
VQSUB/VQSUBQ:41:vqsub_u64 Neon cumulative saturation 0
VQSUB/VQSUBQ:42:vqsubq_s64 Neon cumulative saturation 0
VQSUB/VQSUBQ:43:vqsubq_u64 Neon cumulative saturation 0

64 bits saturation:
VQSUB/VQSUBQ:44:result_int64x1 [] = { fffffffffffffff0,  }
VQSUB/VQSUBQ:45:result_uint64x1 [] = { fffffffffffffff0,  }
VQSUB/VQSUBQ:46:result_int64x2 [] = { fffffffffffffff0, fffffffffffffff1,  }
VQSUB/VQSUBQ:47:result_uint64x2 [] = { fffffffffffffff0, fffffffffffffff1,  }

VQSUB/VQSUBQ 64 bits saturation cumulative saturation output:
VQSUB/VQSUBQ:48:vqsub_s64 Neon cumulative saturation 0
VQSUB/VQSUBQ:49:vqsub_u64 Neon cumulative saturation 0
VQSUB/VQSUBQ:50:vqsubq_s64 Neon cumulative saturation 0
VQSUB/VQSUBQ:51:vqsubq_u64 Neon cumulative saturation 0
VQSUB/VQSUBQ:52:result_int64x1 [] = { ffffffffffffffac,  }
VQSUB/VQSUBQ:53:result_uint64x1 [] = { ffffffffffffff68,  }
VQSUB/VQSUBQ:54:result_int64x2 [] = { ffffffffffffffac, ffffffffffffffad,  }
VQSUB/VQSUBQ:55:result_uint64x2 [] = { ffffffffffffff68, ffffffffffffff69,  }

VQSUB/VQSUBQ 64 bits saturation cumulative saturation output:
VQSUB/VQSUBQ:56:vqsub_s64 Neon cumulative saturation 1
VQSUB/VQSUBQ:57:vqsub_u64 Neon cumulative saturation 1
VQSUB/VQSUBQ:58:vqsubq_s64 Neon cumulative saturation 1
VQSUB/VQSUBQ:59:vqsubq_u64 Neon cumulative saturation 1
VQSUB/VQSUBQ:60:result_int64x1 [] = { 8000000000000000,  }
VQSUB/VQSUBQ:61:result_uint64x1 [] = { 0,  }
VQSUB/VQSUBQ:62:result_int64x2 [] = { 7fffffffffffffff, 7fffffffffffffff,  }
VQSUB/VQSUBQ:63:result_uint64x2 [] = { 0, 0,  }

less than 64 bits saturation:
VQSUB/VQSUBQ:64:vqsub_s8 Neon cumulative saturation 1
VQSUB/VQSUBQ:65:vqsub_s16 Neon cumulative saturation 1
VQSUB/VQSUBQ:66:vqsub_s32 Neon cumulative saturation 1
VQSUB/VQSUBQ:67:vqsubq_s8 Neon cumulative saturation 1
VQSUB/VQSUBQ:68:vqsubq_s16 Neon cumulative saturation 1
VQSUB/VQSUBQ:69:vqsubq_s32 Neon cumulative saturation 1
VQSUB/VQSUBQ:70:result_int8x8 [] = { ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80,  }
VQSUB/VQSUBQ:71:result_int16x4 [] = { ffff8000, ffff8000, ffff8000, ffff8000,  }
VQSUB/VQSUBQ:72:result_int32x2 [] = { 80000000, 80000000,  }
VQSUB/VQSUBQ:73:result_int8x16 [] = { ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80,  }
VQSUB/VQSUBQ:74:result_int16x8 [] = { ffff8000, ffff8000, ffff8000, ffff8000, ffff8000, ffff8000, ffff8000, ffff8000,  }
VQSUB/VQSUBQ:75:result_int32x4 [] = { 80000000, 80000000, 80000000, 80000000,  }

VQSUB/VQSUBQ less than 64 bits saturation cumulative saturation output:
VQSUB/VQSUBQ:76:vqsub_u8 Neon cumulative saturation 1
VQSUB/VQSUBQ:77:vqsub_u16 Neon cumulative saturation 1
VQSUB/VQSUBQ:78:vqsub_u32 Neon cumulative saturation 1
VQSUB/VQSUBQ:79:vqsubq_u8 Neon cumulative saturation 1
VQSUB/VQSUBQ:80:vqsubq_u16 Neon cumulative saturation 1
VQSUB/VQSUBQ:81:vqsubq_u32 Neon cumulative saturation 1
VQSUB/VQSUBQ:82:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQSUB/VQSUBQ:83:result_uint16x4 [] = { 0, 0, 0, 0,  }
VQSUB/VQSUBQ:84:result_uint32x2 [] = { 0, 0,  }
VQSUB/VQSUBQ:85:result_uint8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VQSUB/VQSUBQ:86:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQSUB/VQSUBQ:87:result_uint32x4 [] = { 0, 0, 0, 0,  }

VQDMULH cumulative saturation output:
VQDMULH:0:vqdmulh_s16 Neon cumulative saturation 0
VQDMULH:1:vqdmulh_s32 Neon cumulative saturation 0
VQDMULH:2:vqdmulhq_s16 Neon cumulative saturation 0
VQDMULH:3:vqdmulhq_s32 Neon cumulative saturation 0

VQDMULH output:
VQDMULH:4:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH:5:result_int16x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }
VQDMULH:6:result_int32x2 [] = { ffffffff, ffffffff,  }
VQDMULH:7:result_int64x1 [] = { 3333333333333333,  }
VQDMULH:8:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH:9:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMULH:10:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMULH:11:result_uint64x1 [] = { 3333333333333333,  }
VQDMULH:12:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH:13:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMULH:14:result_float32x2 [] = { 33333333, 33333333,  }
VQDMULH:15:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMULH:16:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH:17:result_int16x8 [] = { ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff,  }
VQDMULH:18:result_int32x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }
VQDMULH:19:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMULH:20:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH:21:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMULH:22:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMULH:23:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMULH:24:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH:25:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMULH:26:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMULH:27:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMULH cumulative saturation output:
VQDMULH:28:vqdmulh_s16 Neon cumulative saturation 1
VQDMULH:29:vqdmulh_s32 Neon cumulative saturation 1
VQDMULH:30:vqdmulhq_s16 Neon cumulative saturation 1
VQDMULH:31:vqdmulhq_s32 Neon cumulative saturation 1

VQDMULH output:
VQDMULH:32:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH:33:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQDMULH:34:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQDMULH:35:result_int64x1 [] = { 3333333333333333,  }
VQDMULH:36:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH:37:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMULH:38:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMULH:39:result_uint64x1 [] = { 3333333333333333,  }
VQDMULH:40:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH:41:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMULH:42:result_float32x2 [] = { 33333333, 33333333,  }
VQDMULH:43:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMULH:44:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH:45:result_int16x8 [] = { 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff,  }
VQDMULH:46:result_int32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }
VQDMULH:47:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMULH:48:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH:49:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMULH:50:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMULH:51:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMULH:52:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH:53:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMULH:54:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMULH:55:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMULH_LANE cumulative saturation output:
VQDMULH_LANE:0:vqdmulh_lane_s16 Neon cumulative saturation 0
VQDMULH_LANE:1:vqdmulh_lane_s32 Neon cumulative saturation 0
VQDMULH_LANE:2:vqdmulhq_lane_s16 Neon cumulative saturation 0
VQDMULH_LANE:3:vqdmulhq_lane_s32 Neon cumulative saturation 0

VQDMULH_LANE output:
VQDMULH_LANE:4:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH_LANE:5:result_int16x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }
VQDMULH_LANE:6:result_int32x2 [] = { ffffffff, ffffffff,  }
VQDMULH_LANE:7:result_int64x1 [] = { 3333333333333333,  }
VQDMULH_LANE:8:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH_LANE:9:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMULH_LANE:10:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMULH_LANE:11:result_uint64x1 [] = { 3333333333333333,  }
VQDMULH_LANE:12:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH_LANE:13:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMULH_LANE:14:result_float32x2 [] = { 33333333, 33333333,  }
VQDMULH_LANE:15:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMULH_LANE:16:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH_LANE:17:result_int16x8 [] = { ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff,  }
VQDMULH_LANE:18:result_int32x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }
VQDMULH_LANE:19:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMULH_LANE:20:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH_LANE:21:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMULH_LANE:22:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMULH_LANE:23:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMULH_LANE:24:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH_LANE:25:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMULH_LANE:26:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMULH_LANE:27:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMULH_LANE (check mul cumulative saturation) cumulative saturation output:
VQDMULH_LANE:28:vqdmulh_lane_s16 Neon cumulative saturation 1
VQDMULH_LANE:29:vqdmulh_lane_s32 Neon cumulative saturation 1
VQDMULH_LANE:30:vqdmulhq_lane_s16 Neon cumulative saturation 1
VQDMULH_LANE:31:vqdmulhq_lane_s32 Neon cumulative saturation 1

VQDMULH_LANE (check mul cumulative saturation) output:
VQDMULH_LANE:32:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH_LANE:33:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQDMULH_LANE:34:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQDMULH_LANE:35:result_int64x1 [] = { 3333333333333333,  }
VQDMULH_LANE:36:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH_LANE:37:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMULH_LANE:38:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMULH_LANE:39:result_uint64x1 [] = { 3333333333333333,  }
VQDMULH_LANE:40:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH_LANE:41:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMULH_LANE:42:result_float32x2 [] = { 33333333, 33333333,  }
VQDMULH_LANE:43:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMULH_LANE:44:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH_LANE:45:result_int16x8 [] = { 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff,  }
VQDMULH_LANE:46:result_int32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }
VQDMULH_LANE:47:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMULH_LANE:48:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH_LANE:49:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMULH_LANE:50:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMULH_LANE:51:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMULH_LANE:52:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH_LANE:53:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMULH_LANE:54:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMULH_LANE:55:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMULH_N cumulative saturation output:
VQDMULH_N:0:vqdmulh_n_s16 Neon cumulative saturation 0
VQDMULH_N:1:vqdmulh_n_s32 Neon cumulative saturation 0
VQDMULH_N:2:vqdmulhq_n_s16 Neon cumulative saturation 0
VQDMULH_N:3:vqdmulhq_n_s32 Neon cumulative saturation 0

VQDMULH_N output:
VQDMULH_N:4:result_int16x4 [] = { 19, 19, 19, 19,  }
VQDMULH_N:5:result_int32x2 [] = { 4, 4,  }
VQDMULH_N:6:result_int16x8 [] = { 10, 10, 10, 10, 10, 10, 10, 10,  }
VQDMULH_N:7:result_int32x4 [] = { a, a, a, a,  }

VQDMULH_N (check mul cumulative saturation) cumulative saturation output:
VQDMULH_N:8:vqdmulh_n_s16 Neon cumulative saturation 1
VQDMULH_N:9:vqdmulh_n_s32 Neon cumulative saturation 1
VQDMULH_N:10:vqdmulhq_n_s16 Neon cumulative saturation 1
VQDMULH_N:11:vqdmulhq_n_s32 Neon cumulative saturation 1

VQDMULH_N (check mul cumulative saturation) output:
VQDMULH_N:12:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH_N:13:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQDMULH_N:14:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQDMULH_N:15:result_int64x1 [] = { 3333333333333333,  }
VQDMULH_N:16:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH_N:17:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMULH_N:18:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMULH_N:19:result_uint64x1 [] = { 3333333333333333,  }
VQDMULH_N:20:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH_N:21:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMULH_N:22:result_float32x2 [] = { 33333333, 33333333,  }
VQDMULH_N:23:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMULH_N:24:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH_N:25:result_int16x8 [] = { 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff,  }
VQDMULH_N:26:result_int32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }
VQDMULH_N:27:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMULH_N:28:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH_N:29:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMULH_N:30:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMULH_N:31:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMULH_N:32:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULH_N:33:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMULH_N:34:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMULH_N:35:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMULL cumulative saturation output:
VQDMULL:0:vqdmull_s16 Neon cumulative saturation 0
VQDMULL:1:vqdmull_s32 Neon cumulative saturation 0

VQDMULL output:
VQDMULL:2:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULL:3:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMULL:4:result_int32x2 [] = { 33333333, 33333333,  }
VQDMULL:5:result_int64x1 [] = { 3333333333333333,  }
VQDMULL:6:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULL:7:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMULL:8:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMULL:9:result_uint64x1 [] = { 3333333333333333,  }
VQDMULL:10:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULL:11:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMULL:12:result_float32x2 [] = { 33333333, 33333333,  }
VQDMULL:13:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMULL:14:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULL:15:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMULL:16:result_int32x4 [] = { 200, 1c2, 188, 152,  }
VQDMULL:17:result_int64x2 [] = { 200, 1c2,  }
VQDMULL:18:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULL:19:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMULL:20:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMULL:21:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMULL:22:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULL:23:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMULL:24:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMULL:25:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMULL (check mul cumulative saturation) cumulative saturation output:
VQDMULL:26:vqdmull_s16 Neon cumulative saturation 1
VQDMULL:27:vqdmull_s32 Neon cumulative saturation 1

VQDMULL (check mul cumulative saturation) output:
VQDMULL:28:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULL:29:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMULL:30:result_int32x2 [] = { 33333333, 33333333,  }
VQDMULL:31:result_int64x1 [] = { 3333333333333333,  }
VQDMULL:32:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULL:33:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMULL:34:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMULL:35:result_uint64x1 [] = { 3333333333333333,  }
VQDMULL:36:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULL:37:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMULL:38:result_float32x2 [] = { 33333333, 33333333,  }
VQDMULL:39:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMULL:40:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULL:41:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMULL:42:result_int32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }
VQDMULL:43:result_int64x2 [] = { 7fffffffffffffff, 7fffffffffffffff,  }
VQDMULL:44:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULL:45:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMULL:46:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMULL:47:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMULL:48:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMULL:49:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMULL:50:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMULL:51:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMLAL cumulative saturation output:
VQDMLAL:0:vqdmlal_s16 Neon cumulative saturation 0
VQDMLAL:1:vqdmlal_s32 Neon cumulative saturation 0

VQDMLAL output:
VQDMLAL:2:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL:3:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL:4:result_int32x2 [] = { 33333333, 33333333,  }
VQDMLAL:5:result_int64x1 [] = { 3333333333333333,  }
VQDMLAL:6:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL:7:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL:8:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMLAL:9:result_uint64x1 [] = { 3333333333333333,  }
VQDMLAL:10:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL:11:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL:12:result_float32x2 [] = { 33333333, 33333333,  }
VQDMLAL:13:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMLAL:14:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL:15:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL:16:result_int32x4 [] = { 7c1e, 7c1f, 7c20, 7c21,  }
VQDMLAL:17:result_int64x2 [] = { 7c1e, 7c1f,  }
VQDMLAL:18:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL:19:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL:20:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLAL:21:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMLAL:22:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL:23:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL:24:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLAL:25:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMLAL (check mul cumulative saturation) cumulative saturation output:
VQDMLAL:26:vqdmlal_s16 Neon cumulative saturation 1
VQDMLAL:27:vqdmlal_s32 Neon cumulative saturation 1

VQDMLAL (check mul cumulative saturation) output:
VQDMLAL:28:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL:29:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL:30:result_int32x2 [] = { 33333333, 33333333,  }
VQDMLAL:31:result_int64x1 [] = { 3333333333333333,  }
VQDMLAL:32:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL:33:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL:34:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMLAL:35:result_uint64x1 [] = { 3333333333333333,  }
VQDMLAL:36:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL:37:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLAL:38:result_float32x2 [] = { 33333333, 33333333,  }
VQDMLAL:39:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMLAL:40:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL:41:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL:42:result_int32x4 [] = { 7fffffef, 7ffffff0, 7ffffff1, 7ffffff2,  }
VQDMLAL:43:result_int64x2 [] = { 7fffffffffffffef, 7ffffffffffffff0,  }
VQDMLAL:44:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL:45:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL:46:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLAL:47:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMLAL:48:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLAL:49:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLAL:50:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLAL:51:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMLSL cumulative saturation output:
VQDMLSL:0:vqdmlsl_s16 Neon cumulative saturation 0
VQDMLSL:1:vqdmlsl_s32 Neon cumulative saturation 0

VQDMLSL output:
VQDMLSL:2:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL:3:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL:4:result_int32x2 [] = { 33333333, 33333333,  }
VQDMLSL:5:result_int64x1 [] = { 3333333333333333,  }
VQDMLSL:6:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL:7:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL:8:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMLSL:9:result_uint64x1 [] = { 3333333333333333,  }
VQDMLSL:10:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL:11:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL:12:result_float32x2 [] = { 33333333, 33333333,  }
VQDMLSL:13:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMLSL:14:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL:15:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL:16:result_int32x4 [] = { ffff83c2, ffff83c3, ffff83c4, ffff83c5,  }
VQDMLSL:17:result_int64x2 [] = { ffffffffffff83c2, ffffffffffff83c3,  }
VQDMLSL:18:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL:19:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL:20:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLSL:21:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMLSL:22:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL:23:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL:24:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLSL:25:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMLSL (check mul cumulative saturation) cumulative saturation output:
VQDMLSL:26:vqdmlsl_s16 Neon cumulative saturation 1
VQDMLSL:27:vqdmlsl_s32 Neon cumulative saturation 1

VQDMLSL (check mul cumulative saturation) output:
VQDMLSL:28:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL:29:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL:30:result_int32x2 [] = { 33333333, 33333333,  }
VQDMLSL:31:result_int64x1 [] = { 3333333333333333,  }
VQDMLSL:32:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL:33:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL:34:result_uint32x2 [] = { 33333333, 33333333,  }
VQDMLSL:35:result_uint64x1 [] = { 3333333333333333,  }
VQDMLSL:36:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL:37:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQDMLSL:38:result_float32x2 [] = { 33333333, 33333333,  }
VQDMLSL:39:result_float16x4 [] = { 0, 0, 0, 0,  }
VQDMLSL:40:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL:41:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL:42:result_int32x4 [] = { 80000000, 80000000, 80000000, 80000000,  }
VQDMLSL:43:result_int64x2 [] = { 8000000000000000, 8000000000000000,  }
VQDMLSL:44:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL:45:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL:46:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLSL:47:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQDMLSL:48:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQDMLSL:49:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQDMLSL:50:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQDMLSL:51:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VCEQ/VCEQQ output:
VCEQ/VCEQQ:0:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, ff, 0,  }
VCEQ/VCEQQ:1:result_uint16x4 [] = { 0, 0, ffff, 0,  }
VCEQ/VCEQQ:2:result_uint32x2 [] = { ffffffff, 0,  }
VCEQ/VCEQQ:3:result_uint8x8 [] = { 0, 0, 0, ff, 0, 0, 0, 0,  }
VCEQ/VCEQQ:4:result_uint16x4 [] = { 0, 0, ffff, 0,  }
VCEQ/VCEQQ:5:result_uint32x2 [] = { 0, ffffffff,  }
VCEQ/VCEQQ:6:result_uint8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ff, 0, 0, 0,  }
VCEQ/VCEQQ:7:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, ffff, 0,  }
VCEQ/VCEQQ:8:result_uint32x4 [] = { 0, 0, ffffffff, 0,  }
VCEQ/VCEQQ:9:result_uint8x16 [] = { 0, 0, 0, 0, ff, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VCEQ/VCEQQ:10:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, ffff, 0,  }
VCEQ/VCEQQ:11:result_uint32x4 [] = { 0, 0, ffffffff, 0,  }
VCEQ/VCEQQ:12:result_uint32x2 [] = { 0, ffffffff,  }
VCEQ/VCEQQ:13:result_uint32x4 [] = { 0, 0, ffffffff, 0,  }
VCEQ/VCEQQ:14:result_uint32x2 [] = { ffffffff, 0,  }
VCEQ/VCEQQ:15:result_uint32x2 [] = { 0, ffffffff,  }
VCEQ/VCEQQ:16:result_uint32x2 [] = { ffffffff, 0,  }
VCEQ/VCEQQ FP special (NaN):17:result_uint32x2 [] = { 0, 0,  }
VCEQ/VCEQQ FP special (-NaN):18:result_uint32x2 [] = { 0, 0,  }
VCEQ/VCEQQ FP special (NaN):19:result_uint32x2 [] = { 0, 0,  }
VCEQ/VCEQQ FP special (inf):20:result_uint32x2 [] = { 0, 0,  }
VCEQ/VCEQQ FP special (-inf):21:result_uint32x2 [] = { 0, 0,  }
VCEQ/VCEQQ FP special (inf):22:result_uint32x2 [] = { 0, 0,  }
VCEQ/VCEQQ FP special (-0.0):23:result_uint32x2 [] = { ffffffff, ffffffff,  }

VCEQ/VCEQQ p8 output:
VCEQ/VCEQQ:0:result_uint8x8 [] = { 0, 0, 0, ff, 0, 0, 0, 0,  }
VCEQ/VCEQQ:1:result_uint8x16 [] = { 0, 0, 0, 0, ff, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }

VCGE/VCGEQ output:
VCGE/VCGEQ:0:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, ff, ff,  }
VCGE/VCGEQ:1:result_uint16x4 [] = { 0, 0, ffff, ffff,  }
VCGE/VCGEQ:2:result_uint32x2 [] = { ffffffff, ffffffff,  }
VCGE/VCGEQ:3:result_uint8x8 [] = { 0, 0, 0, ff, ff, ff, ff, ff,  }
VCGE/VCGEQ:4:result_uint16x4 [] = { 0, 0, ffff, ffff,  }
VCGE/VCGEQ:5:result_uint32x2 [] = { 0, ffffffff,  }
VCGE/VCGEQ:6:result_uint8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ff, ff, ff, ff,  }
VCGE/VCGEQ:7:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, ffff, ffff,  }
VCGE/VCGEQ:8:result_uint32x4 [] = { 0, 0, ffffffff, ffffffff,  }
VCGE/VCGEQ:9:result_uint8x16 [] = { 0, 0, 0, 0, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff,  }
VCGE/VCGEQ:10:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, ffff, ffff,  }
VCGE/VCGEQ:11:result_uint32x4 [] = { 0, 0, ffffffff, ffffffff,  }
VCGE/VCGEQ:12:result_uint32x2 [] = { 0, ffffffff,  }
VCGE/VCGEQ:13:result_uint32x4 [] = { 0, 0, ffffffff, ffffffff,  }
VCGE/VCGEQ:14:result_uint32x2 [] = { ffffffff, ffffffff,  }
VCGE/VCGEQ:15:result_uint32x2 [] = { 0, ffffffff,  }
VCGE/VCGEQ:16:result_uint32x2 [] = { ffffffff, ffffffff,  }
VCGE/VCGEQ FP special (NaN):17:result_uint32x2 [] = { 0, 0,  }
VCGE/VCGEQ FP special (-NaN):18:result_uint32x2 [] = { 0, 0,  }
VCGE/VCGEQ FP special (NaN):19:result_uint32x2 [] = { 0, 0,  }
VCGE/VCGEQ FP special (inf):20:result_uint32x2 [] = { 0, 0,  }
VCGE/VCGEQ FP special (-inf):21:result_uint32x2 [] = { ffffffff, ffffffff,  }
VCGE/VCGEQ FP special (inf):22:result_uint32x2 [] = { ffffffff, ffffffff,  }
VCGE/VCGEQ FP special (-0.0):23:result_uint32x2 [] = { ffffffff, ffffffff,  }

VCLE/VCLEQ output:
VCLE/VCLEQ:0:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, 0,  }
VCLE/VCLEQ:1:result_uint16x4 [] = { ffff, ffff, ffff, 0,  }
VCLE/VCLEQ:2:result_uint32x2 [] = { ffffffff, 0,  }
VCLE/VCLEQ:3:result_uint8x8 [] = { ff, ff, ff, ff, 0, 0, 0, 0,  }
VCLE/VCLEQ:4:result_uint16x4 [] = { ffff, ffff, ffff, 0,  }
VCLE/VCLEQ:5:result_uint32x2 [] = { ffffffff, ffffffff,  }
VCLE/VCLEQ:6:result_uint8x16 [] = { ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, 0, 0, 0,  }
VCLE/VCLEQ:7:result_uint16x8 [] = { ffff, ffff, ffff, ffff, ffff, ffff, ffff, 0,  }
VCLE/VCLEQ:8:result_uint32x4 [] = { ffffffff, ffffffff, ffffffff, 0,  }
VCLE/VCLEQ:9:result_uint8x16 [] = { ff, ff, ff, ff, ff, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VCLE/VCLEQ:10:result_uint16x8 [] = { ffff, ffff, ffff, ffff, ffff, ffff, ffff, 0,  }
VCLE/VCLEQ:11:result_uint32x4 [] = { ffffffff, ffffffff, ffffffff, 0,  }
VCLE/VCLEQ:12:result_uint32x2 [] = { ffffffff, ffffffff,  }
VCLE/VCLEQ:13:result_uint32x4 [] = { ffffffff, ffffffff, ffffffff, 0,  }
VCLE/VCLEQ:14:result_uint32x2 [] = { ffffffff, 0,  }
VCLE/VCLEQ:15:result_uint32x2 [] = { ffffffff, ffffffff,  }
VCLE/VCLEQ:16:result_uint32x2 [] = { ffffffff, 0,  }
VCLE/VCLEQ FP special (NaN):17:result_uint32x2 [] = { 0, 0,  }
VCLE/VCLEQ FP special (-NaN):18:result_uint32x2 [] = { 0, 0,  }
VCLE/VCLEQ FP special (NaN):19:result_uint32x2 [] = { 0, 0,  }
VCLE/VCLEQ FP special (inf):20:result_uint32x2 [] = { ffffffff, ffffffff,  }
VCLE/VCLEQ FP special (-inf):21:result_uint32x2 [] = { 0, 0,  }
VCLE/VCLEQ FP special (inf):22:result_uint32x2 [] = { 0, 0,  }
VCLE/VCLEQ FP special (-0.0):23:result_uint32x2 [] = { ffffffff, ffffffff,  }

VCGT/VCGTQ output:
VCGT/VCGTQ:0:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, ff,  }
VCGT/VCGTQ:1:result_uint16x4 [] = { 0, 0, 0, ffff,  }
VCGT/VCGTQ:2:result_uint32x2 [] = { 0, ffffffff,  }
VCGT/VCGTQ:3:result_uint8x8 [] = { 0, 0, 0, 0, ff, ff, ff, ff,  }
VCGT/VCGTQ:4:result_uint16x4 [] = { 0, 0, 0, ffff,  }
VCGT/VCGTQ:5:result_uint32x2 [] = { 0, 0,  }
VCGT/VCGTQ:6:result_uint8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ff, ff, ff,  }
VCGT/VCGTQ:7:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, ffff,  }
VCGT/VCGTQ:8:result_uint32x4 [] = { 0, 0, 0, ffffffff,  }
VCGT/VCGTQ:9:result_uint8x16 [] = { 0, 0, 0, 0, 0, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff,  }
VCGT/VCGTQ:10:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, ffff,  }
VCGT/VCGTQ:11:result_uint32x4 [] = { 0, 0, 0, ffffffff,  }
VCGT/VCGTQ:12:result_uint32x2 [] = { 0, 0,  }
VCGT/VCGTQ:13:result_uint32x4 [] = { 0, 0, 0, ffffffff,  }
VCGT/VCGTQ:14:result_uint32x2 [] = { 0, ffffffff,  }
VCGT/VCGTQ:15:result_uint32x2 [] = { 0, 0,  }
VCGT/VCGTQ:16:result_uint32x2 [] = { 0, ffffffff,  }
VCGT/VCGTQ FP special (NaN):17:result_uint32x2 [] = { 0, 0,  }
VCGT/VCGTQ FP special (-NaN):18:result_uint32x2 [] = { 0, 0,  }
VCGT/VCGTQ FP special (NaN):19:result_uint32x2 [] = { 0, 0,  }
VCGT/VCGTQ FP special (inf):20:result_uint32x2 [] = { 0, 0,  }
VCGT/VCGTQ FP special (-inf):21:result_uint32x2 [] = { ffffffff, ffffffff,  }
VCGT/VCGTQ FP special (inf):22:result_uint32x2 [] = { ffffffff, ffffffff,  }
VCGT/VCGTQ FP special (-0.0):23:result_uint32x2 [] = { 0, 0,  }

VCLT/VCLTQ output:
VCLT/VCLTQ:0:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, 0, 0,  }
VCLT/VCLTQ:1:result_uint16x4 [] = { ffff, ffff, 0, 0,  }
VCLT/VCLTQ:2:result_uint32x2 [] = { 0, 0,  }
VCLT/VCLTQ:3:result_uint8x8 [] = { ff, ff, ff, 0, 0, 0, 0, 0,  }
VCLT/VCLTQ:4:result_uint16x4 [] = { ffff, ffff, 0, 0,  }
VCLT/VCLTQ:5:result_uint32x2 [] = { ffffffff, 0,  }
VCLT/VCLTQ:6:result_uint8x16 [] = { ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, 0, 0, 0, 0,  }
VCLT/VCLTQ:7:result_uint16x8 [] = { ffff, ffff, ffff, ffff, ffff, ffff, 0, 0,  }
VCLT/VCLTQ:8:result_uint32x4 [] = { ffffffff, ffffffff, 0, 0,  }
VCLT/VCLTQ:9:result_uint8x16 [] = { ff, ff, ff, ff, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VCLT/VCLTQ:10:result_uint16x8 [] = { ffff, ffff, ffff, ffff, ffff, ffff, 0, 0,  }
VCLT/VCLTQ:11:result_uint32x4 [] = { ffffffff, ffffffff, 0, 0,  }
VCLT/VCLTQ:12:result_uint32x2 [] = { ffffffff, 0,  }
VCLT/VCLTQ:13:result_uint32x4 [] = { ffffffff, ffffffff, 0, 0,  }
VCLT/VCLTQ:14:result_uint32x2 [] = { 0, 0,  }
VCLT/VCLTQ:15:result_uint32x2 [] = { ffffffff, 0,  }
VCLT/VCLTQ:16:result_uint32x2 [] = { 0, 0,  }
VCLT/VCLTQ FP special (NaN):17:result_uint32x2 [] = { 0, 0,  }
VCLT/VCLTQ FP special (-NaN):18:result_uint32x2 [] = { 0, 0,  }
VCLT/VCLTQ FP special (NaN):19:result_uint32x2 [] = { 0, 0,  }
VCLT/VCLTQ FP special (inf):20:result_uint32x2 [] = { ffffffff, ffffffff,  }
VCLT/VCLTQ FP special (-inf):21:result_uint32x2 [] = { 0, 0,  }
VCLT/VCLTQ FP special (inf):22:result_uint32x2 [] = { 0, 0,  }
VCLT/VCLTQ FP special (-0.0):23:result_uint32x2 [] = { 0, 0,  }

VBSL/VBSLQ output:
VBSL/VBSLQ:0:result_int8x8 [] = { fffffff2, fffffff2, fffffff2, fffffff2, fffffff6, fffffff6, fffffff6, fffffff6,  }
VBSL/VBSLQ:1:result_int16x4 [] = { fffffff0, fffffff0, fffffff2, fffffff2,  }
VBSL/VBSLQ:2:result_int32x2 [] = { fffffff0, fffffff0,  }
VBSL/VBSLQ:3:result_int64x1 [] = { fffffffffffffffd,  }
VBSL/VBSLQ:4:result_uint8x8 [] = { f3, f3, f3, f3, f7, f7, f7, f7,  }
VBSL/VBSLQ:5:result_uint16x4 [] = { fff0, fff0, fff2, fff2,  }
VBSL/VBSLQ:6:result_uint32x2 [] = { fffffff0, fffffff0,  }
VBSL/VBSLQ:7:result_uint64x1 [] = { fffffff1,  }
VBSL/VBSLQ:8:result_poly8x8 [] = { f3, f3, f3, f3, f7, f7, f7, f7,  }
VBSL/VBSLQ:9:result_poly16x4 [] = { fff0, fff0, fff2, fff2,  }
VBSL/VBSLQ:10:result_float32x2 [] = { c1800004, c1700004,  }
VBSL/VBSLQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VBSL/VBSLQ:12:result_int8x16 [] = { fffffff2, fffffff2, fffffff2, fffffff2, fffffff6, fffffff6, fffffff6, fffffff6, fffffff2, fffffff2, fffffff2, fffffff2, fffffff6, fffffff6, fffffff6, fffffff6,  }
VBSL/VBSLQ:13:result_int16x8 [] = { fffffff0, fffffff0, fffffff2, fffffff2, fffffff4, fffffff4, fffffff6, fffffff6,  }
VBSL/VBSLQ:14:result_int32x4 [] = { fffffff0, fffffff0, fffffff2, fffffff2,  }
VBSL/VBSLQ:15:result_int64x2 [] = { fffffffffffffffd, fffffffffffffffd,  }
VBSL/VBSLQ:16:result_uint8x16 [] = { f3, f3, f3, f3, f7, f7, f7, f7, f3, f3, f3, f3, f7, f7, f7, f7,  }
VBSL/VBSLQ:17:result_uint16x8 [] = { fff0, fff0, fff2, fff2, fff4, fff4, fff6, fff6,  }
VBSL/VBSLQ:18:result_uint32x4 [] = { fffffff0, fffffff0, fffffff2, fffffff2,  }
VBSL/VBSLQ:19:result_uint64x2 [] = { fffffff1, fffffff1,  }
VBSL/VBSLQ:20:result_poly8x16 [] = { f3, f3, f3, f3, f7, f7, f7, f7, f3, f3, f3, f3, f7, f7, f7, f7,  }
VBSL/VBSLQ:21:result_poly16x8 [] = { fff0, fff0, fff2, fff2, fff4, fff4, fff6, fff6,  }
VBSL/VBSLQ:22:result_float32x4 [] = { c1800001, c1700001, c1600001, c1500001,  }
VBSL/VBSLQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VSHL/VSHLQ output:
VSHL/VSHLQ:0:result_int8x8 [] = { ffffffe0, ffffffe2, ffffffe4, ffffffe6, ffffffe8, ffffffea, ffffffec, ffffffee,  }
VSHL/VSHLQ:1:result_int16x4 [] = { ffffff80, ffffff88, ffffff90, ffffff98,  }
VSHL/VSHLQ:2:result_int32x2 [] = { fffff000, fffff100,  }
VSHL/VSHLQ:3:result_int64x1 [] = { ffffffffffffff80,  }
VSHL/VSHLQ:4:result_uint8x8 [] = { e0, e2, e4, e6, e8, ea, ec, ee,  }
VSHL/VSHLQ:5:result_uint16x4 [] = { ff80, ff88, ff90, ff98,  }
VSHL/VSHLQ:6:result_uint32x2 [] = { fffff000, fffff100,  }
VSHL/VSHLQ:7:result_uint64x1 [] = { ffffffffffffff80,  }
VSHL/VSHLQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHL/VSHLQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VSHL/VSHLQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VSHL/VSHLQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VSHL/VSHLQ:12:result_int8x16 [] = { 0, 20, 40, 60, ffffff80, ffffffa0, ffffffc0, ffffffe0, 0, 20, 40, 60, ffffff80, ffffffa0, ffffffc0, ffffffe0,  }
VSHL/VSHLQ:13:result_int16x8 [] = { 0, 1000, 2000, 3000, 4000, 5000, 6000, 7000,  }
VSHL/VSHLQ:14:result_int32x4 [] = { 0, 40000000, 80000000, c0000000,  }
VSHL/VSHLQ:15:result_int64x2 [] = { 0, 8000000000000000,  }
VSHL/VSHLQ:16:result_uint8x16 [] = { 0, 20, 40, 60, 80, a0, c0, e0, 0, 20, 40, 60, 80, a0, c0, e0,  }
VSHL/VSHLQ:17:result_uint16x8 [] = { 0, 1000, 2000, 3000, 4000, 5000, 6000, 7000,  }
VSHL/VSHLQ:18:result_uint32x4 [] = { 0, 40000000, 80000000, c0000000,  }
VSHL/VSHLQ:19:result_uint64x2 [] = { 0, 8000000000000000,  }
VSHL/VSHLQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHL/VSHLQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VSHL/VSHLQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSHL/VSHLQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VSHL/VSHLQ (large shift amount) output:
VSHL/VSHLQ:24:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VSHL/VSHLQ:25:result_int16x4 [] = { 0, 0, 0, 0,  }
VSHL/VSHLQ:26:result_int32x2 [] = { 0, 0,  }
VSHL/VSHLQ:27:result_int64x1 [] = { 0,  }
VSHL/VSHLQ:28:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VSHL/VSHLQ:29:result_uint16x4 [] = { 0, 0, 0, 0,  }
VSHL/VSHLQ:30:result_uint32x2 [] = { 0, 0,  }
VSHL/VSHLQ:31:result_uint64x1 [] = { 0,  }
VSHL/VSHLQ:32:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHL/VSHLQ:33:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VSHL/VSHLQ:34:result_float32x2 [] = { 33333333, 33333333,  }
VSHL/VSHLQ:35:result_float16x4 [] = { 0, 0, 0, 0,  }
VSHL/VSHLQ:36:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VSHL/VSHLQ:37:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VSHL/VSHLQ:38:result_int32x4 [] = { 0, 0, 0, 0,  }
VSHL/VSHLQ:39:result_int64x2 [] = { 0, 0,  }
VSHL/VSHLQ:40:result_uint8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VSHL/VSHLQ:41:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VSHL/VSHLQ:42:result_uint32x4 [] = { 0, 0, 0, 0,  }
VSHL/VSHLQ:43:result_uint64x2 [] = { 0, 0,  }
VSHL/VSHLQ:44:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHL/VSHLQ:45:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VSHL/VSHLQ:46:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSHL/VSHLQ:47:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VSHL/VSHLQ (negative shift amount) output:
VSHL/VSHLQ:48:result_int8x8 [] = { fffffff8, fffffff8, fffffff9, fffffff9, fffffffa, fffffffa, fffffffb, fffffffb,  }
VSHL/VSHLQ:49:result_int16x4 [] = { fffffff8, fffffff8, fffffff9, fffffff9,  }
VSHL/VSHLQ:50:result_int32x2 [] = { fffffffc, fffffffc,  }
VSHL/VSHLQ:51:result_int64x1 [] = { ffffffffffffffff,  }
VSHL/VSHLQ:52:result_uint8x8 [] = { 78, 78, 79, 79, 7a, 7a, 7b, 7b,  }
VSHL/VSHLQ:53:result_uint16x4 [] = { 7ff8, 7ff8, 7ff9, 7ff9,  }
VSHL/VSHLQ:54:result_uint32x2 [] = { 3ffffffc, 3ffffffc,  }
VSHL/VSHLQ:55:result_uint64x1 [] = { fffffffffffffff,  }
VSHL/VSHLQ:56:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHL/VSHLQ:57:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VSHL/VSHLQ:58:result_float32x2 [] = { 33333333, 33333333,  }
VSHL/VSHLQ:59:result_float16x4 [] = { 0, 0, 0, 0,  }
VSHL/VSHLQ:60:result_int8x16 [] = { fffffffc, fffffffc, fffffffc, fffffffc, fffffffd, fffffffd, fffffffd, fffffffd, fffffffe, fffffffe, fffffffe, fffffffe, ffffffff, ffffffff, ffffffff, ffffffff,  }
VSHL/VSHLQ:61:result_int16x8 [] = { ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff,  }
VSHL/VSHLQ:62:result_int32x4 [] = { fffffffe, fffffffe, fffffffe, fffffffe,  }
VSHL/VSHLQ:63:result_int64x2 [] = { ffffffffffffffff, ffffffffffffffff,  }
VSHL/VSHLQ:64:result_uint8x16 [] = { 3c, 3c, 3c, 3c, 3d, 3d, 3d, 3d, 3e, 3e, 3e, 3e, 3f, 3f, 3f, 3f,  }
VSHL/VSHLQ:65:result_uint16x8 [] = { 7ff, 7ff, 7ff, 7ff, 7ff, 7ff, 7ff, 7ff,  }
VSHL/VSHLQ:66:result_uint32x4 [] = { 1ffffffe, 1ffffffe, 1ffffffe, 1ffffffe,  }
VSHL/VSHLQ:67:result_uint64x2 [] = { 7ffffffffffffff, 7ffffffffffffff,  }
VSHL/VSHLQ:68:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHL/VSHLQ:69:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VSHL/VSHLQ:70:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSHL/VSHLQ:71:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VSHL_N output:
VSHL_N:0:result_int8x8 [] = { ffffffe0, ffffffe2, ffffffe4, ffffffe6, ffffffe8, ffffffea, ffffffec, ffffffee,  }
VSHL_N:1:result_int16x4 [] = { ffffffe0, ffffffe2, ffffffe4, ffffffe6,  }
VSHL_N:2:result_int32x2 [] = { ffffff80, ffffff88,  }
VSHL_N:3:result_int64x1 [] = { ffffffffffffffc0,  }
VSHL_N:4:result_uint8x8 [] = { c0, c4, c8, cc, d0, d4, d8, dc,  }
VSHL_N:5:result_uint16x4 [] = { ff00, ff10, ff20, ff30,  }
VSHL_N:6:result_uint32x2 [] = { ffffff80, ffffff88,  }
VSHL_N:7:result_uint64x1 [] = { ffffffffffffffe0,  }
VSHL_N:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHL_N:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VSHL_N:10:result_float32x2 [] = { 33333333, 33333333,  }
VSHL_N:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VSHL_N:12:result_int8x16 [] = { 0, 20, 40, 60, ffffff80, ffffffa0, ffffffc0, ffffffe0, 0, 20, 40, 60, ffffff80, ffffffa0, ffffffc0, ffffffe0,  }
VSHL_N:13:result_int16x8 [] = { ffffffe0, ffffffe2, ffffffe4, ffffffe6, ffffffe8, ffffffea, ffffffec, ffffffee,  }
VSHL_N:14:result_int32x4 [] = { ffffffc0, ffffffc4, ffffffc8, ffffffcc,  }
VSHL_N:15:result_int64x2 [] = { ffffffffffffffc0, ffffffffffffffc4,  }
VSHL_N:16:result_uint8x16 [] = { c0, c4, c8, cc, d0, d4, d8, dc, e0, e4, e8, ec, f0, f4, f8, fc,  }
VSHL_N:17:result_uint16x8 [] = { ff80, ff88, ff90, ff98, ffa0, ffa8, ffb0, ffb8,  }
VSHL_N:18:result_uint32x4 [] = { ffffffc0, ffffffc4, ffffffc8, ffffffcc,  }
VSHL_N:19:result_uint64x2 [] = { ffffffffffffffe0, ffffffffffffffe2,  }
VSHL_N:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHL_N:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VSHL_N:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSHL_N:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHL/VQSHLQ (with input = 0) cumulative saturation output:
VQSHL/VQSHLQ:0:vqshl_s8 Neon cumulative saturation 0
VQSHL/VQSHLQ:1:vqshl_s16 Neon cumulative saturation 0
VQSHL/VQSHLQ:2:vqshl_s32 Neon cumulative saturation 0
VQSHL/VQSHLQ:3:vqshl_s64 Neon cumulative saturation 0
VQSHL/VQSHLQ:4:vqshl_u8 Neon cumulative saturation 0
VQSHL/VQSHLQ:5:vqshl_u16 Neon cumulative saturation 0
VQSHL/VQSHLQ:6:vqshl_u32 Neon cumulative saturation 0
VQSHL/VQSHLQ:7:vqshl_u64 Neon cumulative saturation 0
VQSHL/VQSHLQ:8:vqshlq_s8 Neon cumulative saturation 0
VQSHL/VQSHLQ:9:vqshlq_s16 Neon cumulative saturation 0
VQSHL/VQSHLQ:10:vqshlq_s32 Neon cumulative saturation 0
VQSHL/VQSHLQ:11:vqshlq_s64 Neon cumulative saturation 0
VQSHL/VQSHLQ:12:vqshlq_u8 Neon cumulative saturation 0
VQSHL/VQSHLQ:13:vqshlq_u16 Neon cumulative saturation 0
VQSHL/VQSHLQ:14:vqshlq_u32 Neon cumulative saturation 0
VQSHL/VQSHLQ:15:vqshlq_u64 Neon cumulative saturation 0

VQSHL/VQSHLQ (with input = 0) output:
VQSHL/VQSHLQ:16:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQSHL/VQSHLQ:17:result_int16x4 [] = { 0, 0, 0, 0,  }
VQSHL/VQSHLQ:18:result_int32x2 [] = { 0, 0,  }
VQSHL/VQSHLQ:19:result_int64x1 [] = { 0,  }
VQSHL/VQSHLQ:20:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQSHL/VQSHLQ:21:result_uint16x4 [] = { 0, 0, 0, 0,  }
VQSHL/VQSHLQ:22:result_uint32x2 [] = { 0, 0,  }
VQSHL/VQSHLQ:23:result_uint64x1 [] = { 0,  }
VQSHL/VQSHLQ:24:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL/VQSHLQ:25:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHL/VQSHLQ:26:result_float32x2 [] = { 33333333, 33333333,  }
VQSHL/VQSHLQ:27:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHL/VQSHLQ:28:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VQSHL/VQSHLQ:29:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQSHL/VQSHLQ:30:result_int32x4 [] = { 0, 0, 0, 0,  }
VQSHL/VQSHLQ:31:result_int64x2 [] = { 0, 0,  }
VQSHL/VQSHLQ:32:result_uint8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VQSHL/VQSHLQ:33:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQSHL/VQSHLQ:34:result_uint32x4 [] = { 0, 0, 0, 0,  }
VQSHL/VQSHLQ:35:result_uint64x2 [] = { 0, 0,  }
VQSHL/VQSHLQ:36:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL/VQSHLQ:37:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHL/VQSHLQ:38:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHL/VQSHLQ:39:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHL/VQSHLQ (input 0 and negative shift amount) cumulative saturation output:
VQSHL/VQSHLQ:40:vqshl_s8 Neon cumulative saturation 0
VQSHL/VQSHLQ:41:vqshl_s16 Neon cumulative saturation 0
VQSHL/VQSHLQ:42:vqshl_s32 Neon cumulative saturation 0
VQSHL/VQSHLQ:43:vqshl_s64 Neon cumulative saturation 0
VQSHL/VQSHLQ:44:vqshl_u8 Neon cumulative saturation 0
VQSHL/VQSHLQ:45:vqshl_u16 Neon cumulative saturation 0
VQSHL/VQSHLQ:46:vqshl_u32 Neon cumulative saturation 0
VQSHL/VQSHLQ:47:vqshl_u64 Neon cumulative saturation 0
VQSHL/VQSHLQ:48:vqshlq_s8 Neon cumulative saturation 0
VQSHL/VQSHLQ:49:vqshlq_s16 Neon cumulative saturation 0
VQSHL/VQSHLQ:50:vqshlq_s32 Neon cumulative saturation 0
VQSHL/VQSHLQ:51:vqshlq_s64 Neon cumulative saturation 0
VQSHL/VQSHLQ:52:vqshlq_u8 Neon cumulative saturation 0
VQSHL/VQSHLQ:53:vqshlq_u16 Neon cumulative saturation 0
VQSHL/VQSHLQ:54:vqshlq_u32 Neon cumulative saturation 0
VQSHL/VQSHLQ:55:vqshlq_u64 Neon cumulative saturation 0

VQSHL/VQSHLQ (input 0 and negative shift amount) output:
VQSHL/VQSHLQ:56:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQSHL/VQSHLQ:57:result_int16x4 [] = { 0, 0, 0, 0,  }
VQSHL/VQSHLQ:58:result_int32x2 [] = { 0, 0,  }
VQSHL/VQSHLQ:59:result_int64x1 [] = { 0,  }
VQSHL/VQSHLQ:60:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQSHL/VQSHLQ:61:result_uint16x4 [] = { 0, 0, 0, 0,  }
VQSHL/VQSHLQ:62:result_uint32x2 [] = { 0, 0,  }
VQSHL/VQSHLQ:63:result_uint64x1 [] = { 0,  }
VQSHL/VQSHLQ:64:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL/VQSHLQ:65:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHL/VQSHLQ:66:result_float32x2 [] = { 33333333, 33333333,  }
VQSHL/VQSHLQ:67:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHL/VQSHLQ:68:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VQSHL/VQSHLQ:69:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQSHL/VQSHLQ:70:result_int32x4 [] = { 0, 0, 0, 0,  }
VQSHL/VQSHLQ:71:result_int64x2 [] = { 0, 0,  }
VQSHL/VQSHLQ:72:result_uint8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VQSHL/VQSHLQ:73:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQSHL/VQSHLQ:74:result_uint32x4 [] = { 0, 0, 0, 0,  }
VQSHL/VQSHLQ:75:result_uint64x2 [] = { 0, 0,  }
VQSHL/VQSHLQ:76:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL/VQSHLQ:77:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHL/VQSHLQ:78:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHL/VQSHLQ:79:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHL/VQSHLQ cumulative saturation output:
VQSHL/VQSHLQ:80:vqshl_s8 Neon cumulative saturation 0
VQSHL/VQSHLQ:81:vqshl_s16 Neon cumulative saturation 0
VQSHL/VQSHLQ:82:vqshl_s32 Neon cumulative saturation 0
VQSHL/VQSHLQ:83:vqshl_s64 Neon cumulative saturation 0
VQSHL/VQSHLQ:84:vqshl_u8 Neon cumulative saturation 1
VQSHL/VQSHLQ:85:vqshl_u16 Neon cumulative saturation 1
VQSHL/VQSHLQ:86:vqshl_u32 Neon cumulative saturation 1
VQSHL/VQSHLQ:87:vqshl_u64 Neon cumulative saturation 0
VQSHL/VQSHLQ:88:vqshlq_s8 Neon cumulative saturation 1
VQSHL/VQSHLQ:89:vqshlq_s16 Neon cumulative saturation 1
VQSHL/VQSHLQ:90:vqshlq_s32 Neon cumulative saturation 1
VQSHL/VQSHLQ:91:vqshlq_s64 Neon cumulative saturation 1
VQSHL/VQSHLQ:92:vqshlq_u8 Neon cumulative saturation 1
VQSHL/VQSHLQ:93:vqshlq_u16 Neon cumulative saturation 1
VQSHL/VQSHLQ:94:vqshlq_u32 Neon cumulative saturation 1
VQSHL/VQSHLQ:95:vqshlq_u64 Neon cumulative saturation 1

VQSHL/VQSHLQ output:
VQSHL/VQSHLQ:96:result_int8x8 [] = { ffffffe0, ffffffe2, ffffffe4, ffffffe6, ffffffe8, ffffffea, ffffffec, ffffffee,  }
VQSHL/VQSHLQ:97:result_int16x4 [] = { ffffff80, ffffff88, ffffff90, ffffff98,  }
VQSHL/VQSHLQ:98:result_int32x2 [] = { fffff000, fffff100,  }
VQSHL/VQSHLQ:99:result_int64x1 [] = { fffffffffffffffe,  }
VQSHL/VQSHLQ:100:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQSHL/VQSHLQ:101:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQSHL/VQSHLQ:102:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQSHL/VQSHLQ:103:result_uint64x1 [] = { 1ffffffffffffffe,  }
VQSHL/VQSHLQ:104:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL/VQSHLQ:105:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHL/VQSHLQ:106:result_float32x2 [] = { 33333333, 33333333,  }
VQSHL/VQSHLQ:107:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHL/VQSHLQ:108:result_int8x16 [] = { ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80,  }
VQSHL/VQSHLQ:109:result_int16x8 [] = { ffff8000, ffff8000, ffff8000, ffff8000, ffff8000, ffff8000, ffff8000, ffff8000,  }
VQSHL/VQSHLQ:110:result_int32x4 [] = { 80000000, 80000000, 80000000, 80000000,  }
VQSHL/VQSHLQ:111:result_int64x2 [] = { 8000000000000000, 8000000000000000,  }
VQSHL/VQSHLQ:112:result_uint8x16 [] = { ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff,  }
VQSHL/VQSHLQ:113:result_uint16x8 [] = { ffff, ffff, ffff, ffff, ffff, ffff, ffff, ffff,  }
VQSHL/VQSHLQ:114:result_uint32x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }
VQSHL/VQSHLQ:115:result_uint64x2 [] = { ffffffffffffffff, ffffffffffffffff,  }
VQSHL/VQSHLQ:116:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL/VQSHLQ:117:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHL/VQSHLQ:118:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHL/VQSHLQ:119:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHL/VQSHLQ (negative shift amount) cumulative saturation output:
VQSHL/VQSHLQ:120:vqshl_s8 Neon cumulative saturation 0
VQSHL/VQSHLQ:121:vqshl_s16 Neon cumulative saturation 0
VQSHL/VQSHLQ:122:vqshl_s32 Neon cumulative saturation 0
VQSHL/VQSHLQ:123:vqshl_s64 Neon cumulative saturation 0
VQSHL/VQSHLQ:124:vqshl_u8 Neon cumulative saturation 0
VQSHL/VQSHLQ:125:vqshl_u16 Neon cumulative saturation 0
VQSHL/VQSHLQ:126:vqshl_u32 Neon cumulative saturation 0
VQSHL/VQSHLQ:127:vqshl_u64 Neon cumulative saturation 0
VQSHL/VQSHLQ:128:vqshlq_s8 Neon cumulative saturation 0
VQSHL/VQSHLQ:129:vqshlq_s16 Neon cumulative saturation 0
VQSHL/VQSHLQ:130:vqshlq_s32 Neon cumulative saturation 0
VQSHL/VQSHLQ:131:vqshlq_s64 Neon cumulative saturation 0
VQSHL/VQSHLQ:132:vqshlq_u8 Neon cumulative saturation 0
VQSHL/VQSHLQ:133:vqshlq_u16 Neon cumulative saturation 0
VQSHL/VQSHLQ:134:vqshlq_u32 Neon cumulative saturation 0
VQSHL/VQSHLQ:135:vqshlq_u64 Neon cumulative saturation 0

VQSHL/VQSHLQ (negative shift amount) output:
VQSHL/VQSHLQ:136:result_int8x8 [] = { fffffff8, fffffff8, fffffff9, fffffff9, fffffffa, fffffffa, fffffffb, fffffffb,  }
VQSHL/VQSHLQ:137:result_int16x4 [] = { fffffffc, fffffffc, fffffffc, fffffffc,  }
VQSHL/VQSHLQ:138:result_int32x2 [] = { fffffffe, fffffffe,  }
VQSHL/VQSHLQ:139:result_int64x1 [] = { ffffffffffffffff,  }
VQSHL/VQSHLQ:140:result_uint8x8 [] = { 78, 78, 79, 79, 7a, 7a, 7b, 7b,  }
VQSHL/VQSHLQ:141:result_uint16x4 [] = { 3ffc, 3ffc, 3ffc, 3ffc,  }
VQSHL/VQSHLQ:142:result_uint32x2 [] = { 1ffffffe, 1ffffffe,  }
VQSHL/VQSHLQ:143:result_uint64x1 [] = { fffffffffffffff,  }
VQSHL/VQSHLQ:144:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL/VQSHLQ:145:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHL/VQSHLQ:146:result_float32x2 [] = { 33333333, 33333333,  }
VQSHL/VQSHLQ:147:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHL/VQSHLQ:148:result_int8x16 [] = { ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff,  }
VQSHL/VQSHLQ:149:result_int16x8 [] = { ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff,  }
VQSHL/VQSHLQ:150:result_int32x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }
VQSHL/VQSHLQ:151:result_int64x2 [] = { ffffffffffffffff, ffffffffffffffff,  }
VQSHL/VQSHLQ:152:result_uint8x16 [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  }
VQSHL/VQSHLQ:153:result_uint16x8 [] = { 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f,  }
VQSHL/VQSHLQ:154:result_uint32x4 [] = { 7ffff, 7ffff, 7ffff, 7ffff,  }
VQSHL/VQSHLQ:155:result_uint64x2 [] = { fffffffffff, fffffffffff,  }
VQSHL/VQSHLQ:156:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL/VQSHLQ:157:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHL/VQSHLQ:158:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHL/VQSHLQ:159:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHL/VQSHLQ (large shift amount, negative input) cumulative saturation output:
VQSHL/VQSHLQ:160:vqshl_s8 Neon cumulative saturation 1
VQSHL/VQSHLQ:161:vqshl_s16 Neon cumulative saturation 1
VQSHL/VQSHLQ:162:vqshl_s32 Neon cumulative saturation 1
VQSHL/VQSHLQ:163:vqshl_s64 Neon cumulative saturation 1
VQSHL/VQSHLQ:164:vqshl_u8 Neon cumulative saturation 1
VQSHL/VQSHLQ:165:vqshl_u16 Neon cumulative saturation 1
VQSHL/VQSHLQ:166:vqshl_u32 Neon cumulative saturation 1
VQSHL/VQSHLQ:167:vqshl_u64 Neon cumulative saturation 1
VQSHL/VQSHLQ:168:vqshlq_s8 Neon cumulative saturation 1
VQSHL/VQSHLQ:169:vqshlq_s16 Neon cumulative saturation 1
VQSHL/VQSHLQ:170:vqshlq_s32 Neon cumulative saturation 1
VQSHL/VQSHLQ:171:vqshlq_s64 Neon cumulative saturation 1
VQSHL/VQSHLQ:172:vqshlq_u8 Neon cumulative saturation 1
VQSHL/VQSHLQ:173:vqshlq_u16 Neon cumulative saturation 1
VQSHL/VQSHLQ:174:vqshlq_u32 Neon cumulative saturation 1
VQSHL/VQSHLQ:175:vqshlq_u64 Neon cumulative saturation 1

VQSHL/VQSHLQ (large shift amount, negative input) output:
VQSHL/VQSHLQ:176:result_int8x8 [] = { ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80,  }
VQSHL/VQSHLQ:177:result_int16x4 [] = { ffff8000, ffff8000, ffff8000, ffff8000,  }
VQSHL/VQSHLQ:178:result_int32x2 [] = { 80000000, 80000000,  }
VQSHL/VQSHLQ:179:result_int64x1 [] = { 8000000000000000,  }
VQSHL/VQSHLQ:180:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQSHL/VQSHLQ:181:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQSHL/VQSHLQ:182:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQSHL/VQSHLQ:183:result_uint64x1 [] = { ffffffffffffffff,  }
VQSHL/VQSHLQ:184:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL/VQSHLQ:185:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHL/VQSHLQ:186:result_float32x2 [] = { 33333333, 33333333,  }
VQSHL/VQSHLQ:187:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHL/VQSHLQ:188:result_int8x16 [] = { ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80,  }
VQSHL/VQSHLQ:189:result_int16x8 [] = { ffff8000, ffff8000, ffff8000, ffff8000, ffff8000, ffff8000, ffff8000, ffff8000,  }
VQSHL/VQSHLQ:190:result_int32x4 [] = { 80000000, 80000000, 80000000, 80000000,  }
VQSHL/VQSHLQ:191:result_int64x2 [] = { 8000000000000000, 8000000000000000,  }
VQSHL/VQSHLQ:192:result_uint8x16 [] = { ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff,  }
VQSHL/VQSHLQ:193:result_uint16x8 [] = { ffff, ffff, ffff, ffff, ffff, ffff, ffff, ffff,  }
VQSHL/VQSHLQ:194:result_uint32x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }
VQSHL/VQSHLQ:195:result_uint64x2 [] = { ffffffffffffffff, ffffffffffffffff,  }
VQSHL/VQSHLQ:196:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL/VQSHLQ:197:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHL/VQSHLQ:198:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHL/VQSHLQ:199:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHL/VQSHLQ (check cumulative saturation) cumulative saturation output:
VQSHL/VQSHLQ:200:vqshl_s8 Neon cumulative saturation 0
VQSHL/VQSHLQ:201:vqshl_s16 Neon cumulative saturation 0
VQSHL/VQSHLQ:202:vqshl_s32 Neon cumulative saturation 0
VQSHL/VQSHLQ:203:vqshl_s64 Neon cumulative saturation 0
VQSHL/VQSHLQ:204:vqshl_u8 Neon cumulative saturation 0
VQSHL/VQSHLQ:205:vqshl_u16 Neon cumulative saturation 0
VQSHL/VQSHLQ:206:vqshl_u32 Neon cumulative saturation 0
VQSHL/VQSHLQ:207:vqshl_u64 Neon cumulative saturation 0
VQSHL/VQSHLQ:208:vqshlq_s8 Neon cumulative saturation 0
VQSHL/VQSHLQ:209:vqshlq_s16 Neon cumulative saturation 0
VQSHL/VQSHLQ:210:vqshlq_s32 Neon cumulative saturation 0
VQSHL/VQSHLQ:211:vqshlq_s64 Neon cumulative saturation 0
VQSHL/VQSHLQ:212:vqshlq_u8 Neon cumulative saturation 0
VQSHL/VQSHLQ:213:vqshlq_u16 Neon cumulative saturation 0
VQSHL/VQSHLQ:214:vqshlq_u32 Neon cumulative saturation 0
VQSHL/VQSHLQ:215:vqshlq_u64 Neon cumulative saturation 0

VQSHL/VQSHLQ (check cumulative saturation) output:
VQSHL/VQSHLQ:216:result_int8x8 [] = { 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f,  }
VQSHL/VQSHLQ:217:result_int16x4 [] = { 3fff, 3fff, 3fff, 3fff,  }
VQSHL/VQSHLQ:218:result_int32x2 [] = { 3fffffff, 3fffffff,  }
VQSHL/VQSHLQ:219:result_int64x1 [] = { 3fffffffffffffff,  }
VQSHL/VQSHLQ:220:result_uint8x8 [] = { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f,  }
VQSHL/VQSHLQ:221:result_uint16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQSHL/VQSHLQ:222:result_uint32x2 [] = { 7fffffff, 7fffffff,  }
VQSHL/VQSHLQ:223:result_uint64x1 [] = { 7fffffffffffffff,  }
VQSHL/VQSHLQ:224:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL/VQSHLQ:225:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHL/VQSHLQ:226:result_float32x2 [] = { 33333333, 33333333,  }
VQSHL/VQSHLQ:227:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHL/VQSHLQ:228:result_int8x16 [] = { 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f, 3f,  }
VQSHL/VQSHLQ:229:result_int16x8 [] = { 3fff, 3fff, 3fff, 3fff, 3fff, 3fff, 3fff, 3fff,  }
VQSHL/VQSHLQ:230:result_int32x4 [] = { 3fffffff, 3fffffff, 3fffffff, 3fffffff,  }
VQSHL/VQSHLQ:231:result_int64x2 [] = { 3fffffffffffffff, 3fffffffffffffff,  }
VQSHL/VQSHLQ:232:result_uint8x16 [] = { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f,  }
VQSHL/VQSHLQ:233:result_uint16x8 [] = { 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff,  }
VQSHL/VQSHLQ:234:result_uint32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }
VQSHL/VQSHLQ:235:result_uint64x2 [] = { 7fffffffffffffff, 7fffffffffffffff,  }
VQSHL/VQSHLQ:236:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL/VQSHLQ:237:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHL/VQSHLQ:238:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHL/VQSHLQ:239:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHL/VQSHLQ (large shift amount, positive input) cumulative saturation output:
VQSHL/VQSHLQ:240:vqshl_s8 Neon cumulative saturation 1
VQSHL/VQSHLQ:241:vqshl_s16 Neon cumulative saturation 1
VQSHL/VQSHLQ:242:vqshl_s32 Neon cumulative saturation 1
VQSHL/VQSHLQ:243:vqshl_s64 Neon cumulative saturation 1
VQSHL/VQSHLQ:244:vqshl_u8 Neon cumulative saturation 1
VQSHL/VQSHLQ:245:vqshl_u16 Neon cumulative saturation 1
VQSHL/VQSHLQ:246:vqshl_u32 Neon cumulative saturation 1
VQSHL/VQSHLQ:247:vqshl_u64 Neon cumulative saturation 1
VQSHL/VQSHLQ:248:vqshlq_s8 Neon cumulative saturation 1
VQSHL/VQSHLQ:249:vqshlq_s16 Neon cumulative saturation 1
VQSHL/VQSHLQ:250:vqshlq_s32 Neon cumulative saturation 1
VQSHL/VQSHLQ:251:vqshlq_s64 Neon cumulative saturation 1
VQSHL/VQSHLQ:252:vqshlq_u8 Neon cumulative saturation 1
VQSHL/VQSHLQ:253:vqshlq_u16 Neon cumulative saturation 1
VQSHL/VQSHLQ:254:vqshlq_u32 Neon cumulative saturation 1
VQSHL/VQSHLQ:255:vqshlq_u64 Neon cumulative saturation 1

VQSHL/VQSHLQ (large shift amount, positive input) output:
VQSHL/VQSHLQ:256:result_int8x8 [] = { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f,  }
VQSHL/VQSHLQ:257:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQSHL/VQSHLQ:258:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQSHL/VQSHLQ:259:result_int64x1 [] = { 7fffffffffffffff,  }
VQSHL/VQSHLQ:260:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQSHL/VQSHLQ:261:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQSHL/VQSHLQ:262:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQSHL/VQSHLQ:263:result_uint64x1 [] = { ffffffffffffffff,  }
VQSHL/VQSHLQ:264:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL/VQSHLQ:265:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHL/VQSHLQ:266:result_float32x2 [] = { 33333333, 33333333,  }
VQSHL/VQSHLQ:267:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHL/VQSHLQ:268:result_int8x16 [] = { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f,  }
VQSHL/VQSHLQ:269:result_int16x8 [] = { 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff,  }
VQSHL/VQSHLQ:270:result_int32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }
VQSHL/VQSHLQ:271:result_int64x2 [] = { 7fffffffffffffff, 7fffffffffffffff,  }
VQSHL/VQSHLQ:272:result_uint8x16 [] = { ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff,  }
VQSHL/VQSHLQ:273:result_uint16x8 [] = { ffff, ffff, ffff, ffff, ffff, ffff, ffff, ffff,  }
VQSHL/VQSHLQ:274:result_uint32x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }
VQSHL/VQSHLQ:275:result_uint64x2 [] = { ffffffffffffffff, ffffffffffffffff,  }
VQSHL/VQSHLQ:276:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL/VQSHLQ:277:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHL/VQSHLQ:278:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHL/VQSHLQ:279:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHL/VQSHLQ (check saturation on 64 bits) cumulative saturation output:
VQSHL/VQSHLQ:280:vqshl_s8 Neon cumulative saturation 1
VQSHL/VQSHLQ:281:vqshl_s16 Neon cumulative saturation 1
VQSHL/VQSHLQ:282:vqshl_s32 Neon cumulative saturation 1
VQSHL/VQSHLQ:283:vqshl_s64 Neon cumulative saturation 1
VQSHL/VQSHLQ:284:vqshl_u8 Neon cumulative saturation 1
VQSHL/VQSHLQ:285:vqshl_u16 Neon cumulative saturation 1
VQSHL/VQSHLQ:286:vqshl_u32 Neon cumulative saturation 1
VQSHL/VQSHLQ:287:vqshl_u64 Neon cumulative saturation 1
VQSHL/VQSHLQ:288:vqshlq_s8 Neon cumulative saturation 1
VQSHL/VQSHLQ:289:vqshlq_s16 Neon cumulative saturation 1
VQSHL/VQSHLQ:290:vqshlq_s32 Neon cumulative saturation 1
VQSHL/VQSHLQ:291:vqshlq_s64 Neon cumulative saturation 1
VQSHL/VQSHLQ:292:vqshlq_u8 Neon cumulative saturation 1
VQSHL/VQSHLQ:293:vqshlq_u16 Neon cumulative saturation 1
VQSHL/VQSHLQ:294:vqshlq_u32 Neon cumulative saturation 1
VQSHL/VQSHLQ:295:vqshlq_u64 Neon cumulative saturation 1

VQSHL/VQSHLQ (check saturation on 64 bits) output:
VQSHL/VQSHLQ:296:result_int8x8 [] = { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f,  }
VQSHL/VQSHLQ:297:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQSHL/VQSHLQ:298:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQSHL/VQSHLQ:299:result_int64x1 [] = { 8000000000000000,  }
VQSHL/VQSHLQ:300:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQSHL/VQSHLQ:301:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQSHL/VQSHLQ:302:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQSHL/VQSHLQ:303:result_uint64x1 [] = { ffffffffffffffff,  }
VQSHL/VQSHLQ:304:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL/VQSHLQ:305:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHL/VQSHLQ:306:result_float32x2 [] = { 33333333, 33333333,  }
VQSHL/VQSHLQ:307:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHL/VQSHLQ:308:result_int8x16 [] = { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f,  }
VQSHL/VQSHLQ:309:result_int16x8 [] = { 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff,  }
VQSHL/VQSHLQ:310:result_int32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }
VQSHL/VQSHLQ:311:result_int64x2 [] = { 7fffffffffffffff, 7fffffffffffffff,  }
VQSHL/VQSHLQ:312:result_uint8x16 [] = { ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff,  }
VQSHL/VQSHLQ:313:result_uint16x8 [] = { ffff, ffff, ffff, ffff, ffff, ffff, ffff, ffff,  }
VQSHL/VQSHLQ:314:result_uint32x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }
VQSHL/VQSHLQ:315:result_uint64x2 [] = { ffffffffffffffff, ffffffffffffffff,  }
VQSHL/VQSHLQ:316:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL/VQSHLQ:317:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHL/VQSHLQ:318:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHL/VQSHLQ:319:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHL_N/VQSHLQ_N cumulative saturation output:
VQSHL_N/VQSHLQ_N:0:vqshl_n_s8 Neon cumulative saturation 0
VQSHL_N/VQSHLQ_N:1:vqshl_n_s16 Neon cumulative saturation 0
VQSHL_N/VQSHLQ_N:2:vqshl_n_s32 Neon cumulative saturation 0
VQSHL_N/VQSHLQ_N:3:vqshl_n_s64 Neon cumulative saturation 0
VQSHL_N/VQSHLQ_N:4:vqshl_n_u8 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:5:vqshl_n_u16 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:6:vqshl_n_u32 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:7:vqshl_n_u64 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:8:vqshlq_n_s8 Neon cumulative saturation 0
VQSHL_N/VQSHLQ_N:9:vqshlq_n_s16 Neon cumulative saturation 0
VQSHL_N/VQSHLQ_N:10:vqshlq_n_s32 Neon cumulative saturation 0
VQSHL_N/VQSHLQ_N:11:vqshlq_n_s64 Neon cumulative saturation 0
VQSHL_N/VQSHLQ_N:12:vqshlq_n_u8 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:13:vqshlq_n_u16 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:14:vqshlq_n_u32 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:15:vqshlq_n_u64 Neon cumulative saturation 1

VQSHL_N/VQSHLQ_N output:
VQSHL_N/VQSHLQ_N:16:result_int8x8 [] = { ffffffc0, ffffffc4, ffffffc8, ffffffcc, ffffffd0, ffffffd4, ffffffd8, ffffffdc,  }
VQSHL_N/VQSHLQ_N:17:result_int16x4 [] = { ffffffe0, ffffffe2, ffffffe4, ffffffe6,  }
VQSHL_N/VQSHLQ_N:18:result_int32x2 [] = { ffffffe0, ffffffe2,  }
VQSHL_N/VQSHLQ_N:19:result_int64x1 [] = { ffffffffffffffc0,  }
VQSHL_N/VQSHLQ_N:20:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQSHL_N/VQSHLQ_N:21:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQSHL_N/VQSHLQ_N:22:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQSHL_N/VQSHLQ_N:23:result_uint64x1 [] = { ffffffffffffffff,  }
VQSHL_N/VQSHLQ_N:24:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL_N/VQSHLQ_N:25:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHL_N/VQSHLQ_N:26:result_float32x2 [] = { 33333333, 33333333,  }
VQSHL_N/VQSHLQ_N:27:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHL_N/VQSHLQ_N:28:result_int8x16 [] = { ffffffc0, ffffffc4, ffffffc8, ffffffcc, ffffffd0, ffffffd4, ffffffd8, ffffffdc, ffffffe0, ffffffe4, ffffffe8, ffffffec, fffffff0, fffffff4, fffffff8, fffffffc,  }
VQSHL_N/VQSHLQ_N:29:result_int16x8 [] = { ffffffe0, ffffffe2, ffffffe4, ffffffe6, ffffffe8, ffffffea, ffffffec, ffffffee,  }
VQSHL_N/VQSHLQ_N:30:result_int32x4 [] = { ffffffe0, ffffffe2, ffffffe4, ffffffe6,  }
VQSHL_N/VQSHLQ_N:31:result_int64x2 [] = { ffffffffffffffc0, ffffffffffffffc4,  }
VQSHL_N/VQSHLQ_N:32:result_uint8x16 [] = { ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff,  }
VQSHL_N/VQSHLQ_N:33:result_uint16x8 [] = { ffff, ffff, ffff, ffff, ffff, ffff, ffff, ffff,  }
VQSHL_N/VQSHLQ_N:34:result_uint32x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }
VQSHL_N/VQSHLQ_N:35:result_uint64x2 [] = { ffffffffffffffff, ffffffffffffffff,  }
VQSHL_N/VQSHLQ_N:36:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL_N/VQSHLQ_N:37:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHL_N/VQSHLQ_N:38:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHL_N/VQSHLQ_N:39:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHL_N/VQSHLQ_N (check saturation with large positive input) cumulative saturation output:
VQSHL_N/VQSHLQ_N:40:vqshl_n_s8 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:41:vqshl_n_s16 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:42:vqshl_n_s32 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:43:vqshl_n_s64 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:44:vqshl_n_u8 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:45:vqshl_n_u16 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:46:vqshl_n_u32 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:47:vqshl_n_u64 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:48:vqshlq_n_s8 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:49:vqshlq_n_s16 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:50:vqshlq_n_s32 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:51:vqshlq_n_s64 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:52:vqshlq_n_u8 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:53:vqshlq_n_u16 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:54:vqshlq_n_u32 Neon cumulative saturation 1
VQSHL_N/VQSHLQ_N:55:vqshlq_n_u64 Neon cumulative saturation 1

VQSHL_N/VQSHLQ_N (check saturation with large positive input) output:
VQSHL_N/VQSHLQ_N:56:result_int8x8 [] = { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f,  }
VQSHL_N/VQSHLQ_N:57:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQSHL_N/VQSHLQ_N:58:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQSHL_N/VQSHLQ_N:59:result_int64x1 [] = { 7fffffffffffffff,  }
VQSHL_N/VQSHLQ_N:60:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQSHL_N/VQSHLQ_N:61:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQSHL_N/VQSHLQ_N:62:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQSHL_N/VQSHLQ_N:63:result_uint64x1 [] = { ffffffffffffffff,  }
VQSHL_N/VQSHLQ_N:64:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL_N/VQSHLQ_N:65:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHL_N/VQSHLQ_N:66:result_float32x2 [] = { 33333333, 33333333,  }
VQSHL_N/VQSHLQ_N:67:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHL_N/VQSHLQ_N:68:result_int8x16 [] = { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f,  }
VQSHL_N/VQSHLQ_N:69:result_int16x8 [] = { 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff,  }
VQSHL_N/VQSHLQ_N:70:result_int32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }
VQSHL_N/VQSHLQ_N:71:result_int64x2 [] = { 7fffffffffffffff, 7fffffffffffffff,  }
VQSHL_N/VQSHLQ_N:72:result_uint8x16 [] = { ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff,  }
VQSHL_N/VQSHLQ_N:73:result_uint16x8 [] = { ffff, ffff, ffff, ffff, ffff, ffff, ffff, ffff,  }
VQSHL_N/VQSHLQ_N:74:result_uint32x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }
VQSHL_N/VQSHLQ_N:75:result_uint64x2 [] = { ffffffffffffffff, ffffffffffffffff,  }
VQSHL_N/VQSHLQ_N:76:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHL_N/VQSHLQ_N:77:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHL_N/VQSHLQ_N:78:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHL_N/VQSHLQ_N:79:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSHL/VRSHLQ (with input = 0) output:
VRSHL/VRSHLQ:0:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:1:result_int16x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:2:result_int32x2 [] = { 0, 0,  }
VRSHL/VRSHLQ:3:result_int64x1 [] = { 0,  }
VRSHL/VRSHLQ:4:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:5:result_uint16x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:6:result_uint32x2 [] = { 0, 0,  }
VRSHL/VRSHLQ:7:result_uint64x1 [] = { 0,  }
VRSHL/VRSHLQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHL/VRSHLQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSHL/VRSHLQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VRSHL/VRSHLQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:12:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:13:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:14:result_int32x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:15:result_int64x2 [] = { 0, 0,  }
VRSHL/VRSHLQ:16:result_uint8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:17:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:18:result_uint32x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:19:result_uint64x2 [] = { 0, 0,  }
VRSHL/VRSHLQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHL/VRSHLQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHL/VRSHLQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHL/VRSHLQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSHL/VRSHLQ (input 0 and negative shift amount) output:
VRSHL/VRSHLQ:24:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:25:result_int16x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:26:result_int32x2 [] = { 0, 0,  }
VRSHL/VRSHLQ:27:result_int64x1 [] = { 0,  }
VRSHL/VRSHLQ:28:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:29:result_uint16x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:30:result_uint32x2 [] = { 0, 0,  }
VRSHL/VRSHLQ:31:result_uint64x1 [] = { 0,  }
VRSHL/VRSHLQ:32:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHL/VRSHLQ:33:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSHL/VRSHLQ:34:result_float32x2 [] = { 33333333, 33333333,  }
VRSHL/VRSHLQ:35:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:36:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:37:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:38:result_int32x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:39:result_int64x2 [] = { 0, 0,  }
VRSHL/VRSHLQ:40:result_uint8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:41:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:42:result_uint32x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:43:result_uint64x2 [] = { 0, 0,  }
VRSHL/VRSHLQ:44:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHL/VRSHLQ:45:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHL/VRSHLQ:46:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHL/VRSHLQ:47:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSHL/VRSHLQ output:
VRSHL/VRSHLQ:48:result_int8x8 [] = { ffffffe0, ffffffe2, ffffffe4, ffffffe6, ffffffe8, ffffffea, ffffffec, ffffffee,  }
VRSHL/VRSHLQ:49:result_int16x4 [] = { ffffff80, ffffff88, ffffff90, ffffff98,  }
VRSHL/VRSHLQ:50:result_int32x2 [] = { fffff000, fffff100,  }
VRSHL/VRSHLQ:51:result_int64x1 [] = { fffffffffffffffe,  }
VRSHL/VRSHLQ:52:result_uint8x8 [] = { e0, e2, e4, e6, e8, ea, ec, ee,  }
VRSHL/VRSHLQ:53:result_uint16x4 [] = { ff80, ff88, ff90, ff98,  }
VRSHL/VRSHLQ:54:result_uint32x2 [] = { fffff000, fffff100,  }
VRSHL/VRSHLQ:55:result_uint64x1 [] = { 1ffffffffffffffe,  }
VRSHL/VRSHLQ:56:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHL/VRSHLQ:57:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSHL/VRSHLQ:58:result_float32x2 [] = { 33333333, 33333333,  }
VRSHL/VRSHLQ:59:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:60:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:61:result_int16x8 [] = { 0, 1000, 2000, 3000, 4000, 5000, 6000, 7000,  }
VRSHL/VRSHLQ:62:result_int32x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:63:result_int64x2 [] = { 0, 8000000000000000,  }
VRSHL/VRSHLQ:64:result_uint8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:65:result_uint16x8 [] = { 0, 1000, 2000, 3000, 4000, 5000, 6000, 7000,  }
VRSHL/VRSHLQ:66:result_uint32x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:67:result_uint64x2 [] = { 0, 8000000000000000,  }
VRSHL/VRSHLQ:68:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHL/VRSHLQ:69:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHL/VRSHLQ:70:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHL/VRSHLQ:71:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSHL/VRSHLQ (negative shift amount) output:
VRSHL/VRSHLQ:72:result_int8x8 [] = { fffffff8, fffffff9, fffffff9, fffffffa, fffffffa, fffffffb, fffffffb, fffffffc,  }
VRSHL/VRSHLQ:73:result_int16x4 [] = { fffffffc, fffffffc, fffffffd, fffffffd,  }
VRSHL/VRSHLQ:74:result_int32x2 [] = { fffffffe, fffffffe,  }
VRSHL/VRSHLQ:75:result_int64x1 [] = { ffffffffffffffff,  }
VRSHL/VRSHLQ:76:result_uint8x8 [] = { 78, 79, 79, 7a, 7a, 7b, 7b, 7c,  }
VRSHL/VRSHLQ:77:result_uint16x4 [] = { 3ffc, 3ffc, 3ffd, 3ffd,  }
VRSHL/VRSHLQ:78:result_uint32x2 [] = { 1ffffffe, 1ffffffe,  }
VRSHL/VRSHLQ:79:result_uint64x1 [] = { fffffffffffffff,  }
VRSHL/VRSHLQ:80:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHL/VRSHLQ:81:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSHL/VRSHLQ:82:result_float32x2 [] = { 33333333, 33333333,  }
VRSHL/VRSHLQ:83:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:84:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:85:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:86:result_int32x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:87:result_int64x2 [] = { 0, 0,  }
VRSHL/VRSHLQ:88:result_uint8x16 [] = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,  }
VRSHL/VRSHLQ:89:result_uint16x8 [] = { 20, 20, 20, 20, 20, 20, 20, 20,  }
VRSHL/VRSHLQ:90:result_uint32x4 [] = { 80000, 80000, 80000, 80000,  }
VRSHL/VRSHLQ:91:result_uint64x2 [] = { 100000000000, 100000000000,  }
VRSHL/VRSHLQ:92:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHL/VRSHLQ:93:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHL/VRSHLQ:94:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHL/VRSHLQ:95:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSHL/VRSHLQ (checking round_const overflow: shift by -1) output:
VRSHL/VRSHLQ:96:result_int8x8 [] = { 40, 40, 40, 40, 40, 40, 40, 40,  }
VRSHL/VRSHLQ:97:result_int16x4 [] = { 4000, 4000, 4000, 4000,  }
VRSHL/VRSHLQ:98:result_int32x2 [] = { 40000000, 40000000,  }
VRSHL/VRSHLQ:99:result_int64x1 [] = { 4000000000000000,  }
VRSHL/VRSHLQ:100:result_uint8x8 [] = { 80, 80, 80, 80, 80, 80, 80, 80,  }
VRSHL/VRSHLQ:101:result_uint16x4 [] = { 8000, 8000, 8000, 8000,  }
VRSHL/VRSHLQ:102:result_uint32x2 [] = { 80000000, 80000000,  }
VRSHL/VRSHLQ:103:result_uint64x1 [] = { 8000000000000000,  }
VRSHL/VRSHLQ:104:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHL/VRSHLQ:105:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSHL/VRSHLQ:106:result_float32x2 [] = { 33333333, 33333333,  }
VRSHL/VRSHLQ:107:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:108:result_int8x16 [] = { 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,  }
VRSHL/VRSHLQ:109:result_int16x8 [] = { 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000,  }
VRSHL/VRSHLQ:110:result_int32x4 [] = { 40000000, 40000000, 40000000, 40000000,  }
VRSHL/VRSHLQ:111:result_int64x2 [] = { 4000000000000000, 4000000000000000,  }
VRSHL/VRSHLQ:112:result_uint8x16 [] = { 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80,  }
VRSHL/VRSHLQ:113:result_uint16x8 [] = { 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000,  }
VRSHL/VRSHLQ:114:result_uint32x4 [] = { 80000000, 80000000, 80000000, 80000000,  }
VRSHL/VRSHLQ:115:result_uint64x2 [] = { 8000000000000000, 8000000000000000,  }
VRSHL/VRSHLQ:116:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHL/VRSHLQ:117:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHL/VRSHLQ:118:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHL/VRSHLQ:119:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSHL/VRSHLQ (checking round_const overflow: shift by -3) output:
VRSHL/VRSHLQ:120:result_int8x8 [] = { 10, 10, 10, 10, 10, 10, 10, 10,  }
VRSHL/VRSHLQ:121:result_int16x4 [] = { 1000, 1000, 1000, 1000,  }
VRSHL/VRSHLQ:122:result_int32x2 [] = { 10000000, 10000000,  }
VRSHL/VRSHLQ:123:result_int64x1 [] = { 1000000000000000,  }
VRSHL/VRSHLQ:124:result_uint8x8 [] = { 20, 20, 20, 20, 20, 20, 20, 20,  }
VRSHL/VRSHLQ:125:result_uint16x4 [] = { 2000, 2000, 2000, 2000,  }
VRSHL/VRSHLQ:126:result_uint32x2 [] = { 20000000, 20000000,  }
VRSHL/VRSHLQ:127:result_uint64x1 [] = { 2000000000000000,  }
VRSHL/VRSHLQ:128:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHL/VRSHLQ:129:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSHL/VRSHLQ:130:result_float32x2 [] = { 33333333, 33333333,  }
VRSHL/VRSHLQ:131:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:132:result_int8x16 [] = { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  }
VRSHL/VRSHLQ:133:result_int16x8 [] = { 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  }
VRSHL/VRSHLQ:134:result_int32x4 [] = { 10000000, 10000000, 10000000, 10000000,  }
VRSHL/VRSHLQ:135:result_int64x2 [] = { 1000000000000000, 1000000000000000,  }
VRSHL/VRSHLQ:136:result_uint8x16 [] = { 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  }
VRSHL/VRSHLQ:137:result_uint16x8 [] = { 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,  }
VRSHL/VRSHLQ:138:result_uint32x4 [] = { 20000000, 20000000, 20000000, 20000000,  }
VRSHL/VRSHLQ:139:result_uint64x2 [] = { 2000000000000000, 2000000000000000,  }
VRSHL/VRSHLQ:140:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHL/VRSHLQ:141:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHL/VRSHLQ:142:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHL/VRSHLQ:143:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSHL/VRSHLQ (checking negative shift amount as large as input vector width) output:
VRSHL/VRSHLQ:144:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:145:result_int16x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:146:result_int32x2 [] = { 0, 0,  }
VRSHL/VRSHLQ:147:result_int64x1 [] = { 0,  }
VRSHL/VRSHLQ:148:result_uint8x8 [] = { 1, 1, 1, 1, 1, 1, 1, 1,  }
VRSHL/VRSHLQ:149:result_uint16x4 [] = { 1, 1, 1, 1,  }
VRSHL/VRSHLQ:150:result_uint32x2 [] = { 1, 1,  }
VRSHL/VRSHLQ:151:result_uint64x1 [] = { 1,  }
VRSHL/VRSHLQ:152:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHL/VRSHLQ:153:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSHL/VRSHLQ:154:result_float32x2 [] = { 33333333, 33333333,  }
VRSHL/VRSHLQ:155:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:156:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:157:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:158:result_int32x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:159:result_int64x2 [] = { 0, 0,  }
VRSHL/VRSHLQ:160:result_uint8x16 [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  }
VRSHL/VRSHLQ:161:result_uint16x8 [] = { 1, 1, 1, 1, 1, 1, 1, 1,  }
VRSHL/VRSHLQ:162:result_uint32x4 [] = { 1, 1, 1, 1,  }
VRSHL/VRSHLQ:163:result_uint64x2 [] = { 1, 1,  }
VRSHL/VRSHLQ:164:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHL/VRSHLQ:165:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHL/VRSHLQ:166:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHL/VRSHLQ:167:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSHL/VRSHLQ (large shift amount) output:
VRSHL/VRSHLQ:168:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:169:result_int16x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:170:result_int32x2 [] = { 0, 0,  }
VRSHL/VRSHLQ:171:result_int64x1 [] = { 0,  }
VRSHL/VRSHLQ:172:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:173:result_uint16x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:174:result_uint32x2 [] = { 0, 0,  }
VRSHL/VRSHLQ:175:result_uint64x1 [] = { 0,  }
VRSHL/VRSHLQ:176:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHL/VRSHLQ:177:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSHL/VRSHLQ:178:result_float32x2 [] = { 33333333, 33333333,  }
VRSHL/VRSHLQ:179:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:180:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:181:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:182:result_int32x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:183:result_int64x2 [] = { 0, 0,  }
VRSHL/VRSHLQ:184:result_uint8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:185:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:186:result_uint32x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:187:result_uint64x2 [] = { 0, 0,  }
VRSHL/VRSHLQ:188:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHL/VRSHLQ:189:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHL/VRSHLQ:190:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHL/VRSHLQ:191:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSHL/VRSHLQ (large negative shift amount) output:
VRSHL/VRSHLQ:192:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:193:result_int16x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:194:result_int32x2 [] = { 0, 0,  }
VRSHL/VRSHLQ:195:result_int64x1 [] = { 0,  }
VRSHL/VRSHLQ:196:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:197:result_uint16x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:198:result_uint32x2 [] = { 0, 0,  }
VRSHL/VRSHLQ:199:result_uint64x1 [] = { 0,  }
VRSHL/VRSHLQ:200:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHL/VRSHLQ:201:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSHL/VRSHLQ:202:result_float32x2 [] = { 33333333, 33333333,  }
VRSHL/VRSHLQ:203:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:204:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:205:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:206:result_int32x4 [] = { 0, 0, 0, 0,  }
VRSHL/VRSHLQ:207:result_int64x2 [] = { 0, 0,  }
VRSHL/VRSHLQ:208:result_uint8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHL/VRSHLQ:209:result_uint16x8 [] = { 1, 1, 1, 1, 1, 1, 1, 1,  }
VRSHL/VRSHLQ:210:result_uint32x4 [] = { 1, 1, 1, 1,  }
VRSHL/VRSHLQ:211:result_uint64x2 [] = { 1, 1,  }
VRSHL/VRSHLQ:212:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHL/VRSHLQ:213:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHL/VRSHLQ:214:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHL/VRSHLQ:215:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VLD2/VLD2Q chunk 0 output:
VLD2/VLD2Q:0:result_int8x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VLD2/VLD2Q:1:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD2/VLD2Q:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VLD2/VLD2Q:3:result_int64x1 [] = { fffffffffffffff0,  }
VLD2/VLD2Q:4:result_uint8x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VLD2/VLD2Q:5:result_uint16x4 [] = { fff0, fff1, fff2, fff3,  }
VLD2/VLD2Q:6:result_uint32x2 [] = { fffffff0, fffffff1,  }
VLD2/VLD2Q:7:result_uint64x1 [] = { fffffffffffffff0,  }
VLD2/VLD2Q:8:result_poly8x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VLD2/VLD2Q:9:result_poly16x4 [] = { fff0, fff1, fff2, fff3,  }
VLD2/VLD2Q:10:result_float32x2 [] = { c1800000, c1700000,  }
VLD2/VLD2Q:11:result_float16x4 [] = { cc00, cb80, cb00, ca80,  }
VLD2/VLD2Q:12:result_int8x16 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7, fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff,  }
VLD2/VLD2Q:13:result_int16x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VLD2/VLD2Q:14:result_int32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD2/VLD2Q:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD2/VLD2Q:16:result_uint8x16 [] = { f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fa, fb, fc, fd, fe, ff,  }
VLD2/VLD2Q:17:result_uint16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, fff6, fff7,  }
VLD2/VLD2Q:18:result_uint32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD2/VLD2Q:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD2/VLD2Q:20:result_poly8x16 [] = { f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fa, fb, fc, fd, fe, ff,  }
VLD2/VLD2Q:21:result_poly16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, fff6, fff7,  }
VLD2/VLD2Q:22:result_float32x4 [] = { c1800000, c1700000, c1600000, c1500000,  }
VLD2/VLD2Q:23:result_float16x8 [] = { cc00, cb80, cb00, ca80, ca00, c980, c900, c880,  }

VLD2/VLD2Q chunk 1 output:
VLD2/VLD2Q:24:result_int8x8 [] = { fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff,  }
VLD2/VLD2Q:25:result_int16x4 [] = { fffffff4, fffffff5, fffffff6, fffffff7,  }
VLD2/VLD2Q:26:result_int32x2 [] = { fffffff2, fffffff3,  }
VLD2/VLD2Q:27:result_int64x1 [] = { fffffffffffffff1,  }
VLD2/VLD2Q:28:result_uint8x8 [] = { f8, f9, fa, fb, fc, fd, fe, ff,  }
VLD2/VLD2Q:29:result_uint16x4 [] = { fff4, fff5, fff6, fff7,  }
VLD2/VLD2Q:30:result_uint32x2 [] = { fffffff2, fffffff3,  }
VLD2/VLD2Q:31:result_uint64x1 [] = { fffffffffffffff1,  }
VLD2/VLD2Q:32:result_poly8x8 [] = { f8, f9, fa, fb, fc, fd, fe, ff,  }
VLD2/VLD2Q:33:result_poly16x4 [] = { fff4, fff5, fff6, fff7,  }
VLD2/VLD2Q:34:result_float32x2 [] = { c1600000, c1500000,  }
VLD2/VLD2Q:35:result_float16x4 [] = { ca00, c980, c900, c880,  }
VLD2/VLD2Q:36:result_int8x16 [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f,  }
VLD2/VLD2Q:37:result_int16x8 [] = { fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff,  }
VLD2/VLD2Q:38:result_int32x4 [] = { fffffff4, fffffff5, fffffff6, fffffff7,  }
VLD2/VLD2Q:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD2/VLD2Q:40:result_uint8x16 [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f,  }
VLD2/VLD2Q:41:result_uint16x8 [] = { fff8, fff9, fffa, fffb, fffc, fffd, fffe, ffff,  }
VLD2/VLD2Q:42:result_uint32x4 [] = { fffffff4, fffffff5, fffffff6, fffffff7,  }
VLD2/VLD2Q:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD2/VLD2Q:44:result_poly8x16 [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f,  }
VLD2/VLD2Q:45:result_poly16x8 [] = { fff8, fff9, fffa, fffb, fffc, fffd, fffe, ffff,  }
VLD2/VLD2Q:46:result_float32x4 [] = { c1400000, c1300000, c1200000, c1100000,  }
VLD2/VLD2Q:47:result_float16x8 [] = { c800, c700, c600, c500, c400, c200, c000, bc00,  }

VLD3/VLD3Q chunk 0 output:
VLD3/VLD3Q:0:result_int8x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VLD3/VLD3Q:1:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD3/VLD3Q:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VLD3/VLD3Q:3:result_int64x1 [] = { fffffffffffffff0,  }
VLD3/VLD3Q:4:result_uint8x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VLD3/VLD3Q:5:result_uint16x4 [] = { fff0, fff1, fff2, fff3,  }
VLD3/VLD3Q:6:result_uint32x2 [] = { fffffff0, fffffff1,  }
VLD3/VLD3Q:7:result_uint64x1 [] = { fffffffffffffff0,  }
VLD3/VLD3Q:8:result_poly8x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VLD3/VLD3Q:9:result_poly16x4 [] = { fff0, fff1, fff2, fff3,  }
VLD3/VLD3Q:10:result_float32x2 [] = { c1800000, c1700000,  }
VLD3/VLD3Q:11:result_float16x4 [] = { cc00, cb80, cb00, ca80,  }
VLD3/VLD3Q:12:result_int8x16 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7, fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff,  }
VLD3/VLD3Q:13:result_int16x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VLD3/VLD3Q:14:result_int32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD3/VLD3Q:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD3/VLD3Q:16:result_uint8x16 [] = { f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fa, fb, fc, fd, fe, ff,  }
VLD3/VLD3Q:17:result_uint16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, fff6, fff7,  }
VLD3/VLD3Q:18:result_uint32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD3/VLD3Q:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD3/VLD3Q:20:result_poly8x16 [] = { f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fa, fb, fc, fd, fe, ff,  }
VLD3/VLD3Q:21:result_poly16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, fff6, fff7,  }
VLD3/VLD3Q:22:result_float32x4 [] = { c1800000, c1700000, c1600000, c1500000,  }
VLD3/VLD3Q:23:result_float16x8 [] = { cc00, cb80, cb00, ca80, ca00, c980, c900, c880,  }

VLD3/VLD3Q chunk 1 output:
VLD3/VLD3Q:24:result_int8x8 [] = { fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff,  }
VLD3/VLD3Q:25:result_int16x4 [] = { fffffff4, fffffff5, fffffff6, fffffff7,  }
VLD3/VLD3Q:26:result_int32x2 [] = { fffffff2, fffffff3,  }
VLD3/VLD3Q:27:result_int64x1 [] = { fffffffffffffff1,  }
VLD3/VLD3Q:28:result_uint8x8 [] = { f8, f9, fa, fb, fc, fd, fe, ff,  }
VLD3/VLD3Q:29:result_uint16x4 [] = { fff4, fff5, fff6, fff7,  }
VLD3/VLD3Q:30:result_uint32x2 [] = { fffffff2, fffffff3,  }
VLD3/VLD3Q:31:result_uint64x1 [] = { fffffffffffffff1,  }
VLD3/VLD3Q:32:result_poly8x8 [] = { f8, f9, fa, fb, fc, fd, fe, ff,  }
VLD3/VLD3Q:33:result_poly16x4 [] = { fff4, fff5, fff6, fff7,  }
VLD3/VLD3Q:34:result_float32x2 [] = { c1600000, c1500000,  }
VLD3/VLD3Q:35:result_float16x4 [] = { ca00, c980, c900, c880,  }
VLD3/VLD3Q:36:result_int8x16 [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f,  }
VLD3/VLD3Q:37:result_int16x8 [] = { fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff,  }
VLD3/VLD3Q:38:result_int32x4 [] = { fffffff4, fffffff5, fffffff6, fffffff7,  }
VLD3/VLD3Q:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD3/VLD3Q:40:result_uint8x16 [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f,  }
VLD3/VLD3Q:41:result_uint16x8 [] = { fff8, fff9, fffa, fffb, fffc, fffd, fffe, ffff,  }
VLD3/VLD3Q:42:result_uint32x4 [] = { fffffff4, fffffff5, fffffff6, fffffff7,  }
VLD3/VLD3Q:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD3/VLD3Q:44:result_poly8x16 [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f,  }
VLD3/VLD3Q:45:result_poly16x8 [] = { fff8, fff9, fffa, fffb, fffc, fffd, fffe, ffff,  }
VLD3/VLD3Q:46:result_float32x4 [] = { c1400000, c1300000, c1200000, c1100000,  }
VLD3/VLD3Q:47:result_float16x8 [] = { c800, c700, c600, c500, c400, c200, c000, bc00,  }

VLD3/VLD3Q chunk 2 output:
VLD3/VLD3Q:48:result_int8x8 [] = { 0, 1, 2, 3, 4, 5, 6, 7,  }
VLD3/VLD3Q:49:result_int16x4 [] = { fffffff8, fffffff9, fffffffa, fffffffb,  }
VLD3/VLD3Q:50:result_int32x2 [] = { fffffff4, fffffff5,  }
VLD3/VLD3Q:51:result_int64x1 [] = { fffffffffffffff2,  }
VLD3/VLD3Q:52:result_uint8x8 [] = { 0, 1, 2, 3, 4, 5, 6, 7,  }
VLD3/VLD3Q:53:result_uint16x4 [] = { fff8, fff9, fffa, fffb,  }
VLD3/VLD3Q:54:result_uint32x2 [] = { fffffff4, fffffff5,  }
VLD3/VLD3Q:55:result_uint64x1 [] = { fffffffffffffff2,  }
VLD3/VLD3Q:56:result_poly8x8 [] = { 0, 1, 2, 3, 4, 5, 6, 7,  }
VLD3/VLD3Q:57:result_poly16x4 [] = { fff8, fff9, fffa, fffb,  }
VLD3/VLD3Q:58:result_float32x2 [] = { c1400000, c1300000,  }
VLD3/VLD3Q:59:result_float16x4 [] = { c800, c700, c600, c500,  }
VLD3/VLD3Q:60:result_int8x16 [] = { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1a, 1b, 1c, 1d, 1e, 1f,  }
VLD3/VLD3Q:61:result_int16x8 [] = { 0, 1, 2, 3, 4, 5, 6, 7,  }
VLD3/VLD3Q:62:result_int32x4 [] = { fffffff8, fffffff9, fffffffa, fffffffb,  }
VLD3/VLD3Q:63:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD3/VLD3Q:64:result_uint8x16 [] = { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1a, 1b, 1c, 1d, 1e, 1f,  }
VLD3/VLD3Q:65:result_uint16x8 [] = { 0, 1, 2, 3, 4, 5, 6, 7,  }
VLD3/VLD3Q:66:result_uint32x4 [] = { fffffff8, fffffff9, fffffffa, fffffffb,  }
VLD3/VLD3Q:67:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD3/VLD3Q:68:result_poly8x16 [] = { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1a, 1b, 1c, 1d, 1e, 1f,  }
VLD3/VLD3Q:69:result_poly16x8 [] = { 0, 1, 2, 3, 4, 5, 6, 7,  }
VLD3/VLD3Q:70:result_float32x4 [] = { c1000000, c0e00000, c0c00000, c0a00000,  }
VLD3/VLD3Q:71:result_float16x8 [] = { 0, 3c00, 4000, 4200, 4400, 4500, 4600, 4700,  }

VLD4/VLD4Q chunk 0 output:
VLD4/VLD4Q:0:result_int8x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VLD4/VLD4Q:1:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD4/VLD4Q:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VLD4/VLD4Q:3:result_int64x1 [] = { fffffffffffffff0,  }
VLD4/VLD4Q:4:result_uint8x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VLD4/VLD4Q:5:result_uint16x4 [] = { fff0, fff1, fff2, fff3,  }
VLD4/VLD4Q:6:result_uint32x2 [] = { fffffff0, fffffff1,  }
VLD4/VLD4Q:7:result_uint64x1 [] = { fffffffffffffff0,  }
VLD4/VLD4Q:8:result_poly8x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VLD4/VLD4Q:9:result_poly16x4 [] = { fff0, fff1, fff2, fff3,  }
VLD4/VLD4Q:10:result_float32x2 [] = { c1800000, c1700000,  }
VLD4/VLD4Q:11:result_float16x4 [] = { cc00, cb80, cb00, ca80,  }
VLD4/VLD4Q:12:result_int8x16 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7, fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff,  }
VLD4/VLD4Q:13:result_int16x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VLD4/VLD4Q:14:result_int32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD4/VLD4Q:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4/VLD4Q:16:result_uint8x16 [] = { f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fa, fb, fc, fd, fe, ff,  }
VLD4/VLD4Q:17:result_uint16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, fff6, fff7,  }
VLD4/VLD4Q:18:result_uint32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD4/VLD4Q:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4/VLD4Q:20:result_poly8x16 [] = { f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fa, fb, fc, fd, fe, ff,  }
VLD4/VLD4Q:21:result_poly16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, fff6, fff7,  }
VLD4/VLD4Q:22:result_float32x4 [] = { c1800000, c1700000, c1600000, c1500000,  }
VLD4/VLD4Q:23:result_float16x8 [] = { cc00, cb80, cb00, ca80, ca00, c980, c900, c880,  }

VLD4/VLD4Q chunk 1 output:
VLD4/VLD4Q:24:result_int8x8 [] = { fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff,  }
VLD4/VLD4Q:25:result_int16x4 [] = { fffffff4, fffffff5, fffffff6, fffffff7,  }
VLD4/VLD4Q:26:result_int32x2 [] = { fffffff2, fffffff3,  }
VLD4/VLD4Q:27:result_int64x1 [] = { fffffffffffffff1,  }
VLD4/VLD4Q:28:result_uint8x8 [] = { f8, f9, fa, fb, fc, fd, fe, ff,  }
VLD4/VLD4Q:29:result_uint16x4 [] = { fff4, fff5, fff6, fff7,  }
VLD4/VLD4Q:30:result_uint32x2 [] = { fffffff2, fffffff3,  }
VLD4/VLD4Q:31:result_uint64x1 [] = { fffffffffffffff1,  }
VLD4/VLD4Q:32:result_poly8x8 [] = { f8, f9, fa, fb, fc, fd, fe, ff,  }
VLD4/VLD4Q:33:result_poly16x4 [] = { fff4, fff5, fff6, fff7,  }
VLD4/VLD4Q:34:result_float32x2 [] = { c1600000, c1500000,  }
VLD4/VLD4Q:35:result_float16x4 [] = { ca00, c980, c900, c880,  }
VLD4/VLD4Q:36:result_int8x16 [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f,  }
VLD4/VLD4Q:37:result_int16x8 [] = { fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff,  }
VLD4/VLD4Q:38:result_int32x4 [] = { fffffff4, fffffff5, fffffff6, fffffff7,  }
VLD4/VLD4Q:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4/VLD4Q:40:result_uint8x16 [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f,  }
VLD4/VLD4Q:41:result_uint16x8 [] = { fff8, fff9, fffa, fffb, fffc, fffd, fffe, ffff,  }
VLD4/VLD4Q:42:result_uint32x4 [] = { fffffff4, fffffff5, fffffff6, fffffff7,  }
VLD4/VLD4Q:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4/VLD4Q:44:result_poly8x16 [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f,  }
VLD4/VLD4Q:45:result_poly16x8 [] = { fff8, fff9, fffa, fffb, fffc, fffd, fffe, ffff,  }
VLD4/VLD4Q:46:result_float32x4 [] = { c1400000, c1300000, c1200000, c1100000,  }
VLD4/VLD4Q:47:result_float16x8 [] = { c800, c700, c600, c500, c400, c200, c000, bc00,  }

VLD4/VLD4Q chunk 2 output:
VLD4/VLD4Q:48:result_int8x8 [] = { 0, 1, 2, 3, 4, 5, 6, 7,  }
VLD4/VLD4Q:49:result_int16x4 [] = { fffffff8, fffffff9, fffffffa, fffffffb,  }
VLD4/VLD4Q:50:result_int32x2 [] = { fffffff4, fffffff5,  }
VLD4/VLD4Q:51:result_int64x1 [] = { fffffffffffffff2,  }
VLD4/VLD4Q:52:result_uint8x8 [] = { 0, 1, 2, 3, 4, 5, 6, 7,  }
VLD4/VLD4Q:53:result_uint16x4 [] = { fff8, fff9, fffa, fffb,  }
VLD4/VLD4Q:54:result_uint32x2 [] = { fffffff4, fffffff5,  }
VLD4/VLD4Q:55:result_uint64x1 [] = { fffffffffffffff2,  }
VLD4/VLD4Q:56:result_poly8x8 [] = { 0, 1, 2, 3, 4, 5, 6, 7,  }
VLD4/VLD4Q:57:result_poly16x4 [] = { fff8, fff9, fffa, fffb,  }
VLD4/VLD4Q:58:result_float32x2 [] = { c1400000, c1300000,  }
VLD4/VLD4Q:59:result_float16x4 [] = { c800, c700, c600, c500,  }
VLD4/VLD4Q:60:result_int8x16 [] = { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1a, 1b, 1c, 1d, 1e, 1f,  }
VLD4/VLD4Q:61:result_int16x8 [] = { 0, 1, 2, 3, 4, 5, 6, 7,  }
VLD4/VLD4Q:62:result_int32x4 [] = { fffffff8, fffffff9, fffffffa, fffffffb,  }
VLD4/VLD4Q:63:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4/VLD4Q:64:result_uint8x16 [] = { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1a, 1b, 1c, 1d, 1e, 1f,  }
VLD4/VLD4Q:65:result_uint16x8 [] = { 0, 1, 2, 3, 4, 5, 6, 7,  }
VLD4/VLD4Q:66:result_uint32x4 [] = { fffffff8, fffffff9, fffffffa, fffffffb,  }
VLD4/VLD4Q:67:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4/VLD4Q:68:result_poly8x16 [] = { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1a, 1b, 1c, 1d, 1e, 1f,  }
VLD4/VLD4Q:69:result_poly16x8 [] = { 0, 1, 2, 3, 4, 5, 6, 7,  }
VLD4/VLD4Q:70:result_float32x4 [] = { c1000000, c0e00000, c0c00000, c0a00000,  }
VLD4/VLD4Q:71:result_float16x8 [] = { 0, 3c00, 4000, 4200, 4400, 4500, 4600, 4700,  }

VLD4/VLD4Q chunk 3 output:
VLD4/VLD4Q:72:result_int8x8 [] = { 8, 9, a, b, c, d, e, f,  }
VLD4/VLD4Q:73:result_int16x4 [] = { fffffffc, fffffffd, fffffffe, ffffffff,  }
VLD4/VLD4Q:74:result_int32x2 [] = { fffffff6, fffffff7,  }
VLD4/VLD4Q:75:result_int64x1 [] = { fffffffffffffff3,  }
VLD4/VLD4Q:76:result_uint8x8 [] = { 8, 9, a, b, c, d, e, f,  }
VLD4/VLD4Q:77:result_uint16x4 [] = { fffc, fffd, fffe, ffff,  }
VLD4/VLD4Q:78:result_uint32x2 [] = { fffffff6, fffffff7,  }
VLD4/VLD4Q:79:result_uint64x1 [] = { fffffffffffffff3,  }
VLD4/VLD4Q:80:result_poly8x8 [] = { 8, 9, a, b, c, d, e, f,  }
VLD4/VLD4Q:81:result_poly16x4 [] = { fffc, fffd, fffe, ffff,  }
VLD4/VLD4Q:82:result_float32x2 [] = { c1200000, c1100000,  }
VLD4/VLD4Q:83:result_float16x4 [] = { c400, c200, c000, bc00,  }
VLD4/VLD4Q:84:result_int8x16 [] = { 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 2a, 2b, 2c, 2d, 2e, 2f,  }
VLD4/VLD4Q:85:result_int16x8 [] = { 8, 9, a, b, c, d, e, f,  }
VLD4/VLD4Q:86:result_int32x4 [] = { fffffffc, fffffffd, fffffffe, ffffffff,  }
VLD4/VLD4Q:87:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4/VLD4Q:88:result_uint8x16 [] = { 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 2a, 2b, 2c, 2d, 2e, 2f,  }
VLD4/VLD4Q:89:result_uint16x8 [] = { 8, 9, a, b, c, d, e, f,  }
VLD4/VLD4Q:90:result_uint32x4 [] = { fffffffc, fffffffd, fffffffe, ffffffff,  }
VLD4/VLD4Q:91:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4/VLD4Q:92:result_poly8x16 [] = { 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 2a, 2b, 2c, 2d, 2e, 2f,  }
VLD4/VLD4Q:93:result_poly16x8 [] = { 8, 9, a, b, c, d, e, f,  }
VLD4/VLD4Q:94:result_float32x4 [] = { c0800000, c0400000, c0000000, bf800000,  }
VLD4/VLD4Q:95:result_float16x8 [] = { 4800, 4880, 4900, 4980, 4a00, 4a80, 4b00, 4b80,  }

VDUP_LANE/VDUP_LANEQ output:
VDUP_LANE/VDUP_LANEQ:0:result_int8x8 [] = { fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1, fffffff1,  }
VDUP_LANE/VDUP_LANEQ:1:result_int16x4 [] = { fffffff2, fffffff2, fffffff2, fffffff2,  }
VDUP_LANE/VDUP_LANEQ:2:result_int32x2 [] = { fffffff1, fffffff1,  }
VDUP_LANE/VDUP_LANEQ:3:result_int64x1 [] = { fffffffffffffff0,  }
VDUP_LANE/VDUP_LANEQ:4:result_uint8x8 [] = { f7, f7, f7, f7, f7, f7, f7, f7,  }
VDUP_LANE/VDUP_LANEQ:5:result_uint16x4 [] = { fff3, fff3, fff3, fff3,  }
VDUP_LANE/VDUP_LANEQ:6:result_uint32x2 [] = { fffffff1, fffffff1,  }
VDUP_LANE/VDUP_LANEQ:7:result_uint64x1 [] = { fffffffffffffff0,  }
VDUP_LANE/VDUP_LANEQ:8:result_poly8x8 [] = { f7, f7, f7, f7, f7, f7, f7, f7,  }
VDUP_LANE/VDUP_LANEQ:9:result_poly16x4 [] = { fff3, fff3, fff3, fff3,  }
VDUP_LANE/VDUP_LANEQ:10:result_float32x2 [] = { c1700000, c1700000,  }
VDUP_LANE/VDUP_LANEQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VDUP_LANE/VDUP_LANEQ:12:result_int8x16 [] = { fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2, fffffff2,  }
VDUP_LANE/VDUP_LANEQ:13:result_int16x8 [] = { fffffff3, fffffff3, fffffff3, fffffff3, fffffff3, fffffff3, fffffff3, fffffff3,  }
VDUP_LANE/VDUP_LANEQ:14:result_int32x4 [] = { fffffff1, fffffff1, fffffff1, fffffff1,  }
VDUP_LANE/VDUP_LANEQ:15:result_int64x2 [] = { fffffffffffffff0, fffffffffffffff0,  }
VDUP_LANE/VDUP_LANEQ:16:result_uint8x16 [] = { f5, f5, f5, f5, f5, f5, f5, f5, f5, f5, f5, f5, f5, f5, f5, f5,  }
VDUP_LANE/VDUP_LANEQ:17:result_uint16x8 [] = { fff1, fff1, fff1, fff1, fff1, fff1, fff1, fff1,  }
VDUP_LANE/VDUP_LANEQ:18:result_uint32x4 [] = { fffffff0, fffffff0, fffffff0, fffffff0,  }
VDUP_LANE/VDUP_LANEQ:19:result_uint64x2 [] = { fffffffffffffff0, fffffffffffffff0,  }
VDUP_LANE/VDUP_LANEQ:20:result_poly8x16 [] = { f5, f5, f5, f5, f5, f5, f5, f5, f5, f5, f5, f5, f5, f5, f5, f5,  }
VDUP_LANE/VDUP_LANEQ:21:result_poly16x8 [] = { fff1, fff1, fff1, fff1, fff1, fff1, fff1, fff1,  }
VDUP_LANE/VDUP_LANEQ:22:result_float32x4 [] = { c1700000, c1700000, c1700000, c1700000,  }
VDUP_LANE/VDUP_LANEQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQDMULL_LANE cumulative saturation output:
VQDMULL_LANE:0:vqdmull_lane_s16 Neon cumulative saturation 0
VQDMULL_LANE:1:vqdmull_lane_s32 Neon cumulative saturation 0

VQDMULL_LANE output:
VQDMULL_LANE:2:result_int32x4 [] = { 8000, 8000, 8000, 8000,  }
VQDMULL_LANE:3:result_int64x2 [] = { 4000, 4000,  }

VQDMULL_LANE (check mul cumulative saturation) cumulative saturation output:
VQDMULL_LANE:4:vqdmull_lane_s16 Neon cumulative saturation 1
VQDMULL_LANE:5:vqdmull_lane_s32 Neon cumulative saturation 1

VQDMULL_LANE (check mul cumulative saturation) output:
VQDMULL_LANE:6:result_int32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }
VQDMULL_LANE:7:result_int64x2 [] = { 7fffffffffffffff, 7fffffffffffffff,  }

VQDMULL_N cumulative saturation output:
VQDMULL_N:0:vqdmull_n_s16 Neon cumulative saturation 0
VQDMULL_N:1:vqdmull_n_s32 Neon cumulative saturation 0

VQDMULL_N output:
VQDMULL_N:2:result_int32x4 [] = { 44000, 44000, 44000, 44000,  }
VQDMULL_N:3:result_int64x2 [] = { aa000, aa000,  }

VQDMULL_N (check mul cumulative saturation) cumulative saturation output:
VQDMULL_N:4:vqdmull_n_s16 Neon cumulative saturation 1
VQDMULL_N:5:vqdmull_n_s32 Neon cumulative saturation 1

VQDMULL_N (check mul cumulative saturation) output:
VQDMULL_N:6:result_int32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }
VQDMULL_N:7:result_int64x2 [] = { 7fffffffffffffff, 7fffffffffffffff,  }

VST1_LANE/VST1_LANEQ output:
VST1_LANE/VST1_LANEQ:0:result_int8x8 [] = { fffffff7, 33, 33, 33, 33, 33, 33, 33,  }
VST1_LANE/VST1_LANEQ:1:result_int16x4 [] = { fffffff3, 3333, 3333, 3333,  }
VST1_LANE/VST1_LANEQ:2:result_int32x2 [] = { fffffff1, 33333333,  }
VST1_LANE/VST1_LANEQ:3:result_int64x1 [] = { fffffffffffffff0,  }
VST1_LANE/VST1_LANEQ:4:result_uint8x8 [] = { f6, 33, 33, 33, 33, 33, 33, 33,  }
VST1_LANE/VST1_LANEQ:5:result_uint16x4 [] = { fff2, 3333, 3333, 3333,  }
VST1_LANE/VST1_LANEQ:6:result_uint32x2 [] = { fffffff0, 33333333,  }
VST1_LANE/VST1_LANEQ:7:result_uint64x1 [] = { fffffffffffffff0,  }
VST1_LANE/VST1_LANEQ:8:result_poly8x8 [] = { f6, 33, 33, 33, 33, 33, 33, 33,  }
VST1_LANE/VST1_LANEQ:9:result_poly16x4 [] = { fff2, 3333, 3333, 3333,  }
VST1_LANE/VST1_LANEQ:10:result_float32x2 [] = { c1700000, 33333333,  }
VST1_LANE/VST1_LANEQ:11:result_float16x4 [] = { cb00, 0, 0, 0,  }
VST1_LANE/VST1_LANEQ:12:result_int8x16 [] = { ffffffff, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST1_LANE/VST1_LANEQ:13:result_int16x8 [] = { fffffff5, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VST1_LANE/VST1_LANEQ:14:result_int32x4 [] = { fffffff1, 33333333, 33333333, 33333333,  }
VST1_LANE/VST1_LANEQ:15:result_int64x2 [] = { fffffffffffffff1, 3333333333333333,  }
VST1_LANE/VST1_LANEQ:16:result_uint8x16 [] = { fa, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST1_LANE/VST1_LANEQ:17:result_uint16x8 [] = { fff4, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VST1_LANE/VST1_LANEQ:18:result_uint32x4 [] = { fffffff3, 33333333, 33333333, 33333333,  }
VST1_LANE/VST1_LANEQ:19:result_uint64x2 [] = { fffffffffffffff0, 3333333333333333,  }
VST1_LANE/VST1_LANEQ:20:result_poly8x16 [] = { fa, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST1_LANE/VST1_LANEQ:21:result_poly16x8 [] = { fff4, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VST1_LANE/VST1_LANEQ:22:result_float32x4 [] = { c1700000, 33333333, 33333333, 33333333,  }
VST1_LANE/VST1_LANEQ:23:result_float16x8 [] = { c980, 0, 0, 0, 0, 0, 0, 0,  }

VSUB/VSUBQ output:
VSUB/VSUBQ:0:result_int8x8 [] = { ffffffee, ffffffef, fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5,  }
VSUB/VSUBQ:1:result_int16x4 [] = { fffffff4, fffffff5, fffffff6, fffffff7,  }
VSUB/VSUBQ:2:result_int32x2 [] = { ffffffed, ffffffee,  }
VSUB/VSUBQ:3:result_int64x1 [] = { ffffffffffffff8c,  }
VSUB/VSUBQ:4:result_uint8x8 [] = { dc, dd, de, df, e0, e1, e2, e3,  }
VSUB/VSUBQ:5:result_uint16x4 [] = { ffd2, ffd3, ffd4, ffd5,  }
VSUB/VSUBQ:6:result_uint32x2 [] = { ffffffc8, ffffffc9,  }
VSUB/VSUBQ:7:result_uint64x1 [] = { ffffffffffffffee,  }
VSUB/VSUBQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VSUB/VSUBQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VSUB/VSUBQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VSUB/VSUBQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VSUB/VSUBQ:12:result_int8x16 [] = { fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,  }
VSUB/VSUBQ:13:result_int16x8 [] = { 4, 5, 6, 7, 8, 9, a, b,  }
VSUB/VSUBQ:14:result_int32x4 [] = { e, f, 10, 11,  }
VSUB/VSUBQ:15:result_int64x2 [] = { ffffffffffffffd8, ffffffffffffffd9,  }
VSUB/VSUBQ:16:result_uint8x16 [] = { e4, e5, e6, e7, e8, e9, ea, eb, ec, ed, ee, ef, f0, f1, f2, f3,  }
VSUB/VSUBQ:17:result_uint16x8 [] = { ffed, ffee, ffef, fff0, fff1, fff2, fff3, fff4,  }
VSUB/VSUBQ:18:result_uint32x4 [] = { ffffffb9, ffffffba, ffffffbb, ffffffbc,  }
VSUB/VSUBQ:19:result_uint64x2 [] = { ffffffffffffffed, ffffffffffffffee,  }
VSUB/VSUBQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSUB/VSUBQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VSUB/VSUBQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSUB/VSUBQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

float32:
VSUB/VSUBQ:24:result_float32x2 [] = { c00ccccd, c00ccccd,  }
VSUB/VSUBQ:25:result_float32x4 [] = { c00ccccc, c00ccccc, c00ccccc, c00ccccc,  }

VQADD/VQADDQ cumulative saturation output:
VQADD/VQADDQ:0:vqadd_s8 Neon cumulative saturation 0
VQADD/VQADDQ:1:vqadd_s16 Neon cumulative saturation 0
VQADD/VQADDQ:2:vqadd_s32 Neon cumulative saturation 0
VQADD/VQADDQ:3:vqadd_s64 Neon cumulative saturation 0
VQADD/VQADDQ:4:vqadd_u8 Neon cumulative saturation 1
VQADD/VQADDQ:5:vqadd_u16 Neon cumulative saturation 1
VQADD/VQADDQ:6:vqadd_u32 Neon cumulative saturation 1
VQADD/VQADDQ:7:vqadd_u64 Neon cumulative saturation 1
VQADD/VQADDQ:8:vqaddq_s8 Neon cumulative saturation 0
VQADD/VQADDQ:9:vqaddq_s16 Neon cumulative saturation 0
VQADD/VQADDQ:10:vqaddq_s32 Neon cumulative saturation 0
VQADD/VQADDQ:11:vqaddq_s64 Neon cumulative saturation 0
VQADD/VQADDQ:12:vqaddq_u8 Neon cumulative saturation 1
VQADD/VQADDQ:13:vqaddq_u16 Neon cumulative saturation 1
VQADD/VQADDQ:14:vqaddq_u32 Neon cumulative saturation 1
VQADD/VQADDQ:15:vqaddq_u64 Neon cumulative saturation 1

VQADD/VQADDQ output:
VQADD/VQADDQ:16:result_int8x8 [] = { 1, 2, 3, 4, 5, 6, 7, 8,  }
VQADD/VQADDQ:17:result_int16x4 [] = { 12, 13, 14, 15,  }
VQADD/VQADDQ:18:result_int32x2 [] = { 23, 24,  }
VQADD/VQADDQ:19:result_int64x1 [] = { 34,  }
VQADD/VQADDQ:20:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQADD/VQADDQ:21:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQADD/VQADDQ:22:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQADD/VQADDQ:23:result_uint64x1 [] = { ffffffffffffffff,  }
VQADD/VQADDQ:24:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQADD/VQADDQ:25:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQADD/VQADDQ:26:result_float32x2 [] = { 33333333, 33333333,  }
VQADD/VQADDQ:27:result_float16x4 [] = { 0, 0, 0, 0,  }
VQADD/VQADDQ:28:result_int8x16 [] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f, 10,  }
VQADD/VQADDQ:29:result_int16x8 [] = { 12, 13, 14, 15, 16, 17, 18, 19,  }
VQADD/VQADDQ:30:result_int32x4 [] = { 23, 24, 25, 26,  }
VQADD/VQADDQ:31:result_int64x2 [] = { 34, 35,  }
VQADD/VQADDQ:32:result_uint8x16 [] = { ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff,  }
VQADD/VQADDQ:33:result_uint16x8 [] = { ffff, ffff, ffff, ffff, ffff, ffff, ffff, ffff,  }
VQADD/VQADDQ:34:result_uint32x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }
VQADD/VQADDQ:35:result_uint64x2 [] = { ffffffffffffffff, ffffffffffffffff,  }
VQADD/VQADDQ:36:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQADD/VQADDQ:37:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQADD/VQADDQ:38:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQADD/VQADDQ:39:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQADD/VQADDQ 64 bits saturation cumulative saturation output:
VQADD/VQADDQ:40:vqadd_s64 Neon cumulative saturation 0
VQADD/VQADDQ:41:vqadd_u64 Neon cumulative saturation 0
VQADD/VQADDQ:42:vqaddq_s64 Neon cumulative saturation 0
VQADD/VQADDQ:43:vqaddq_u64 Neon cumulative saturation 0

64 bits saturation:
VQADD/VQADDQ:44:result_int64x1 [] = { fffffffffffffff0,  }
VQADD/VQADDQ:45:result_uint64x1 [] = { fffffffffffffff0,  }
VQADD/VQADDQ:46:result_int64x2 [] = { fffffffffffffff0, fffffffffffffff1,  }
VQADD/VQADDQ:47:result_uint64x2 [] = { fffffffffffffff0, fffffffffffffff1,  }

VQADD/VQADDQ 64 bits saturation cumulative saturation output:
VQADD/VQADDQ:48:vqadd_s64 Neon cumulative saturation 0
VQADD/VQADDQ:49:vqadd_u64 Neon cumulative saturation 1
VQADD/VQADDQ:50:vqaddq_s64 Neon cumulative saturation 0
VQADD/VQADDQ:51:vqaddq_u64 Neon cumulative saturation 1
VQADD/VQADDQ:52:result_int64x1 [] = { 34,  }
VQADD/VQADDQ:53:result_uint64x1 [] = { ffffffffffffffff,  }
VQADD/VQADDQ:54:result_int64x2 [] = { 34, 35,  }
VQADD/VQADDQ:55:result_uint64x2 [] = { ffffffffffffffff, ffffffffffffffff,  }

VQADD/VQADDQ 64 bits saturation cumulative saturation output:
VQADD/VQADDQ:56:vqadd_s64 Neon cumulative saturation 1
VQADD/VQADDQ:57:vqadd_u64 Neon cumulative saturation 1
VQADD/VQADDQ:58:vqaddq_s64 Neon cumulative saturation 1
VQADD/VQADDQ:59:vqaddq_u64 Neon cumulative saturation 1
VQADD/VQADDQ:60:result_int64x1 [] = { 8000000000000000,  }
VQADD/VQADDQ:61:result_uint64x1 [] = { ffffffffffffffff,  }
VQADD/VQADDQ:62:result_int64x2 [] = { 7fffffffffffffff, 7fffffffffffffff,  }
VQADD/VQADDQ:63:result_uint64x2 [] = { ffffffffffffffff, ffffffffffffffff,  }

less than 64 bits saturation:
VQADD/VQADDQ:64:vqadd_s8 Neon cumulative saturation 1
VQADD/VQADDQ:65:vqadd_s16 Neon cumulative saturation 1
VQADD/VQADDQ:66:vqadd_s32 Neon cumulative saturation 1
VQADD/VQADDQ:67:vqaddq_s8 Neon cumulative saturation 1
VQADD/VQADDQ:68:vqaddq_s16 Neon cumulative saturation 1
VQADD/VQADDQ:69:vqaddq_s32 Neon cumulative saturation 1
VQADD/VQADDQ:70:result_int8x8 [] = { ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80,  }
VQADD/VQADDQ:71:result_int16x4 [] = { ffff8000, ffff8000, ffff8000, ffff8000,  }
VQADD/VQADDQ:72:result_int32x2 [] = { 80000000, 80000000,  }
VQADD/VQADDQ:73:result_int8x16 [] = { ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80,  }
VQADD/VQADDQ:74:result_int16x8 [] = { ffff8000, ffff8000, ffff8000, ffff8000, ffff8000, ffff8000, ffff8000, ffff8000,  }
VQADD/VQADDQ:75:result_int32x4 [] = { 80000000, 80000000, 80000000, 80000000,  }

VQADD/VQADDQ less than 64 bits saturation cumulative saturation output:
VQADD/VQADDQ:76:vqadd_u8 Neon cumulative saturation 1
VQADD/VQADDQ:77:vqadd_u16 Neon cumulative saturation 1
VQADD/VQADDQ:78:vqadd_u32 Neon cumulative saturation 1
VQADD/VQADDQ:79:vqaddq_u8 Neon cumulative saturation 1
VQADD/VQADDQ:80:vqaddq_u16 Neon cumulative saturation 1
VQADD/VQADDQ:81:vqaddq_u32 Neon cumulative saturation 1
VQADD/VQADDQ:82:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQADD/VQADDQ:83:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQADD/VQADDQ:84:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQADD/VQADDQ:85:result_uint8x16 [] = { ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff,  }
VQADD/VQADDQ:86:result_uint16x8 [] = { ffff, ffff, ffff, ffff, ffff, ffff, ffff, ffff,  }
VQADD/VQADDQ:87:result_uint32x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }

VABS/VABSQ output:
VABS/VABSQ:0:result_int8x8 [] = { 10, f, e, d, c, b, a, 9,  }
VABS/VABSQ:1:result_int16x4 [] = { 10, f, e, d,  }
VABS/VABSQ:2:result_int32x2 [] = { 10, f,  }
VABS/VABSQ:3:result_int64x1 [] = { 3333333333333333,  }
VABS/VABSQ:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VABS/VABSQ:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VABS/VABSQ:6:result_uint32x2 [] = { 33333333, 33333333,  }
VABS/VABSQ:7:result_uint64x1 [] = { 3333333333333333,  }
VABS/VABSQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VABS/VABSQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VABS/VABSQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VABS/VABSQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VABS/VABSQ:12:result_int8x16 [] = { 10, f, e, d, c, b, a, 9, 8, 7, 6, 5, 4, 3, 2, 1,  }
VABS/VABSQ:13:result_int16x8 [] = { 10, f, e, d, c, b, a, 9,  }
VABS/VABSQ:14:result_int32x4 [] = { 10, f, e, d,  }
VABS/VABSQ:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VABS/VABSQ:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VABS/VABSQ:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VABS/VABSQ:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VABS/VABSQ:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VABS/VABSQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VABS/VABSQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VABS/VABSQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VABS/VABSQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

float32:
VABS/VABSQ:24:result_float32x2 [] = { 40133333, 40133333,  }
VABS/VABSQ:25:result_float32x4 [] = { 4059999a, 4059999a, 4059999a, 4059999a,  }

VQABS/VQABSQ cumulative saturation output:
VQABS/VQABSQ:0:vqabs_s8 Neon cumulative saturation 0
VQABS/VQABSQ:1:vqabs_s16 Neon cumulative saturation 0
VQABS/VQABSQ:2:vqabs_s32 Neon cumulative saturation 0
VQABS/VQABSQ:3:vqabsq_s8 Neon cumulative saturation 0
VQABS/VQABSQ:4:vqabsq_s16 Neon cumulative saturation 0
VQABS/VQABSQ:5:vqabsq_s32 Neon cumulative saturation 0

VQABS/VQABSQ output:
VQABS/VQABSQ:6:result_int8x8 [] = { 10, f, e, d, c, b, a, 9,  }
VQABS/VQABSQ:7:result_int16x4 [] = { 10, f, e, d,  }
VQABS/VQABSQ:8:result_int32x2 [] = { 10, f,  }
VQABS/VQABSQ:9:result_int64x1 [] = { 3333333333333333,  }
VQABS/VQABSQ:10:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQABS/VQABSQ:11:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQABS/VQABSQ:12:result_uint32x2 [] = { 33333333, 33333333,  }
VQABS/VQABSQ:13:result_uint64x1 [] = { 3333333333333333,  }
VQABS/VQABSQ:14:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQABS/VQABSQ:15:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQABS/VQABSQ:16:result_float32x2 [] = { 33333333, 33333333,  }
VQABS/VQABSQ:17:result_float16x4 [] = { 0, 0, 0, 0,  }
VQABS/VQABSQ:18:result_int8x16 [] = { 10, f, e, d, c, b, a, 9, 8, 7, 6, 5, 4, 3, 2, 1,  }
VQABS/VQABSQ:19:result_int16x8 [] = { 10, f, e, d, c, b, a, 9,  }
VQABS/VQABSQ:20:result_int32x4 [] = { 10, f, e, d,  }
VQABS/VQABSQ:21:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQABS/VQABSQ:22:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQABS/VQABSQ:23:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQABS/VQABSQ:24:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQABS/VQABSQ:25:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQABS/VQABSQ:26:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQABS/VQABSQ:27:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQABS/VQABSQ:28:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQABS/VQABSQ:29:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQABS/VQABSQ cumulative saturation output:
VQABS/VQABSQ:0:vqabs_s8 Neon cumulative saturation 1
VQABS/VQABSQ:1:vqabs_s16 Neon cumulative saturation 1
VQABS/VQABSQ:2:vqabs_s32 Neon cumulative saturation 1
VQABS/VQABSQ:3:vqabsq_s8 Neon cumulative saturation 1
VQABS/VQABSQ:4:vqabsq_s16 Neon cumulative saturation 1
VQABS/VQABSQ:5:vqabsq_s32 Neon cumulative saturation 1

VQABS/VQABSQ output:
VQABS/VQABSQ:6:result_int8x8 [] = { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f,  }
VQABS/VQABSQ:7:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQABS/VQABSQ:8:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQABS/VQABSQ:9:result_int64x1 [] = { 3333333333333333,  }
VQABS/VQABSQ:10:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQABS/VQABSQ:11:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQABS/VQABSQ:12:result_uint32x2 [] = { 33333333, 33333333,  }
VQABS/VQABSQ:13:result_uint64x1 [] = { 3333333333333333,  }
VQABS/VQABSQ:14:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQABS/VQABSQ:15:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQABS/VQABSQ:16:result_float32x2 [] = { 33333333, 33333333,  }
VQABS/VQABSQ:17:result_float16x4 [] = { 0, 0, 0, 0,  }
VQABS/VQABSQ:18:result_int8x16 [] = { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f,  }
VQABS/VQABSQ:19:result_int16x8 [] = { 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff,  }
VQABS/VQABSQ:20:result_int32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }
VQABS/VQABSQ:21:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQABS/VQABSQ:22:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQABS/VQABSQ:23:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQABS/VQABSQ:24:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQABS/VQABSQ:25:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQABS/VQABSQ:26:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQABS/VQABSQ:27:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQABS/VQABSQ:28:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQABS/VQABSQ:29:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VCOMBINE output:
VCOMBINE:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VCOMBINE:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VCOMBINE:2:result_int32x2 [] = { 33333333, 33333333,  }
VCOMBINE:3:result_int64x1 [] = { 3333333333333333,  }
VCOMBINE:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VCOMBINE:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VCOMBINE:6:result_uint32x2 [] = { 33333333, 33333333,  }
VCOMBINE:7:result_uint64x1 [] = { 3333333333333333,  }
VCOMBINE:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VCOMBINE:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VCOMBINE:10:result_float32x2 [] = { 33333333, 33333333,  }
VCOMBINE:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VCOMBINE:12:result_int8x16 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7, 11, 11, 11, 11, 11, 11, 11, 11,  }
VCOMBINE:13:result_int16x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, 22, 22, 22, 22,  }
VCOMBINE:14:result_int32x4 [] = { fffffff0, fffffff1, 33, 33,  }
VCOMBINE:15:result_int64x2 [] = { fffffffffffffff0, 44,  }
VCOMBINE:16:result_uint8x16 [] = { f0, f1, f2, f3, f4, f5, f6, f7, 55, 55, 55, 55, 55, 55, 55, 55,  }
VCOMBINE:17:result_uint16x8 [] = { fff0, fff1, fff2, fff3, 66, 66, 66, 66,  }
VCOMBINE:18:result_uint32x4 [] = { fffffff0, fffffff1, 77, 77,  }
VCOMBINE:19:result_uint64x2 [] = { fffffffffffffff0, 88,  }
VCOMBINE:20:result_poly8x16 [] = { f0, f1, f2, f3, f4, f5, f6, f7, 55, 55, 55, 55, 55, 55, 55, 55,  }
VCOMBINE:21:result_poly16x8 [] = { fff0, fff1, fff2, fff3, 66, 66, 66, 66,  }
VCOMBINE:22:result_float32x4 [] = { c1800000, c1700000, 40533333, 40533333,  }
VCOMBINE:23:result_float16x8 [] = { cc00, cb80, cb00, ca80, 4b80, 4b80, 4b80, 4b80,  }

VMAX/VMAXQ output:
VMAX/VMAXQ:0:result_int8x8 [] = { fffffff3, fffffff3, fffffff3, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VMAX/VMAXQ:1:result_int16x4 [] = { fffffff2, fffffff2, fffffff2, fffffff3,  }
VMAX/VMAXQ:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VMAX/VMAXQ:3:result_int64x1 [] = { 3333333333333333,  }
VMAX/VMAXQ:4:result_uint8x8 [] = { f3, f3, f3, f3, f4, f5, f6, f7,  }
VMAX/VMAXQ:5:result_uint16x4 [] = { fff1, fff1, fff2, fff3,  }
VMAX/VMAXQ:6:result_uint32x2 [] = { fffffff0, fffffff1,  }
VMAX/VMAXQ:7:result_uint64x1 [] = { 3333333333333333,  }
VMAX/VMAXQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMAX/VMAXQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMAX/VMAXQ:10:result_float32x2 [] = { c1780000, c1700000,  }
VMAX/VMAXQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMAX/VMAXQ:12:result_int8x16 [] = { fffffff4, fffffff4, fffffff4, fffffff4, fffffff4, fffffff5, fffffff6, fffffff7, fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff,  }
VMAX/VMAXQ:13:result_int16x8 [] = { fffffff3, fffffff3, fffffff3, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VMAX/VMAXQ:14:result_int32x4 [] = { fffffff1, fffffff1, fffffff2, fffffff3,  }
VMAX/VMAXQ:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VMAX/VMAXQ:16:result_uint8x16 [] = { f9, f9, f9, f9, f9, f9, f9, f9, f9, f9, fa, fb, fc, fd, fe, ff,  }
VMAX/VMAXQ:17:result_uint16x8 [] = { fff2, fff2, fff2, fff3, fff4, fff5, fff6, fff7,  }
VMAX/VMAXQ:18:result_uint32x4 [] = { fffffff1, fffffff1, fffffff2, fffffff3,  }
VMAX/VMAXQ:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VMAX/VMAXQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMAX/VMAXQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMAX/VMAXQ:22:result_float32x4 [] = { c1680000, c1680000, c1600000, c1500000,  }
VMAX/VMAXQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VMAX/VMAXQ FP special (NaN):24:result_float32x4 [] = { 7fc00000, 7fc00000, 7fc00000, 7fc00000,  }
VMAX/VMAXQ FP special (-NaN):25:result_float32x4 [] = { 7fc00000, 7fc00000, 7fc00000, 7fc00000,  }
VMAX/VMAXQ FP special (inf):26:result_float32x4 [] = { 7f800000, 7f800000, 7f800000, 7f800000,  }
VMAX/VMAXQ FP special (-inf):27:result_float32x4 [] = { 3f800000, 3f800000, 3f800000, 3f800000,  }
VMAX/VMAXQ FP special (-0.0):28:result_float32x4 [] = { 0, 0, 0, 0,  }
VMAX/VMAXQ FP special (-0.0):29:result_float32x4 [] = { 0, 0, 0, 0,  }

VMIN/VMINQ output:
VMIN/VMINQ:0:result_int8x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff3, fffffff3, fffffff3, fffffff3,  }
VMIN/VMINQ:1:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff2,  }
VMIN/VMINQ:2:result_int32x2 [] = { fffffff0, fffffff0,  }
VMIN/VMINQ:3:result_int64x1 [] = { 3333333333333333,  }
VMIN/VMINQ:4:result_uint8x8 [] = { f0, f1, f2, f3, f3, f3, f3, f3,  }
VMIN/VMINQ:5:result_uint16x4 [] = { fff0, fff1, fff1, fff1,  }
VMIN/VMINQ:6:result_uint32x2 [] = { fffffff0, fffffff0,  }
VMIN/VMINQ:7:result_uint64x1 [] = { 3333333333333333,  }
VMIN/VMINQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMIN/VMINQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMIN/VMINQ:10:result_float32x2 [] = { c1800000, c1780000,  }
VMIN/VMINQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMIN/VMINQ:12:result_int8x16 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff4, fffffff4, fffffff4, fffffff4, fffffff4, fffffff4, fffffff4, fffffff4, fffffff4, fffffff4, fffffff4,  }
VMIN/VMINQ:13:result_int16x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff3, fffffff3, fffffff3, fffffff3,  }
VMIN/VMINQ:14:result_int32x4 [] = { fffffff0, fffffff1, fffffff1, fffffff1,  }
VMIN/VMINQ:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VMIN/VMINQ:16:result_uint8x16 [] = { f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f9, f9, f9, f9, f9, f9,  }
VMIN/VMINQ:17:result_uint16x8 [] = { fff0, fff1, fff2, fff2, fff2, fff2, fff2, fff2,  }
VMIN/VMINQ:18:result_uint32x4 [] = { fffffff0, fffffff1, fffffff1, fffffff1,  }
VMIN/VMINQ:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VMIN/VMINQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMIN/VMINQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMIN/VMINQ:22:result_float32x4 [] = { c1800000, c1700000, c1680000, c1680000,  }
VMIN/VMINQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VMIN/VMINQ FP special (NaN):24:result_float32x4 [] = { 7fc00000, 7fc00000, 7fc00000, 7fc00000,  }
VMIN/VMINQ FP special (-NaN):25:result_float32x4 [] = { 7fc00000, 7fc00000, 7fc00000, 7fc00000,  }
VMIN/VMINQ FP special (inf):26:result_float32x4 [] = { 3f800000, 3f800000, 3f800000, 3f800000,  }
VMIN/VMINQ FP special (-inf):27:result_float32x4 [] = { ff800000, ff800000, ff800000, ff800000,  }
VMIN/VMINQ FP special (-0.0):28:result_float32x4 [] = { 80000000, 80000000, 80000000, 80000000,  }
VMIN/VMINQ FP special (-0.0):29:result_float32x4 [] = { 80000000, 80000000, 80000000, 80000000,  }

VNEG/VNEGQ output:
VNEG/VNEGQ:0:result_int8x8 [] = { 10, f, e, d, c, b, a, 9,  }
VNEG/VNEGQ:1:result_int16x4 [] = { 10, f, e, d,  }
VNEG/VNEGQ:2:result_int32x2 [] = { 10, f,  }
VNEG/VNEGQ:3:result_int64x1 [] = { 3333333333333333,  }
VNEG/VNEGQ:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VNEG/VNEGQ:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VNEG/VNEGQ:6:result_uint32x2 [] = { 33333333, 33333333,  }
VNEG/VNEGQ:7:result_uint64x1 [] = { 3333333333333333,  }
VNEG/VNEGQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VNEG/VNEGQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VNEG/VNEGQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VNEG/VNEGQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VNEG/VNEGQ:12:result_int8x16 [] = { 10, f, e, d, c, b, a, 9, 8, 7, 6, 5, 4, 3, 2, 1,  }
VNEG/VNEGQ:13:result_int16x8 [] = { 10, f, e, d, c, b, a, 9,  }
VNEG/VNEGQ:14:result_int32x4 [] = { 10, f, e, d,  }
VNEG/VNEGQ:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VNEG/VNEGQ:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VNEG/VNEGQ:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VNEG/VNEGQ:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VNEG/VNEGQ:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VNEG/VNEGQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VNEG/VNEGQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VNEG/VNEGQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VNEG/VNEGQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

float32:
VNEG/VNEGQ:24:result_float32x2 [] = { c0133333, c0133333,  }
VNEG/VNEGQ:25:result_float32x4 [] = { c059999a, c059999a, c059999a, c059999a,  }

VQNEG/VQNEGQ cumulative saturation output:
VQNEG/VQNEGQ:0:vqneg_s8 Neon cumulative saturation 0
VQNEG/VQNEGQ:1:vqneg_s16 Neon cumulative saturation 0
VQNEG/VQNEGQ:2:vqneg_s32 Neon cumulative saturation 0
VQNEG/VQNEGQ:3:vqnegq_s8 Neon cumulative saturation 0
VQNEG/VQNEGQ:4:vqnegq_s16 Neon cumulative saturation 0
VQNEG/VQNEGQ:5:vqnegq_s32 Neon cumulative saturation 0

VQNEG/VQNEGQ output:
VQNEG/VQNEGQ:6:result_int8x8 [] = { 10, f, e, d, c, b, a, 9,  }
VQNEG/VQNEGQ:7:result_int16x4 [] = { 10, f, e, d,  }
VQNEG/VQNEGQ:8:result_int32x2 [] = { 10, f,  }
VQNEG/VQNEGQ:9:result_int64x1 [] = { 3333333333333333,  }
VQNEG/VQNEGQ:10:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQNEG/VQNEGQ:11:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQNEG/VQNEGQ:12:result_uint32x2 [] = { 33333333, 33333333,  }
VQNEG/VQNEGQ:13:result_uint64x1 [] = { 3333333333333333,  }
VQNEG/VQNEGQ:14:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQNEG/VQNEGQ:15:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQNEG/VQNEGQ:16:result_float32x2 [] = { 33333333, 33333333,  }
VQNEG/VQNEGQ:17:result_float16x4 [] = { 0, 0, 0, 0,  }
VQNEG/VQNEGQ:18:result_int8x16 [] = { 10, f, e, d, c, b, a, 9, 8, 7, 6, 5, 4, 3, 2, 1,  }
VQNEG/VQNEGQ:19:result_int16x8 [] = { 10, f, e, d, c, b, a, 9,  }
VQNEG/VQNEGQ:20:result_int32x4 [] = { 10, f, e, d,  }
VQNEG/VQNEGQ:21:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQNEG/VQNEGQ:22:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQNEG/VQNEGQ:23:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQNEG/VQNEGQ:24:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQNEG/VQNEGQ:25:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQNEG/VQNEGQ:26:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQNEG/VQNEGQ:27:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQNEG/VQNEGQ:28:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQNEG/VQNEGQ:29:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQNEG/VQNEGQ cumulative saturation output:
VQNEG/VQNEGQ:0:vqneg_s8 Neon cumulative saturation 1
VQNEG/VQNEGQ:1:vqneg_s16 Neon cumulative saturation 1
VQNEG/VQNEGQ:2:vqneg_s32 Neon cumulative saturation 1
VQNEG/VQNEGQ:3:vqnegq_s8 Neon cumulative saturation 1
VQNEG/VQNEGQ:4:vqnegq_s16 Neon cumulative saturation 1
VQNEG/VQNEGQ:5:vqnegq_s32 Neon cumulative saturation 1

VQNEG/VQNEGQ output:
VQNEG/VQNEGQ:6:result_int8x8 [] = { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f,  }
VQNEG/VQNEGQ:7:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQNEG/VQNEGQ:8:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQNEG/VQNEGQ:9:result_int64x1 [] = { 3333333333333333,  }
VQNEG/VQNEGQ:10:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQNEG/VQNEGQ:11:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQNEG/VQNEGQ:12:result_uint32x2 [] = { 33333333, 33333333,  }
VQNEG/VQNEGQ:13:result_uint64x1 [] = { 3333333333333333,  }
VQNEG/VQNEGQ:14:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQNEG/VQNEGQ:15:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQNEG/VQNEGQ:16:result_float32x2 [] = { 33333333, 33333333,  }
VQNEG/VQNEGQ:17:result_float16x4 [] = { 0, 0, 0, 0,  }
VQNEG/VQNEGQ:18:result_int8x16 [] = { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f,  }
VQNEG/VQNEGQ:19:result_int16x8 [] = { 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff,  }
VQNEG/VQNEGQ:20:result_int32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }
VQNEG/VQNEGQ:21:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQNEG/VQNEGQ:22:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQNEG/VQNEGQ:23:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQNEG/VQNEGQ:24:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQNEG/VQNEGQ:25:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQNEG/VQNEGQ:26:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQNEG/VQNEGQ:27:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQNEG/VQNEGQ:28:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQNEG/VQNEGQ:29:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMLAL output:
VMLAL:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLAL:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLAL:2:result_int32x2 [] = { 33333333, 33333333,  }
VMLAL:3:result_int64x1 [] = { 3333333333333333,  }
VMLAL:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLAL:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLAL:6:result_uint32x2 [] = { 33333333, 33333333,  }
VMLAL:7:result_uint64x1 [] = { 3333333333333333,  }
VMLAL:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLAL:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLAL:10:result_float32x2 [] = { 33333333, 33333333,  }
VMLAL:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMLAL:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLAL:13:result_int16x8 [] = { ffffe907, ffffe908, ffffe909, ffffe90a, ffffe90b, ffffe90c, ffffe90d, ffffe90e,  }
VMLAL:14:result_int32x4 [] = { 3e07, 3e08, 3e09, 3e0a,  }
VMLAL:15:result_int64x2 [] = { 3e07, 3e08,  }
VMLAL:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLAL:17:result_uint16x8 [] = { 3e07, 3e08, 3e09, 3e0a, 3e0b, 3e0c, 3e0d, 3e0e,  }
VMLAL:18:result_uint32x4 [] = { 3e07, 3e08, 3e09, 3e0a,  }
VMLAL:19:result_uint64x2 [] = { 3e07, 3e08,  }
VMLAL:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLAL:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLAL:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VMLAL:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMLSL output:
VMLSL:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLSL:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLSL:2:result_int32x2 [] = { 33333333, 33333333,  }
VMLSL:3:result_int64x1 [] = { 3333333333333333,  }
VMLSL:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLSL:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLSL:6:result_uint32x2 [] = { 33333333, 33333333,  }
VMLSL:7:result_uint64x1 [] = { 3333333333333333,  }
VMLSL:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLSL:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLSL:10:result_float32x2 [] = { 33333333, 33333333,  }
VMLSL:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMLSL:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLSL:13:result_int16x8 [] = { 16d9, 16da, 16db, 16dc, 16dd, 16de, 16df, 16e0,  }
VMLSL:14:result_int32x4 [] = { ffffc1d9, ffffc1da, ffffc1db, ffffc1dc,  }
VMLSL:15:result_int64x2 [] = { ffffffffffffc1d9, ffffffffffffc1da,  }
VMLSL:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLSL:17:result_uint16x8 [] = { c1d9, c1da, c1db, c1dc, c1dd, c1de, c1df, c1e0,  }
VMLSL:18:result_uint32x4 [] = { ffffc1d9, ffffc1da, ffffc1db, ffffc1dc,  }
VMLSL:19:result_uint64x2 [] = { ffffffffffffc1d9, ffffffffffffc1da,  }
VMLSL:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLSL:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLSL:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VMLSL:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMLAL_LANE output:
VMLAL_LANE:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLAL_LANE:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLAL_LANE:2:result_int32x2 [] = { 33333333, 33333333,  }
VMLAL_LANE:3:result_int64x1 [] = { 3333333333333333,  }
VMLAL_LANE:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLAL_LANE:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLAL_LANE:6:result_uint32x2 [] = { 33333333, 33333333,  }
VMLAL_LANE:7:result_uint64x1 [] = { 3333333333333333,  }
VMLAL_LANE:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLAL_LANE:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLAL_LANE:10:result_float32x2 [] = { 33333333, 33333333,  }
VMLAL_LANE:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMLAL_LANE:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLAL_LANE:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLAL_LANE:14:result_int32x4 [] = { 3e07, 3e08, 3e09, 3e0a,  }
VMLAL_LANE:15:result_int64x2 [] = { 3e07, 3e08,  }
VMLAL_LANE:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLAL_LANE:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLAL_LANE:18:result_uint32x4 [] = { 3e07, 3e08, 3e09, 3e0a,  }
VMLAL_LANE:19:result_uint64x2 [] = { 3e07, 3e08,  }
VMLAL_LANE:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLAL_LANE:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLAL_LANE:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VMLAL_LANE:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMLSL_LANE output:
VMLSL_LANE:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLSL_LANE:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLSL_LANE:2:result_int32x2 [] = { 33333333, 33333333,  }
VMLSL_LANE:3:result_int64x1 [] = { 3333333333333333,  }
VMLSL_LANE:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLSL_LANE:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLSL_LANE:6:result_uint32x2 [] = { 33333333, 33333333,  }
VMLSL_LANE:7:result_uint64x1 [] = { 3333333333333333,  }
VMLSL_LANE:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLSL_LANE:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLSL_LANE:10:result_float32x2 [] = { 33333333, 33333333,  }
VMLSL_LANE:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMLSL_LANE:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLSL_LANE:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLSL_LANE:14:result_int32x4 [] = { ffffc1d9, ffffc1da, ffffc1db, ffffc1dc,  }
VMLSL_LANE:15:result_int64x2 [] = { ffffffffffffc1d9, ffffffffffffc1da,  }
VMLSL_LANE:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLSL_LANE:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLSL_LANE:18:result_uint32x4 [] = { ffffc1d9, ffffc1da, ffffc1db, ffffc1dc,  }
VMLSL_LANE:19:result_uint64x2 [] = { ffffffffffffc1d9, ffffffffffffc1da,  }
VMLSL_LANE:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLSL_LANE:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLSL_LANE:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VMLSL_LANE:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMLAL_N output:
VMLAL_N:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLAL_N:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLAL_N:2:result_int32x2 [] = { 33333333, 33333333,  }
VMLAL_N:3:result_int64x1 [] = { 3333333333333333,  }
VMLAL_N:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLAL_N:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLAL_N:6:result_uint32x2 [] = { 33333333, 33333333,  }
VMLAL_N:7:result_uint64x1 [] = { 3333333333333333,  }
VMLAL_N:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLAL_N:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLAL_N:10:result_float32x2 [] = { 33333333, 33333333,  }
VMLAL_N:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMLAL_N:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLAL_N:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLAL_N:14:result_int32x4 [] = { 595, 596, 597, 598,  }
VMLAL_N:15:result_int64x2 [] = { b3a, b3b,  }
VMLAL_N:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLAL_N:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLAL_N:18:result_uint32x4 [] = { 10df, 10e0, 10e1, 10e2,  }
VMLAL_N:19:result_uint64x2 [] = { 10df, 10e0,  }
VMLAL_N:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLAL_N:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLAL_N:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VMLAL_N:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMLSL_N output:
VMLSL_N:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLSL_N:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLSL_N:2:result_int32x2 [] = { 33333333, 33333333,  }
VMLSL_N:3:result_int64x1 [] = { 3333333333333333,  }
VMLSL_N:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLSL_N:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLSL_N:6:result_uint32x2 [] = { 33333333, 33333333,  }
VMLSL_N:7:result_uint64x1 [] = { 3333333333333333,  }
VMLSL_N:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLSL_N:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLSL_N:10:result_float32x2 [] = { 33333333, 33333333,  }
VMLSL_N:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMLSL_N:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLSL_N:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLSL_N:14:result_int32x4 [] = { fffffa4b, fffffa4c, fffffa4d, fffffa4e,  }
VMLSL_N:15:result_int64x2 [] = { fffffffffffff4a6, fffffffffffff4a7,  }
VMLSL_N:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLSL_N:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLSL_N:18:result_uint32x4 [] = { ffffef01, ffffef02, ffffef03, ffffef04,  }
VMLSL_N:19:result_uint64x2 [] = { ffffffffffffef01, ffffffffffffef02,  }
VMLSL_N:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLSL_N:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLSL_N:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VMLSL_N:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMOVL output:
VMOVL:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMOVL:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VMOVL:2:result_int32x2 [] = { 33333333, 33333333,  }
VMOVL:3:result_int64x1 [] = { 3333333333333333,  }
VMOVL:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMOVL:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VMOVL:6:result_uint32x2 [] = { 33333333, 33333333,  }
VMOVL:7:result_uint64x1 [] = { 3333333333333333,  }
VMOVL:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMOVL:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMOVL:10:result_float32x2 [] = { 33333333, 33333333,  }
VMOVL:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMOVL:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMOVL:13:result_int16x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VMOVL:14:result_int32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VMOVL:15:result_int64x2 [] = { fffffffffffffff0, fffffffffffffff1,  }
VMOVL:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMOVL:17:result_uint16x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VMOVL:18:result_uint32x4 [] = { fff0, fff1, fff2, fff3,  }
VMOVL:19:result_uint64x2 [] = { fffffff0, fffffff1,  }
VMOVL:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMOVL:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMOVL:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VMOVL:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMOVN output:
VMOVN:0:result_int8x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VMOVN:1:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VMOVN:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VMOVN:3:result_int64x1 [] = { 3333333333333333,  }
VMOVN:4:result_uint8x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VMOVN:5:result_uint16x4 [] = { fff0, fff1, fff2, fff3,  }
VMOVN:6:result_uint32x2 [] = { fffffff0, fffffff1,  }
VMOVN:7:result_uint64x1 [] = { 3333333333333333,  }
VMOVN:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMOVN:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMOVN:10:result_float32x2 [] = { 33333333, 33333333,  }
VMOVN:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMOVN:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMOVN:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMOVN:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VMOVN:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VMOVN:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMOVN:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMOVN:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VMOVN:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VMOVN:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMOVN:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMOVN:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VMOVN:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMULL output:
VMULL:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMULL:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VMULL:2:result_int32x2 [] = { 33333333, 33333333,  }
VMULL:3:result_int64x1 [] = { 3333333333333333,  }
VMULL:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMULL:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VMULL:6:result_uint32x2 [] = { 33333333, 33333333,  }
VMULL:7:result_uint64x1 [] = { 3333333333333333,  }
VMULL:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMULL:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMULL:10:result_float32x2 [] = { 33333333, 33333333,  }
VMULL:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMULL:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMULL:13:result_int16x8 [] = { 100, e1, c4, a9, 90, 79, 64, 51,  }
VMULL:14:result_int32x4 [] = { 100, e1, c4, a9,  }
VMULL:15:result_int64x2 [] = { 100, e1,  }
VMULL:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMULL:17:result_uint16x8 [] = { e100, e2e1, e4c4, e6a9, e890, ea79, ec64, ee51,  }
VMULL:18:result_uint32x4 [] = { ffe00100, ffe200e1, ffe400c4, ffe600a9,  }
VMULL:19:result_uint64x2 [] = { ffffffe000000100, ffffffe2000000e1,  }
VMULL:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMULL:21:result_poly16x8 [] = { 5500, 5501, 5504, 5505, 5510, 5511, 5514, 5515,  }
VMULL:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VMULL:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMULL_LANE output:
VMULL_LANE:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMULL_LANE:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VMULL_LANE:2:result_int32x2 [] = { 33333333, 33333333,  }
VMULL_LANE:3:result_int64x1 [] = { 3333333333333333,  }
VMULL_LANE:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMULL_LANE:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VMULL_LANE:6:result_uint32x2 [] = { 33333333, 33333333,  }
VMULL_LANE:7:result_uint64x1 [] = { 3333333333333333,  }
VMULL_LANE:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMULL_LANE:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMULL_LANE:10:result_float32x2 [] = { 33333333, 33333333,  }
VMULL_LANE:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMULL_LANE:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMULL_LANE:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMULL_LANE:14:result_int32x4 [] = { 4000, 4000, 4000, 4000,  }
VMULL_LANE:15:result_int64x2 [] = { 2000, 2000,  }
VMULL_LANE:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMULL_LANE:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMULL_LANE:18:result_uint32x4 [] = { 4000, 4000, 4000, 4000,  }
VMULL_LANE:19:result_uint64x2 [] = { 2000, 2000,  }
VMULL_LANE:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMULL_LANE:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMULL_LANE:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VMULL_LANE:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VREV16 output:
VREV16:0:result_int8x8 [] = { fffffff1, fffffff0, fffffff3, fffffff2, fffffff5, fffffff4, fffffff7, fffffff6,  }
VREV16:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VREV16:2:result_int32x2 [] = { 33333333, 33333333,  }
VREV16:3:result_int64x1 [] = { 3333333333333333,  }
VREV16:4:result_uint8x8 [] = { f1, f0, f3, f2, f5, f4, f7, f6,  }
VREV16:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VREV16:6:result_uint32x2 [] = { 33333333, 33333333,  }
VREV16:7:result_uint64x1 [] = { 3333333333333333,  }
VREV16:8:result_poly8x8 [] = { f1, f0, f3, f2, f5, f4, f7, f6,  }
VREV16:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VREV16:10:result_float32x2 [] = { 33333333, 33333333,  }
VREV16:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VREV16:12:result_int8x16 [] = { fffffff1, fffffff0, fffffff3, fffffff2, fffffff5, fffffff4, fffffff7, fffffff6, fffffff9, fffffff8, fffffffb, fffffffa, fffffffd, fffffffc, ffffffff, fffffffe,  }
VREV16:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VREV16:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VREV16:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VREV16:16:result_uint8x16 [] = { f1, f0, f3, f2, f5, f4, f7, f6, f9, f8, fb, fa, fd, fc, ff, fe,  }
VREV16:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VREV16:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VREV16:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VREV16:20:result_poly8x16 [] = { f1, f0, f3, f2, f5, f4, f7, f6, f9, f8, fb, fa, fd, fc, ff, fe,  }
VREV16:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VREV16:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VREV16:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VREV32 output:
VREV32:24:result_int8x8 [] = { fffffff3, fffffff2, fffffff1, fffffff0, fffffff7, fffffff6, fffffff5, fffffff4,  }
VREV32:25:result_int16x4 [] = { fffffff1, fffffff0, fffffff3, fffffff2,  }
VREV32:26:result_int32x2 [] = { 33333333, 33333333,  }
VREV32:27:result_int64x1 [] = { 3333333333333333,  }
VREV32:28:result_uint8x8 [] = { f3, f2, f1, f0, f7, f6, f5, f4,  }
VREV32:29:result_uint16x4 [] = { fff1, fff0, fff3, fff2,  }
VREV32:30:result_uint32x2 [] = { 33333333, 33333333,  }
VREV32:31:result_uint64x1 [] = { 3333333333333333,  }
VREV32:32:result_poly8x8 [] = { f3, f2, f1, f0, f7, f6, f5, f4,  }
VREV32:33:result_poly16x4 [] = { fff1, fff0, fff3, fff2,  }
VREV32:34:result_float32x2 [] = { 33333333, 33333333,  }
VREV32:35:result_float16x4 [] = { 0, 0, 0, 0,  }
VREV32:36:result_int8x16 [] = { fffffff3, fffffff2, fffffff1, fffffff0, fffffff7, fffffff6, fffffff5, fffffff4, fffffffb, fffffffa, fffffff9, fffffff8, ffffffff, fffffffe, fffffffd, fffffffc,  }
VREV32:37:result_int16x8 [] = { fffffff1, fffffff0, fffffff3, fffffff2, fffffff5, fffffff4, fffffff7, fffffff6,  }
VREV32:38:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VREV32:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VREV32:40:result_uint8x16 [] = { f3, f2, f1, f0, f7, f6, f5, f4, fb, fa, f9, f8, ff, fe, fd, fc,  }
VREV32:41:result_uint16x8 [] = { fff1, fff0, fff3, fff2, fff5, fff4, fff7, fff6,  }
VREV32:42:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VREV32:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VREV32:44:result_poly8x16 [] = { f3, f2, f1, f0, f7, f6, f5, f4, fb, fa, f9, f8, ff, fe, fd, fc,  }
VREV32:45:result_poly16x8 [] = { fff1, fff0, fff3, fff2, fff5, fff4, fff7, fff6,  }
VREV32:46:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VREV32:47:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VREV64 output:
VREV64:48:result_int8x8 [] = { fffffff7, fffffff6, fffffff5, fffffff4, fffffff3, fffffff2, fffffff1, fffffff0,  }
VREV64:49:result_int16x4 [] = { fffffff3, fffffff2, fffffff1, fffffff0,  }
VREV64:50:result_int32x2 [] = { fffffff1, fffffff0,  }
VREV64:51:result_int64x1 [] = { 3333333333333333,  }
VREV64:52:result_uint8x8 [] = { f7, f6, f5, f4, f3, f2, f1, f0,  }
VREV64:53:result_uint16x4 [] = { fff3, fff2, fff1, fff0,  }
VREV64:54:result_uint32x2 [] = { fffffff1, fffffff0,  }
VREV64:55:result_uint64x1 [] = { 3333333333333333,  }
VREV64:56:result_poly8x8 [] = { f7, f6, f5, f4, f3, f2, f1, f0,  }
VREV64:57:result_poly16x4 [] = { fff3, fff2, fff1, fff0,  }
VREV64:58:result_float32x2 [] = { c1700000, c1800000,  }
VREV64:59:result_float16x4 [] = { 0, 0, 0, 0,  }
VREV64:60:result_int8x16 [] = { fffffff7, fffffff6, fffffff5, fffffff4, fffffff3, fffffff2, fffffff1, fffffff0, ffffffff, fffffffe, fffffffd, fffffffc, fffffffb, fffffffa, fffffff9, fffffff8,  }
VREV64:61:result_int16x8 [] = { fffffff3, fffffff2, fffffff1, fffffff0, fffffff7, fffffff6, fffffff5, fffffff4,  }
VREV64:62:result_int32x4 [] = { fffffff1, fffffff0, fffffff3, fffffff2,  }
VREV64:63:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VREV64:64:result_uint8x16 [] = { f7, f6, f5, f4, f3, f2, f1, f0, ff, fe, fd, fc, fb, fa, f9, f8,  }
VREV64:65:result_uint16x8 [] = { fff3, fff2, fff1, fff0, fff7, fff6, fff5, fff4,  }
VREV64:66:result_uint32x4 [] = { fffffff1, fffffff0, fffffff3, fffffff2,  }
VREV64:67:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VREV64:68:result_poly8x16 [] = { f7, f6, f5, f4, f3, f2, f1, f0, ff, fe, fd, fc, fb, fa, f9, f8,  }
VREV64:69:result_poly16x8 [] = { fff3, fff2, fff1, fff0, fff7, fff6, fff5, fff4,  }
VREV64:70:result_float32x4 [] = { c1700000, c1800000, c1500000, c1600000,  }
VREV64:71:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VSRA_N output:
VSRA_N:0:result_int8x8 [] = { fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff,  }
VSRA_N:1:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VSRA_N:2:result_int32x2 [] = { fffffffc, fffffffd,  }
VSRA_N:3:result_int64x1 [] = { fffffffffffffff0,  }
VSRA_N:4:result_uint8x8 [] = { 5, 6, 7, 8, 9, a, b, c,  }
VSRA_N:5:result_uint16x4 [] = { fffc, fffd, fffe, ffff,  }
VSRA_N:6:result_uint32x2 [] = { fffffff3, fffffff4,  }
VSRA_N:7:result_uint64x1 [] = { fffffffffffffff0,  }
VSRA_N:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VSRA_N:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VSRA_N:10:result_float32x2 [] = { 33333333, 33333333,  }
VSRA_N:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VSRA_N:12:result_int8x16 [] = { fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff, 0, 1, 2, 3, 4, 5, 6, 7,  }
VSRA_N:13:result_int16x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VSRA_N:14:result_int32x4 [] = { fffffffc, fffffffd, fffffffe, ffffffff,  }
VSRA_N:15:result_int64x2 [] = { fffffffffffffff0, fffffffffffffff1,  }
VSRA_N:16:result_uint8x16 [] = { 5, 6, 7, 8, 9, a, b, c, d, e, f, 10, 11, 12, 13, 14,  }
VSRA_N:17:result_uint16x8 [] = { fffc, fffd, fffe, ffff, 0, 1, 2, 3,  }
VSRA_N:18:result_uint32x4 [] = { fffffff3, fffffff4, fffffff5, fffffff6,  }
VSRA_N:19:result_uint64x2 [] = { fffffffffffffff0, fffffffffffffff1,  }
VSRA_N:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSRA_N:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VSRA_N:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSRA_N:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VTRN/VTRNQ chunk 0 output:
VTRN/VTRNQ:0:result_int8x8 [] = { fffffff0, fffffff1, 11, 11, fffffff2, fffffff3, 11, 11,  }
VTRN/VTRNQ:1:result_int16x4 [] = { fffffff0, fffffff1, 22, 22,  }
VTRN/VTRNQ:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VTRN/VTRNQ:3:result_int64x1 [] = { 3333333333333333,  }
VTRN/VTRNQ:4:result_uint8x8 [] = { f0, f1, 55, 55, f2, f3, 55, 55,  }
VTRN/VTRNQ:5:result_uint16x4 [] = { fff0, fff1, 66, 66,  }
VTRN/VTRNQ:6:result_uint32x2 [] = { fffffff0, fffffff1,  }
VTRN/VTRNQ:7:result_uint64x1 [] = { 3333333333333333,  }
VTRN/VTRNQ:8:result_poly8x8 [] = { f0, f1, 55, 55, f2, f3, 55, 55,  }
VTRN/VTRNQ:9:result_poly16x4 [] = { fff0, fff1, 66, 66,  }
VTRN/VTRNQ:10:result_float32x2 [] = { c1800000, c1700000,  }
VTRN/VTRNQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VTRN/VTRNQ:12:result_int8x16 [] = { fffffff0, fffffff1, 11, 11, fffffff2, fffffff3, 11, 11, fffffff4, fffffff5, 11, 11, fffffff6, fffffff7, 11, 11,  }
VTRN/VTRNQ:13:result_int16x8 [] = { fffffff0, fffffff1, 22, 22, fffffff2, fffffff3, 22, 22,  }
VTRN/VTRNQ:14:result_int32x4 [] = { fffffff0, fffffff1, 33, 33,  }
VTRN/VTRNQ:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VTRN/VTRNQ:16:result_uint8x16 [] = { f0, f1, 55, 55, f2, f3, 55, 55, f4, f5, 55, 55, f6, f7, 55, 55,  }
VTRN/VTRNQ:17:result_uint16x8 [] = { fff0, fff1, 66, 66, fff2, fff3, 66, 66,  }
VTRN/VTRNQ:18:result_uint32x4 [] = { fffffff0, fffffff1, 77, 77,  }
VTRN/VTRNQ:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VTRN/VTRNQ:20:result_poly8x16 [] = { f0, f1, 55, 55, f2, f3, 55, 55, f4, f5, 55, 55, f6, f7, 55, 55,  }
VTRN/VTRNQ:21:result_poly16x8 [] = { fff0, fff1, 66, 66, fff2, fff3, 66, 66,  }
VTRN/VTRNQ:22:result_float32x4 [] = { c1800000, c1700000, 42073333, 42073333,  }
VTRN/VTRNQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VTRN/VTRNQ chunk 1 output:
VTRN/VTRNQ:24:result_int8x8 [] = { fffffff4, fffffff5, 11, 11, fffffff6, fffffff7, 11, 11,  }
VTRN/VTRNQ:25:result_int16x4 [] = { fffffff2, fffffff3, 22, 22,  }
VTRN/VTRNQ:26:result_int32x2 [] = { 33, 33,  }
VTRN/VTRNQ:27:result_int64x1 [] = { 3333333333333333,  }
VTRN/VTRNQ:28:result_uint8x8 [] = { f4, f5, 55, 55, f6, f7, 55, 55,  }
VTRN/VTRNQ:29:result_uint16x4 [] = { fff2, fff3, 66, 66,  }
VTRN/VTRNQ:30:result_uint32x2 [] = { 77, 77,  }
VTRN/VTRNQ:31:result_uint64x1 [] = { 3333333333333333,  }
VTRN/VTRNQ:32:result_poly8x8 [] = { f4, f5, 55, 55, f6, f7, 55, 55,  }
VTRN/VTRNQ:33:result_poly16x4 [] = { fff2, fff3, 66, 66,  }
VTRN/VTRNQ:34:result_float32x2 [] = { 42066666, 42066666,  }
VTRN/VTRNQ:35:result_float16x4 [] = { 0, 0, 0, 0,  }
VTRN/VTRNQ:36:result_int8x16 [] = { fffffff8, fffffff9, 11, 11, fffffffa, fffffffb, 11, 11, fffffffc, fffffffd, 11, 11, fffffffe, ffffffff, 11, 11,  }
VTRN/VTRNQ:37:result_int16x8 [] = { fffffff4, fffffff5, 22, 22, fffffff6, fffffff7, 22, 22,  }
VTRN/VTRNQ:38:result_int32x4 [] = { fffffff2, fffffff3, 33, 33,  }
VTRN/VTRNQ:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VTRN/VTRNQ:40:result_uint8x16 [] = { f8, f9, 55, 55, fa, fb, 55, 55, fc, fd, 55, 55, fe, ff, 55, 55,  }
VTRN/VTRNQ:41:result_uint16x8 [] = { fff4, fff5, 66, 66, fff6, fff7, 66, 66,  }
VTRN/VTRNQ:42:result_uint32x4 [] = { fffffff2, fffffff3, 77, 77,  }
VTRN/VTRNQ:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VTRN/VTRNQ:44:result_poly8x16 [] = { f8, f9, 55, 55, fa, fb, 55, 55, fc, fd, 55, 55, fe, ff, 55, 55,  }
VTRN/VTRNQ:45:result_poly16x8 [] = { fff4, fff5, 66, 66, fff6, fff7, 66, 66,  }
VTRN/VTRNQ:46:result_float32x4 [] = { c1600000, c1500000, 42073333, 42073333,  }
VTRN/VTRNQ:47:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VUZP/VUZPQ chunk 0 output:
VUZP/VUZPQ:0:result_int8x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VUZP/VUZPQ:1:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VUZP/VUZPQ:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VUZP/VUZPQ:3:result_int64x1 [] = { 3333333333333333,  }
VUZP/VUZPQ:4:result_uint8x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VUZP/VUZPQ:5:result_uint16x4 [] = { fff0, fff1, fff2, fff3,  }
VUZP/VUZPQ:6:result_uint32x2 [] = { fffffff0, fffffff1,  }
VUZP/VUZPQ:7:result_uint64x1 [] = { 3333333333333333,  }
VUZP/VUZPQ:8:result_poly8x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VUZP/VUZPQ:9:result_poly16x4 [] = { fff0, fff1, fff2, fff3,  }
VUZP/VUZPQ:10:result_float32x2 [] = { c1800000, c1700000,  }
VUZP/VUZPQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VUZP/VUZPQ:12:result_int8x16 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7, fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff,  }
VUZP/VUZPQ:13:result_int16x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VUZP/VUZPQ:14:result_int32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VUZP/VUZPQ:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VUZP/VUZPQ:16:result_uint8x16 [] = { f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fa, fb, fc, fd, fe, ff,  }
VUZP/VUZPQ:17:result_uint16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, fff6, fff7,  }
VUZP/VUZPQ:18:result_uint32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VUZP/VUZPQ:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VUZP/VUZPQ:20:result_poly8x16 [] = { f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fa, fb, fc, fd, fe, ff,  }
VUZP/VUZPQ:21:result_poly16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, fff6, fff7,  }
VUZP/VUZPQ:22:result_float32x4 [] = { c1800000, c1700000, c1600000, c1500000,  }
VUZP/VUZPQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VUZP/VUZPQ chunk 1 output:
VUZP/VUZPQ:24:result_int8x8 [] = { 11, 11, 11, 11, 11, 11, 11, 11,  }
VUZP/VUZPQ:25:result_int16x4 [] = { 22, 22, 22, 22,  }
VUZP/VUZPQ:26:result_int32x2 [] = { 33, 33,  }
VUZP/VUZPQ:27:result_int64x1 [] = { 3333333333333333,  }
VUZP/VUZPQ:28:result_uint8x8 [] = { 55, 55, 55, 55, 55, 55, 55, 55,  }
VUZP/VUZPQ:29:result_uint16x4 [] = { 66, 66, 66, 66,  }
VUZP/VUZPQ:30:result_uint32x2 [] = { 77, 77,  }
VUZP/VUZPQ:31:result_uint64x1 [] = { 3333333333333333,  }
VUZP/VUZPQ:32:result_poly8x8 [] = { 55, 55, 55, 55, 55, 55, 55, 55,  }
VUZP/VUZPQ:33:result_poly16x4 [] = { 66, 66, 66, 66,  }
VUZP/VUZPQ:34:result_float32x2 [] = { 42066666, 42066666,  }
VUZP/VUZPQ:35:result_float16x4 [] = { 0, 0, 0, 0,  }
VUZP/VUZPQ:36:result_int8x16 [] = { 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,  }
VUZP/VUZPQ:37:result_int16x8 [] = { 22, 22, 22, 22, 22, 22, 22, 22,  }
VUZP/VUZPQ:38:result_int32x4 [] = { 33, 33, 33, 33,  }
VUZP/VUZPQ:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VUZP/VUZPQ:40:result_uint8x16 [] = { 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,  }
VUZP/VUZPQ:41:result_uint16x8 [] = { 66, 66, 66, 66, 66, 66, 66, 66,  }
VUZP/VUZPQ:42:result_uint32x4 [] = { 77, 77, 77, 77,  }
VUZP/VUZPQ:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VUZP/VUZPQ:44:result_poly8x16 [] = { 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,  }
VUZP/VUZPQ:45:result_poly16x8 [] = { 66, 66, 66, 66, 66, 66, 66, 66,  }
VUZP/VUZPQ:46:result_float32x4 [] = { 42073333, 42073333, 42073333, 42073333,  }
VUZP/VUZPQ:47:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VZIP/VZIPQ chunk 0 output:
VZIP/VZIPQ:0:result_int8x8 [] = { fffffff0, fffffff4, 11, 11, fffffff1, fffffff5, 11, 11,  }
VZIP/VZIPQ:1:result_int16x4 [] = { fffffff0, fffffff2, 22, 22,  }
VZIP/VZIPQ:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VZIP/VZIPQ:3:result_int64x1 [] = { 3333333333333333,  }
VZIP/VZIPQ:4:result_uint8x8 [] = { f0, f4, 55, 55, f1, f5, 55, 55,  }
VZIP/VZIPQ:5:result_uint16x4 [] = { fff0, fff2, 66, 66,  }
VZIP/VZIPQ:6:result_uint32x2 [] = { fffffff0, fffffff1,  }
VZIP/VZIPQ:7:result_uint64x1 [] = { 3333333333333333,  }
VZIP/VZIPQ:8:result_poly8x8 [] = { f0, f4, 55, 55, f1, f5, 55, 55,  }
VZIP/VZIPQ:9:result_poly16x4 [] = { fff0, fff2, 66, 66,  }
VZIP/VZIPQ:10:result_float32x2 [] = { c1800000, c1700000,  }
VZIP/VZIPQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VZIP/VZIPQ:12:result_int8x16 [] = { fffffff0, fffffff8, 11, 11, fffffff1, fffffff9, 11, 11, fffffff2, fffffffa, 11, 11, fffffff3, fffffffb, 11, 11,  }
VZIP/VZIPQ:13:result_int16x8 [] = { fffffff0, fffffff4, 22, 22, fffffff1, fffffff5, 22, 22,  }
VZIP/VZIPQ:14:result_int32x4 [] = { fffffff0, fffffff2, 33, 33,  }
VZIP/VZIPQ:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VZIP/VZIPQ:16:result_uint8x16 [] = { f0, f8, 55, 55, f1, f9, 55, 55, f2, fa, 55, 55, f3, fb, 55, 55,  }
VZIP/VZIPQ:17:result_uint16x8 [] = { fff0, fff4, 66, 66, fff1, fff5, 66, 66,  }
VZIP/VZIPQ:18:result_uint32x4 [] = { fffffff0, fffffff2, 77, 77,  }
VZIP/VZIPQ:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VZIP/VZIPQ:20:result_poly8x16 [] = { f0, f8, 55, 55, f1, f9, 55, 55, f2, fa, 55, 55, f3, fb, 55, 55,  }
VZIP/VZIPQ:21:result_poly16x8 [] = { fff0, fff4, 66, 66, fff1, fff5, 66, 66,  }
VZIP/VZIPQ:22:result_float32x4 [] = { c1800000, c1600000, 42073333, 42073333,  }
VZIP/VZIPQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VZIP/VZIPQ chunk 1 output:
VZIP/VZIPQ:24:result_int8x8 [] = { fffffff2, fffffff6, 11, 11, fffffff3, fffffff7, 11, 11,  }
VZIP/VZIPQ:25:result_int16x4 [] = { fffffff1, fffffff3, 22, 22,  }
VZIP/VZIPQ:26:result_int32x2 [] = { 33, 33,  }
VZIP/VZIPQ:27:result_int64x1 [] = { 3333333333333333,  }
VZIP/VZIPQ:28:result_uint8x8 [] = { f2, f6, 55, 55, f3, f7, 55, 55,  }
VZIP/VZIPQ:29:result_uint16x4 [] = { fff1, fff3, 66, 66,  }
VZIP/VZIPQ:30:result_uint32x2 [] = { 77, 77,  }
VZIP/VZIPQ:31:result_uint64x1 [] = { 3333333333333333,  }
VZIP/VZIPQ:32:result_poly8x8 [] = { f2, f6, 55, 55, f3, f7, 55, 55,  }
VZIP/VZIPQ:33:result_poly16x4 [] = { fff1, fff3, 66, 66,  }
VZIP/VZIPQ:34:result_float32x2 [] = { 42066666, 42066666,  }
VZIP/VZIPQ:35:result_float16x4 [] = { 0, 0, 0, 0,  }
VZIP/VZIPQ:36:result_int8x16 [] = { fffffff4, fffffffc, 11, 11, fffffff5, fffffffd, 11, 11, fffffff6, fffffffe, 11, 11, fffffff7, ffffffff, 11, 11,  }
VZIP/VZIPQ:37:result_int16x8 [] = { fffffff2, fffffff6, 22, 22, fffffff3, fffffff7, 22, 22,  }
VZIP/VZIPQ:38:result_int32x4 [] = { fffffff1, fffffff3, 33, 33,  }
VZIP/VZIPQ:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VZIP/VZIPQ:40:result_uint8x16 [] = { f4, fc, 55, 55, f5, fd, 55, 55, f6, fe, 55, 55, f7, ff, 55, 55,  }
VZIP/VZIPQ:41:result_uint16x8 [] = { fff2, fff6, 66, 66, fff3, fff7, 66, 66,  }
VZIP/VZIPQ:42:result_uint32x4 [] = { fffffff1, fffffff3, 77, 77,  }
VZIP/VZIPQ:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VZIP/VZIPQ:44:result_poly8x16 [] = { f4, fc, 55, 55, f5, fd, 55, 55, f6, fe, 55, 55, f7, ff, 55, 55,  }
VZIP/VZIPQ:45:result_poly16x8 [] = { fff2, fff6, 66, 66, fff3, fff7, 66, 66,  }
VZIP/VZIPQ:46:result_float32x4 [] = { c1700000, c1500000, 42073333, 42073333,  }
VZIP/VZIPQ:47:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VREINTERPRET/VREINTERPRETQ output:
VREINTERPRET/VREINTERPRETQ:0:result_int8x8 [] = { fffffff0, ffffffff, fffffff1, ffffffff, fffffff2, ffffffff, fffffff3, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:1:result_int8x8 [] = { fffffff0, ffffffff, ffffffff, ffffffff, fffffff1, ffffffff, ffffffff, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:2:result_int8x8 [] = { fffffff0, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:3:result_int8x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VREINTERPRET/VREINTERPRETQ:4:result_int8x8 [] = { fffffff0, ffffffff, fffffff1, ffffffff, fffffff2, ffffffff, fffffff3, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:5:result_int8x8 [] = { fffffff0, ffffffff, ffffffff, ffffffff, fffffff1, ffffffff, ffffffff, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:6:result_int8x8 [] = { fffffff0, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:7:result_int8x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VREINTERPRET/VREINTERPRETQ:8:result_int8x8 [] = { fffffff0, ffffffff, fffffff1, ffffffff, fffffff2, ffffffff, fffffff3, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:9:result_int16x4 [] = { fffff1f0, fffff3f2, fffff5f4, fffff7f6,  }
VREINTERPRET/VREINTERPRETQ:10:result_int16x4 [] = { fffffff0, ffffffff, fffffff1, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:11:result_int16x4 [] = { fffffff0, ffffffff, ffffffff, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:12:result_int16x4 [] = { fffff1f0, fffff3f2, fffff5f4, fffff7f6,  }
VREINTERPRET/VREINTERPRETQ:13:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VREINTERPRET/VREINTERPRETQ:14:result_int16x4 [] = { fffffff0, ffffffff, fffffff1, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:15:result_int16x4 [] = { fffffff0, ffffffff, ffffffff, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:16:result_int16x4 [] = { fffff1f0, fffff3f2, fffff5f4, fffff7f6,  }
VREINTERPRET/VREINTERPRETQ:17:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VREINTERPRET/VREINTERPRETQ:18:result_int32x2 [] = { f3f2f1f0, f7f6f5f4,  }
VREINTERPRET/VREINTERPRETQ:19:result_int32x2 [] = { fff1fff0, fff3fff2,  }
VREINTERPRET/VREINTERPRETQ:20:result_int32x2 [] = { fffffff0, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:21:result_int32x2 [] = { f3f2f1f0, f7f6f5f4,  }
VREINTERPRET/VREINTERPRETQ:22:result_int32x2 [] = { fff1fff0, fff3fff2,  }
VREINTERPRET/VREINTERPRETQ:23:result_int32x2 [] = { fffffff0, fffffff1,  }
VREINTERPRET/VREINTERPRETQ:24:result_int32x2 [] = { fffffff0, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:25:result_int32x2 [] = { f3f2f1f0, f7f6f5f4,  }
VREINTERPRET/VREINTERPRETQ:26:result_int32x2 [] = { fff1fff0, fff3fff2,  }
VREINTERPRET/VREINTERPRETQ:27:result_int64x1 [] = { f7f6f5f4f3f2f1f0,  }
VREINTERPRET/VREINTERPRETQ:28:result_int64x1 [] = { fff3fff2fff1fff0,  }
VREINTERPRET/VREINTERPRETQ:29:result_int64x1 [] = { fffffff1fffffff0,  }
VREINTERPRET/VREINTERPRETQ:30:result_int64x1 [] = { f7f6f5f4f3f2f1f0,  }
VREINTERPRET/VREINTERPRETQ:31:result_int64x1 [] = { fff3fff2fff1fff0,  }
VREINTERPRET/VREINTERPRETQ:32:result_int64x1 [] = { fffffff1fffffff0,  }
VREINTERPRET/VREINTERPRETQ:33:result_int64x1 [] = { fffffffffffffff0,  }
VREINTERPRET/VREINTERPRETQ:34:result_int64x1 [] = { f7f6f5f4f3f2f1f0,  }
VREINTERPRET/VREINTERPRETQ:35:result_int64x1 [] = { fff3fff2fff1fff0,  }
VREINTERPRET/VREINTERPRETQ:36:result_uint8x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VREINTERPRET/VREINTERPRETQ:37:result_uint8x8 [] = { f0, ff, f1, ff, f2, ff, f3, ff,  }
VREINTERPRET/VREINTERPRETQ:38:result_uint8x8 [] = { f0, ff, ff, ff, f1, ff, ff, ff,  }
VREINTERPRET/VREINTERPRETQ:39:result_uint8x8 [] = { f0, ff, ff, ff, ff, ff, ff, ff,  }
VREINTERPRET/VREINTERPRETQ:40:result_uint8x8 [] = { f0, ff, f1, ff, f2, ff, f3, ff,  }
VREINTERPRET/VREINTERPRETQ:41:result_uint8x8 [] = { f0, ff, ff, ff, f1, ff, ff, ff,  }
VREINTERPRET/VREINTERPRETQ:42:result_uint8x8 [] = { f0, ff, ff, ff, ff, ff, ff, ff,  }
VREINTERPRET/VREINTERPRETQ:43:result_uint8x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VREINTERPRET/VREINTERPRETQ:44:result_uint8x8 [] = { f0, ff, f1, ff, f2, ff, f3, ff,  }
VREINTERPRET/VREINTERPRETQ:45:result_uint16x4 [] = { f1f0, f3f2, f5f4, f7f6,  }
VREINTERPRET/VREINTERPRETQ:46:result_uint16x4 [] = { fff0, fff1, fff2, fff3,  }
VREINTERPRET/VREINTERPRETQ:47:result_uint16x4 [] = { fff0, ffff, fff1, ffff,  }
VREINTERPRET/VREINTERPRETQ:48:result_uint16x4 [] = { fff0, ffff, ffff, ffff,  }
VREINTERPRET/VREINTERPRETQ:49:result_uint16x4 [] = { f1f0, f3f2, f5f4, f7f6,  }
VREINTERPRET/VREINTERPRETQ:50:result_uint16x4 [] = { fff0, ffff, fff1, ffff,  }
VREINTERPRET/VREINTERPRETQ:51:result_uint16x4 [] = { fff0, ffff, ffff, ffff,  }
VREINTERPRET/VREINTERPRETQ:52:result_uint16x4 [] = { f1f0, f3f2, f5f4, f7f6,  }
VREINTERPRET/VREINTERPRETQ:53:result_uint16x4 [] = { fff0, fff1, fff2, fff3,  }
VREINTERPRET/VREINTERPRETQ:54:result_uint32x2 [] = { f3f2f1f0, f7f6f5f4,  }
VREINTERPRET/VREINTERPRETQ:55:result_uint32x2 [] = { fff1fff0, fff3fff2,  }
VREINTERPRET/VREINTERPRETQ:56:result_uint32x2 [] = { fffffff0, fffffff1,  }
VREINTERPRET/VREINTERPRETQ:57:result_uint32x2 [] = { fffffff0, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:58:result_uint32x2 [] = { f3f2f1f0, f7f6f5f4,  }
VREINTERPRET/VREINTERPRETQ:59:result_uint32x2 [] = { fff1fff0, fff3fff2,  }
VREINTERPRET/VREINTERPRETQ:60:result_uint32x2 [] = { fffffff0, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:61:result_uint32x2 [] = { f3f2f1f0, f7f6f5f4,  }
VREINTERPRET/VREINTERPRETQ:62:result_uint32x2 [] = { fff1fff0, fff3fff2,  }
VREINTERPRET/VREINTERPRETQ:63:result_uint64x1 [] = { f7f6f5f4f3f2f1f0,  }
VREINTERPRET/VREINTERPRETQ:64:result_uint64x1 [] = { fff3fff2fff1fff0,  }
VREINTERPRET/VREINTERPRETQ:65:result_uint64x1 [] = { fffffff1fffffff0,  }
VREINTERPRET/VREINTERPRETQ:66:result_uint64x1 [] = { fffffffffffffff0,  }
VREINTERPRET/VREINTERPRETQ:67:result_uint64x1 [] = { f7f6f5f4f3f2f1f0,  }
VREINTERPRET/VREINTERPRETQ:68:result_uint64x1 [] = { fff3fff2fff1fff0,  }
VREINTERPRET/VREINTERPRETQ:69:result_uint64x1 [] = { fffffff1fffffff0,  }
VREINTERPRET/VREINTERPRETQ:70:result_uint64x1 [] = { f7f6f5f4f3f2f1f0,  }
VREINTERPRET/VREINTERPRETQ:71:result_uint64x1 [] = { fff3fff2fff1fff0,  }
VREINTERPRET/VREINTERPRETQ:72:result_poly8x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VREINTERPRET/VREINTERPRETQ:73:result_poly8x8 [] = { f0, ff, f1, ff, f2, ff, f3, ff,  }
VREINTERPRET/VREINTERPRETQ:74:result_poly8x8 [] = { f0, ff, ff, ff, f1, ff, ff, ff,  }
VREINTERPRET/VREINTERPRETQ:75:result_poly8x8 [] = { f0, ff, ff, ff, ff, ff, ff, ff,  }
VREINTERPRET/VREINTERPRETQ:76:result_poly8x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VREINTERPRET/VREINTERPRETQ:77:result_poly8x8 [] = { f0, ff, f1, ff, f2, ff, f3, ff,  }
VREINTERPRET/VREINTERPRETQ:78:result_poly8x8 [] = { f0, ff, ff, ff, f1, ff, ff, ff,  }
VREINTERPRET/VREINTERPRETQ:79:result_poly8x8 [] = { f0, ff, ff, ff, ff, ff, ff, ff,  }
VREINTERPRET/VREINTERPRETQ:80:result_poly8x8 [] = { f0, ff, f1, ff, f2, ff, f3, ff,  }
VREINTERPRET/VREINTERPRETQ:81:result_poly16x4 [] = { f1f0, f3f2, f5f4, f7f6,  }
VREINTERPRET/VREINTERPRETQ:82:result_poly16x4 [] = { fff0, fff1, fff2, fff3,  }
VREINTERPRET/VREINTERPRETQ:83:result_poly16x4 [] = { fff0, ffff, fff1, ffff,  }
VREINTERPRET/VREINTERPRETQ:84:result_poly16x4 [] = { fff0, ffff, ffff, ffff,  }
VREINTERPRET/VREINTERPRETQ:85:result_poly16x4 [] = { f1f0, f3f2, f5f4, f7f6,  }
VREINTERPRET/VREINTERPRETQ:86:result_poly16x4 [] = { fff0, fff1, fff2, fff3,  }
VREINTERPRET/VREINTERPRETQ:87:result_poly16x4 [] = { fff0, ffff, fff1, ffff,  }
VREINTERPRET/VREINTERPRETQ:88:result_poly16x4 [] = { fff0, ffff, ffff, ffff,  }
VREINTERPRET/VREINTERPRETQ:89:result_poly16x4 [] = { f1f0, f3f2, f5f4, f7f6,  }
VREINTERPRET/VREINTERPRETQ:90:result_int8x16 [] = { fffffff0, ffffffff, fffffff1, ffffffff, fffffff2, ffffffff, fffffff3, ffffffff, fffffff4, ffffffff, fffffff5, ffffffff, fffffff6, ffffffff, fffffff7, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:91:result_int8x16 [] = { fffffff0, ffffffff, ffffffff, ffffffff, fffffff1, ffffffff, ffffffff, ffffffff, fffffff2, ffffffff, ffffffff, ffffffff, fffffff3, ffffffff, ffffffff, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:92:result_int8x16 [] = { fffffff0, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, fffffff1, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:93:result_int8x16 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7, fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:94:result_int8x16 [] = { fffffff0, ffffffff, fffffff1, ffffffff, fffffff2, ffffffff, fffffff3, ffffffff, fffffff4, ffffffff, fffffff5, ffffffff, fffffff6, ffffffff, fffffff7, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:95:result_int8x16 [] = { fffffff0, ffffffff, ffffffff, ffffffff, fffffff1, ffffffff, ffffffff, ffffffff, fffffff2, ffffffff, ffffffff, ffffffff, fffffff3, ffffffff, ffffffff, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:96:result_int8x16 [] = { fffffff0, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, fffffff1, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:97:result_int8x16 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7, fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:98:result_int8x16 [] = { fffffff0, ffffffff, fffffff1, ffffffff, fffffff2, ffffffff, fffffff3, ffffffff, fffffff4, ffffffff, fffffff5, ffffffff, fffffff6, ffffffff, fffffff7, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:99:result_int16x8 [] = { fffff1f0, fffff3f2, fffff5f4, fffff7f6, fffff9f8, fffffbfa, fffffdfc, fffffffe,  }
VREINTERPRET/VREINTERPRETQ:100:result_int16x8 [] = { fffffff0, ffffffff, fffffff1, ffffffff, fffffff2, ffffffff, fffffff3, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:101:result_int16x8 [] = { fffffff0, ffffffff, ffffffff, ffffffff, fffffff1, ffffffff, ffffffff, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:102:result_int16x8 [] = { fffff1f0, fffff3f2, fffff5f4, fffff7f6, fffff9f8, fffffbfa, fffffdfc, fffffffe,  }
VREINTERPRET/VREINTERPRETQ:103:result_int16x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VREINTERPRET/VREINTERPRETQ:104:result_int16x8 [] = { fffffff0, ffffffff, fffffff1, ffffffff, fffffff2, ffffffff, fffffff3, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:105:result_int16x8 [] = { fffffff0, ffffffff, ffffffff, ffffffff, fffffff1, ffffffff, ffffffff, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:106:result_int16x8 [] = { fffff1f0, fffff3f2, fffff5f4, fffff7f6, fffff9f8, fffffbfa, fffffdfc, fffffffe,  }
VREINTERPRET/VREINTERPRETQ:107:result_int16x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VREINTERPRET/VREINTERPRETQ:108:result_int32x4 [] = { f3f2f1f0, f7f6f5f4, fbfaf9f8, fffefdfc,  }
VREINTERPRET/VREINTERPRETQ:109:result_int32x4 [] = { fff1fff0, fff3fff2, fff5fff4, fff7fff6,  }
VREINTERPRET/VREINTERPRETQ:110:result_int32x4 [] = { fffffff0, ffffffff, fffffff1, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:111:result_int32x4 [] = { f3f2f1f0, f7f6f5f4, fbfaf9f8, fffefdfc,  }
VREINTERPRET/VREINTERPRETQ:112:result_int32x4 [] = { fff1fff0, fff3fff2, fff5fff4, fff7fff6,  }
VREINTERPRET/VREINTERPRETQ:113:result_int32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VREINTERPRET/VREINTERPRETQ:114:result_int32x4 [] = { fffffff0, ffffffff, fffffff1, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:115:result_int32x4 [] = { f3f2f1f0, f7f6f5f4, fbfaf9f8, fffefdfc,  }
VREINTERPRET/VREINTERPRETQ:116:result_int32x4 [] = { fff1fff0, fff3fff2, fff5fff4, fff7fff6,  }
VREINTERPRET/VREINTERPRETQ:117:result_int64x2 [] = { f7f6f5f4f3f2f1f0, fffefdfcfbfaf9f8,  }
VREINTERPRET/VREINTERPRETQ:118:result_int64x2 [] = { fff3fff2fff1fff0, fff7fff6fff5fff4,  }
VREINTERPRET/VREINTERPRETQ:119:result_int64x2 [] = { fffffff1fffffff0, fffffff3fffffff2,  }
VREINTERPRET/VREINTERPRETQ:120:result_int64x2 [] = { f7f6f5f4f3f2f1f0, fffefdfcfbfaf9f8,  }
VREINTERPRET/VREINTERPRETQ:121:result_int64x2 [] = { fff3fff2fff1fff0, fff7fff6fff5fff4,  }
VREINTERPRET/VREINTERPRETQ:122:result_int64x2 [] = { fffffff1fffffff0, fffffff3fffffff2,  }
VREINTERPRET/VREINTERPRETQ:123:result_int64x2 [] = { fffffffffffffff0, fffffffffffffff1,  }
VREINTERPRET/VREINTERPRETQ:124:result_int64x2 [] = { f7f6f5f4f3f2f1f0, fffefdfcfbfaf9f8,  }
VREINTERPRET/VREINTERPRETQ:125:result_int64x2 [] = { fff3fff2fff1fff0, fff7fff6fff5fff4,  }
VREINTERPRET/VREINTERPRETQ:126:result_uint16x8 [] = { f1f0, f3f2, f5f4, f7f6, f9f8, fbfa, fdfc, fffe,  }
VREINTERPRET/VREINTERPRETQ:127:result_uint16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, fff6, fff7,  }
VREINTERPRET/VREINTERPRETQ:128:result_uint16x8 [] = { fff0, ffff, fff1, ffff, fff2, ffff, fff3, ffff,  }
VREINTERPRET/VREINTERPRETQ:129:result_uint16x8 [] = { fff0, ffff, ffff, ffff, fff1, ffff, ffff, ffff,  }
VREINTERPRET/VREINTERPRETQ:130:result_uint16x8 [] = { f1f0, f3f2, f5f4, f7f6, f9f8, fbfa, fdfc, fffe,  }
VREINTERPRET/VREINTERPRETQ:131:result_uint16x8 [] = { fff0, ffff, fff1, ffff, fff2, ffff, fff3, ffff,  }
VREINTERPRET/VREINTERPRETQ:132:result_uint16x8 [] = { fff0, ffff, ffff, ffff, fff1, ffff, ffff, ffff,  }
VREINTERPRET/VREINTERPRETQ:133:result_uint16x8 [] = { f1f0, f3f2, f5f4, f7f6, f9f8, fbfa, fdfc, fffe,  }
VREINTERPRET/VREINTERPRETQ:134:result_uint16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, fff6, fff7,  }
VREINTERPRET/VREINTERPRETQ:135:result_uint32x4 [] = { f3f2f1f0, f7f6f5f4, fbfaf9f8, fffefdfc,  }
VREINTERPRET/VREINTERPRETQ:136:result_uint32x4 [] = { fff1fff0, fff3fff2, fff5fff4, fff7fff6,  }
VREINTERPRET/VREINTERPRETQ:137:result_uint32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VREINTERPRET/VREINTERPRETQ:138:result_uint32x4 [] = { fffffff0, ffffffff, fffffff1, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:139:result_uint32x4 [] = { f3f2f1f0, f7f6f5f4, fbfaf9f8, fffefdfc,  }
VREINTERPRET/VREINTERPRETQ:140:result_uint32x4 [] = { fff1fff0, fff3fff2, fff5fff4, fff7fff6,  }
VREINTERPRET/VREINTERPRETQ:141:result_uint32x4 [] = { fffffff0, ffffffff, fffffff1, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:142:result_uint32x4 [] = { f3f2f1f0, f7f6f5f4, fbfaf9f8, fffefdfc,  }
VREINTERPRET/VREINTERPRETQ:143:result_uint32x4 [] = { fff1fff0, fff3fff2, fff5fff4, fff7fff6,  }
VREINTERPRET/VREINTERPRETQ:144:result_uint64x2 [] = { f7f6f5f4f3f2f1f0, fffefdfcfbfaf9f8,  }
VREINTERPRET/VREINTERPRETQ:145:result_uint64x2 [] = { fff3fff2fff1fff0, fff7fff6fff5fff4,  }
VREINTERPRET/VREINTERPRETQ:146:result_uint64x2 [] = { fffffff1fffffff0, fffffff3fffffff2,  }
VREINTERPRET/VREINTERPRETQ:147:result_uint64x2 [] = { fffffffffffffff0, fffffffffffffff1,  }
VREINTERPRET/VREINTERPRETQ:148:result_uint64x2 [] = { f7f6f5f4f3f2f1f0, fffefdfcfbfaf9f8,  }
VREINTERPRET/VREINTERPRETQ:149:result_uint64x2 [] = { fff3fff2fff1fff0, fff7fff6fff5fff4,  }
VREINTERPRET/VREINTERPRETQ:150:result_uint64x2 [] = { fffffff1fffffff0, fffffff3fffffff2,  }
VREINTERPRET/VREINTERPRETQ:151:result_uint64x2 [] = { f7f6f5f4f3f2f1f0, fffefdfcfbfaf9f8,  }
VREINTERPRET/VREINTERPRETQ:152:result_uint64x2 [] = { fff3fff2fff1fff0, fff7fff6fff5fff4,  }
VREINTERPRET/VREINTERPRETQ:153:result_uint8x16 [] = { f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fa, fb, fc, fd, fe, ff,  }
VREINTERPRET/VREINTERPRETQ:154:result_uint8x16 [] = { f0, ff, f1, ff, f2, ff, f3, ff, f4, ff, f5, ff, f6, ff, f7, ff,  }
VREINTERPRET/VREINTERPRETQ:155:result_uint8x16 [] = { f0, ff, ff, ff, f1, ff, ff, ff, f2, ff, ff, ff, f3, ff, ff, ff,  }
VREINTERPRET/VREINTERPRETQ:156:result_uint8x16 [] = { f0, ff, ff, ff, ff, ff, ff, ff, f1, ff, ff, ff, ff, ff, ff, ff,  }
VREINTERPRET/VREINTERPRETQ:157:result_uint8x16 [] = { f0, ff, f1, ff, f2, ff, f3, ff, f4, ff, f5, ff, f6, ff, f7, ff,  }
VREINTERPRET/VREINTERPRETQ:158:result_uint8x16 [] = { f0, ff, ff, ff, f1, ff, ff, ff, f2, ff, ff, ff, f3, ff, ff, ff,  }
VREINTERPRET/VREINTERPRETQ:159:result_uint8x16 [] = { f0, ff, ff, ff, ff, ff, ff, ff, f1, ff, ff, ff, ff, ff, ff, ff,  }
VREINTERPRET/VREINTERPRETQ:160:result_uint8x16 [] = { f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fa, fb, fc, fd, fe, ff,  }
VREINTERPRET/VREINTERPRETQ:161:result_uint8x16 [] = { f0, ff, f1, ff, f2, ff, f3, ff, f4, ff, f5, ff, f6, ff, f7, ff,  }
VREINTERPRET/VREINTERPRETQ:162:result_float32x2 [] = { f3f2f1f0, f7f6f5f4,  }
VREINTERPRET/VREINTERPRETQ:163:result_float32x2 [] = { fff1fff0, fff3fff2,  }
VREINTERPRET/VREINTERPRETQ:164:result_float32x2 [] = { fffffff0, fffffff1,  }
VREINTERPRET/VREINTERPRETQ:165:result_float32x2 [] = { fffffff0, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:166:result_float32x2 [] = { f3f2f1f0, f7f6f5f4,  }
VREINTERPRET/VREINTERPRETQ:167:result_float32x2 [] = { fff1fff0, fff3fff2,  }
VREINTERPRET/VREINTERPRETQ:168:result_float32x2 [] = { fffffff0, fffffff1,  }
VREINTERPRET/VREINTERPRETQ:169:result_float32x2 [] = { fffffff0, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:170:result_float32x2 [] = { f3f2f1f0, f7f6f5f4,  }
VREINTERPRET/VREINTERPRETQ:171:result_float32x2 [] = { fff1fff0, fff3fff2,  }
VREINTERPRET/VREINTERPRETQ:172:result_float32x4 [] = { f3f2f1f0, f7f6f5f4, fbfaf9f8, fffefdfc,  }
VREINTERPRET/VREINTERPRETQ:173:result_float32x4 [] = { fff1fff0, fff3fff2, fff5fff4, fff7fff6,  }
VREINTERPRET/VREINTERPRETQ:174:result_float32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VREINTERPRET/VREINTERPRETQ:175:result_float32x4 [] = { fffffff0, ffffffff, fffffff1, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:176:result_float32x4 [] = { f3f2f1f0, f7f6f5f4, fbfaf9f8, fffefdfc,  }
VREINTERPRET/VREINTERPRETQ:177:result_float32x4 [] = { fff1fff0, fff3fff2, fff5fff4, fff7fff6,  }
VREINTERPRET/VREINTERPRETQ:178:result_float32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VREINTERPRET/VREINTERPRETQ:179:result_float32x4 [] = { fffffff0, ffffffff, fffffff1, ffffffff,  }
VREINTERPRET/VREINTERPRETQ:180:result_float32x4 [] = { f3f2f1f0, f7f6f5f4, fbfaf9f8, fffefdfc,  }
VREINTERPRET/VREINTERPRETQ:181:result_float32x4 [] = { fff1fff0, fff3fff2, fff5fff4, fff7fff6,  }
VREINTERPRET/VREINTERPRETQ:182:result_int8x8 [] = { 0, 0, ffffff80, ffffffc1, 0, 0, 70, ffffffc1,  }
VREINTERPRET/VREINTERPRETQ:183:result_int16x4 [] = { 0, ffffc180, 0, ffffc170,  }
VREINTERPRET/VREINTERPRETQ:184:result_int32x2 [] = { c1800000, c1700000,  }
VREINTERPRET/VREINTERPRETQ:185:result_int64x1 [] = { c1700000c1800000,  }
VREINTERPRET/VREINTERPRETQ:186:result_uint8x8 [] = { 0, 0, 80, c1, 0, 0, 70, c1,  }
VREINTERPRET/VREINTERPRETQ:187:result_uint16x4 [] = { 0, c180, 0, c170,  }
VREINTERPRET/VREINTERPRETQ:188:result_uint32x2 [] = { c1800000, c1700000,  }
VREINTERPRET/VREINTERPRETQ:189:result_uint64x1 [] = { c1700000c1800000,  }
VREINTERPRET/VREINTERPRETQ:190:result_poly8x8 [] = { 0, 0, 80, c1, 0, 0, 70, c1,  }
VREINTERPRET/VREINTERPRETQ:191:result_poly16x4 [] = { 0, c180, 0, c170,  }
VREINTERPRET/VREINTERPRETQ:192:result_int8x16 [] = { 0, 0, ffffff80, ffffffc1, 0, 0, 70, ffffffc1, 0, 0, 60, ffffffc1, 0, 0, 50, ffffffc1,  }
VREINTERPRET/VREINTERPRETQ:193:result_int16x8 [] = { 0, ffffc180, 0, ffffc170, 0, ffffc160, 0, ffffc150,  }
VREINTERPRET/VREINTERPRETQ:194:result_int32x4 [] = { c1800000, c1700000, c1600000, c1500000,  }
VREINTERPRET/VREINTERPRETQ:195:result_int64x2 [] = { c1700000c1800000, c1500000c1600000,  }
VREINTERPRET/VREINTERPRETQ:196:result_uint8x16 [] = { 0, 0, 80, c1, 0, 0, 70, c1, 0, 0, 60, c1, 0, 0, 50, c1,  }
VREINTERPRET/VREINTERPRETQ:197:result_uint16x8 [] = { 0, c180, 0, c170, 0, c160, 0, c150,  }
VREINTERPRET/VREINTERPRETQ:198:result_uint32x4 [] = { c1800000, c1700000, c1600000, c1500000,  }
VREINTERPRET/VREINTERPRETQ:199:result_uint64x2 [] = { c1700000c1800000, c1500000c1600000,  }
VREINTERPRET/VREINTERPRETQ:200:result_poly8x16 [] = { 0, 0, 80, c1, 0, 0, 70, c1, 0, 0, 60, c1, 0, 0, 50, c1,  }
VREINTERPRET/VREINTERPRETQ:201:result_poly16x8 [] = { 0, c180, 0, c170, 0, c160, 0, c150,  }
VREINTERPRET/VREINTERPRETQ:202:result_float16x4 [] = { f1f0, f3f2, f5f4, f7f6,  }
VREINTERPRET/VREINTERPRETQ:203:result_float16x4 [] = { fff0, fff1, fff2, fff3,  }
VREINTERPRET/VREINTERPRETQ:204:result_float16x4 [] = { fff0, ffff, fff1, ffff,  }
VREINTERPRET/VREINTERPRETQ:205:result_float16x4 [] = { fff0, ffff, ffff, ffff,  }
VREINTERPRET/VREINTERPRETQ:206:result_float16x4 [] = { f1f0, f3f2, f5f4, f7f6,  }
VREINTERPRET/VREINTERPRETQ:207:result_float16x4 [] = { fff0, fff1, fff2, fff3,  }
VREINTERPRET/VREINTERPRETQ:208:result_float16x4 [] = { fff0, ffff, fff1, ffff,  }
VREINTERPRET/VREINTERPRETQ:209:result_float16x4 [] = { fff0, ffff, ffff, ffff,  }
VREINTERPRET/VREINTERPRETQ:210:result_float16x4 [] = { f1f0, f3f2, f5f4, f7f6,  }
VREINTERPRET/VREINTERPRETQ:211:result_float16x4 [] = { fff0, fff1, fff2, fff3,  }
VREINTERPRET/VREINTERPRETQ:212:result_float16x4 [] = { 0, c180, 0, c170,  }
VREINTERPRET/VREINTERPRETQ:213:result_float16x8 [] = { f1f0, f3f2, f5f4, f7f6, f9f8, fbfa, fdfc, fffe,  }
VREINTERPRET/VREINTERPRETQ:214:result_float16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, fff6, fff7,  }
VREINTERPRET/VREINTERPRETQ:215:result_float16x8 [] = { fff0, ffff, fff1, ffff, fff2, ffff, fff3, ffff,  }
VREINTERPRET/VREINTERPRETQ:216:result_float16x8 [] = { fff0, ffff, ffff, ffff, fff1, ffff, ffff, ffff,  }
VREINTERPRET/VREINTERPRETQ:217:result_float16x8 [] = { f1f0, f3f2, f5f4, f7f6, f9f8, fbfa, fdfc, fffe,  }
VREINTERPRET/VREINTERPRETQ:218:result_float16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, fff6, fff7,  }
VREINTERPRET/VREINTERPRETQ:219:result_float16x8 [] = { fff0, ffff, fff1, ffff, fff2, ffff, fff3, ffff,  }
VREINTERPRET/VREINTERPRETQ:220:result_float16x8 [] = { fff0, ffff, ffff, ffff, fff1, ffff, ffff, ffff,  }
VREINTERPRET/VREINTERPRETQ:221:result_float16x8 [] = { f1f0, f3f2, f5f4, f7f6, f9f8, fbfa, fdfc, fffe,  }
VREINTERPRET/VREINTERPRETQ:222:result_float16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, fff6, fff7,  }
VREINTERPRET/VREINTERPRETQ:223:result_float16x8 [] = { 0, c180, 0, c170, 0, c160, 0, c150,  }
VREINTERPRET/VREINTERPRETQ:224:result_int8x8 [] = { 0, ffffffcc, ffffff80, ffffffcb, 0, ffffffcb, ffffff80, ffffffca,  }
VREINTERPRET/VREINTERPRETQ:225:result_int16x4 [] = { ffffcc00, ffffcb80, ffffcb00, ffffca80,  }
VREINTERPRET/VREINTERPRETQ:226:result_int32x2 [] = { cb80cc00, ca80cb00,  }
VREINTERPRET/VREINTERPRETQ:227:result_int64x1 [] = { ca80cb00cb80cc00,  }
VREINTERPRET/VREINTERPRETQ:228:result_uint8x8 [] = { 0, cc, 80, cb, 0, cb, 80, ca,  }
VREINTERPRET/VREINTERPRETQ:229:result_uint16x4 [] = { cc00, cb80, cb00, ca80,  }
VREINTERPRET/VREINTERPRETQ:230:result_uint32x2 [] = { cb80cc00, ca80cb00,  }
VREINTERPRET/VREINTERPRETQ:231:result_uint64x1 [] = { ca80cb00cb80cc00,  }
VREINTERPRET/VREINTERPRETQ:232:result_poly8x8 [] = { 0, cc, 80, cb, 0, cb, 80, ca,  }
VREINTERPRET/VREINTERPRETQ:233:result_poly16x4 [] = { cc00, cb80, cb00, ca80,  }
VREINTERPRET/VREINTERPRETQ:234:result_float32x2 [] = { cb80cc00, ca80cb00,  }
VREINTERPRET/VREINTERPRETQ:235:result_int8x16 [] = { 0, ffffffcc, ffffff80, ffffffcb, 0, ffffffcb, ffffff80, ffffffca, 0, ffffffca, ffffff80, ffffffc9, 0, ffffffc9, ffffff80, ffffffc8,  }
VREINTERPRET/VREINTERPRETQ:236:result_int16x8 [] = { ffffcc00, ffffcb80, ffffcb00, ffffca80, ffffca00, ffffc980, ffffc900, ffffc880,  }
VREINTERPRET/VREINTERPRETQ:237:result_int32x4 [] = { cb80cc00, ca80cb00, c980ca00, c880c900,  }
VREINTERPRET/VREINTERPRETQ:238:result_int64x2 [] = { ca80cb00cb80cc00, c880c900c980ca00,  }
VREINTERPRET/VREINTERPRETQ:239:result_uint8x16 [] = { 0, cc, 80, cb, 0, cb, 80, ca, 0, ca, 80, c9, 0, c9, 80, c8,  }
VREINTERPRET/VREINTERPRETQ:240:result_uint16x8 [] = { cc00, cb80, cb00, ca80, ca00, c980, c900, c880,  }
VREINTERPRET/VREINTERPRETQ:241:result_uint32x4 [] = { cb80cc00, ca80cb00, c980ca00, c880c900,  }
VREINTERPRET/VREINTERPRETQ:242:result_uint64x2 [] = { ca80cb00cb80cc00, c880c900c980ca00,  }
VREINTERPRET/VREINTERPRETQ:243:result_poly8x16 [] = { 0, cc, 80, cb, 0, cb, 80, ca, 0, ca, 80, c9, 0, c9, 80, c8,  }
VREINTERPRET/VREINTERPRETQ:244:result_poly16x8 [] = { cc00, cb80, cb00, ca80, ca00, c980, c900, c880,  }
VREINTERPRET/VREINTERPRETQ:245:result_float32x4 [] = { cb80cc00, ca80cb00, c980ca00, c880c900,  }

VQRDMULH cumulative saturation output:
VQRDMULH:0:vqrdmulh_s16 Neon cumulative saturation 0
VQRDMULH:1:vqrdmulh_s32 Neon cumulative saturation 0
VQRDMULH:2:vqrdmulhq_s16 Neon cumulative saturation 0
VQRDMULH:3:vqrdmulhq_s32 Neon cumulative saturation 0

VQRDMULH output:
VQRDMULH:4:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH:5:result_int16x4 [] = { fffffff5, fffffff6, fffffff7, fffffff7,  }
VQRDMULH:6:result_int32x2 [] = { 0, 0,  }
VQRDMULH:7:result_int64x1 [] = { 3333333333333333,  }
VQRDMULH:8:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH:9:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRDMULH:10:result_uint32x2 [] = { 33333333, 33333333,  }
VQRDMULH:11:result_uint64x1 [] = { 3333333333333333,  }
VQRDMULH:12:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH:13:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRDMULH:14:result_float32x2 [] = { 33333333, 33333333,  }
VQRDMULH:15:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRDMULH:16:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH:17:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRDMULH:18:result_int32x4 [] = { 0, 0, 0, 0,  }
VQRDMULH:19:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRDMULH:20:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH:21:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRDMULH:22:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRDMULH:23:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRDMULH:24:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH:25:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRDMULH:26:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRDMULH:27:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRDMULH (check mul cumulative saturation) cumulative saturation output:
VQRDMULH:28:vqrdmulh_s16 Neon cumulative saturation 1
VQRDMULH:29:vqrdmulh_s32 Neon cumulative saturation 1
VQRDMULH:30:vqrdmulhq_s16 Neon cumulative saturation 1
VQRDMULH:31:vqrdmulhq_s32 Neon cumulative saturation 1

VQRDMULH (check mul cumulative saturation) output:
VQRDMULH:32:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH:33:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQRDMULH:34:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQRDMULH:35:result_int64x1 [] = { 3333333333333333,  }
VQRDMULH:36:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH:37:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRDMULH:38:result_uint32x2 [] = { 33333333, 33333333,  }
VQRDMULH:39:result_uint64x1 [] = { 3333333333333333,  }
VQRDMULH:40:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH:41:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRDMULH:42:result_float32x2 [] = { 33333333, 33333333,  }
VQRDMULH:43:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRDMULH:44:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH:45:result_int16x8 [] = { 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff,  }
VQRDMULH:46:result_int32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }
VQRDMULH:47:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRDMULH:48:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH:49:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRDMULH:50:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRDMULH:51:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRDMULH:52:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH:53:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRDMULH:54:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRDMULH:55:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRDMULH (check rounding cumulative saturation) cumulative saturation output:
VQRDMULH:56:vqrdmulh_s16 Neon cumulative saturation 0
VQRDMULH:57:vqrdmulh_s32 Neon cumulative saturation 0
VQRDMULH:58:vqrdmulhq_s16 Neon cumulative saturation 0
VQRDMULH:59:vqrdmulhq_s32 Neon cumulative saturation 0

VQRDMULH (check rounding cumulative saturation) output:
VQRDMULH:60:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH:61:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQRDMULH:62:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQRDMULH:63:result_int64x1 [] = { 3333333333333333,  }
VQRDMULH:64:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH:65:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRDMULH:66:result_uint32x2 [] = { 33333333, 33333333,  }
VQRDMULH:67:result_uint64x1 [] = { 3333333333333333,  }
VQRDMULH:68:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH:69:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRDMULH:70:result_float32x2 [] = { 33333333, 33333333,  }
VQRDMULH:71:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRDMULH:72:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH:73:result_int16x8 [] = { 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff,  }
VQRDMULH:74:result_int32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }
VQRDMULH:75:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRDMULH:76:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH:77:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRDMULH:78:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRDMULH:79:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRDMULH:80:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH:81:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRDMULH:82:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRDMULH:83:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRDMULH_LANE cumulative saturation output:
VQRDMULH_LANE:0:vqrdmulh_lane_s16 Neon cumulative saturation 0
VQRDMULH_LANE:1:vqrdmulh_lane_s32 Neon cumulative saturation 0
VQRDMULH_LANE:2:vqrdmulhq_lane_s16 Neon cumulative saturation 0
VQRDMULH_LANE:3:vqrdmulhq_lane_s32 Neon cumulative saturation 0

VQRDMULH_LANE output:
VQRDMULH_LANE:4:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_LANE:5:result_int16x4 [] = { 0, 0, 0, 0,  }
VQRDMULH_LANE:6:result_int32x2 [] = { 0, 0,  }
VQRDMULH_LANE:7:result_int64x1 [] = { 3333333333333333,  }
VQRDMULH_LANE:8:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_LANE:9:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRDMULH_LANE:10:result_uint32x2 [] = { 33333333, 33333333,  }
VQRDMULH_LANE:11:result_uint64x1 [] = { 3333333333333333,  }
VQRDMULH_LANE:12:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_LANE:13:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRDMULH_LANE:14:result_float32x2 [] = { 33333333, 33333333,  }
VQRDMULH_LANE:15:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRDMULH_LANE:16:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_LANE:17:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRDMULH_LANE:18:result_int32x4 [] = { 0, 0, 0, 0,  }
VQRDMULH_LANE:19:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRDMULH_LANE:20:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_LANE:21:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRDMULH_LANE:22:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRDMULH_LANE:23:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRDMULH_LANE:24:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_LANE:25:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRDMULH_LANE:26:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRDMULH_LANE:27:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRDMULH_LANE (check mul cumulative saturation) cumulative saturation output:
VQRDMULH_LANE:28:vqrdmulh_lane_s16 Neon cumulative saturation 1
VQRDMULH_LANE:29:vqrdmulh_lane_s32 Neon cumulative saturation 1
VQRDMULH_LANE:30:vqrdmulhq_lane_s16 Neon cumulative saturation 1
VQRDMULH_LANE:31:vqrdmulhq_lane_s32 Neon cumulative saturation 1

VQRDMULH_LANE (check mul cumulative saturation) output:
VQRDMULH_LANE:32:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_LANE:33:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQRDMULH_LANE:34:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQRDMULH_LANE:35:result_int64x1 [] = { 3333333333333333,  }
VQRDMULH_LANE:36:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_LANE:37:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRDMULH_LANE:38:result_uint32x2 [] = { 33333333, 33333333,  }
VQRDMULH_LANE:39:result_uint64x1 [] = { 3333333333333333,  }
VQRDMULH_LANE:40:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_LANE:41:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRDMULH_LANE:42:result_float32x2 [] = { 33333333, 33333333,  }
VQRDMULH_LANE:43:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRDMULH_LANE:44:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_LANE:45:result_int16x8 [] = { 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff,  }
VQRDMULH_LANE:46:result_int32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }
VQRDMULH_LANE:47:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRDMULH_LANE:48:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_LANE:49:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRDMULH_LANE:50:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRDMULH_LANE:51:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRDMULH_LANE:52:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_LANE:53:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRDMULH_LANE:54:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRDMULH_LANE:55:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRDMULH_LANE (check rounding cumulative saturation) cumulative saturation output:
VQRDMULH_LANE:56:vqrdmulh_lane_s16 Neon cumulative saturation 0
VQRDMULH_LANE:57:vqrdmulh_lane_s32 Neon cumulative saturation 0
VQRDMULH_LANE:58:vqrdmulhq_lane_s16 Neon cumulative saturation 0
VQRDMULH_LANE:59:vqrdmulhq_lane_s32 Neon cumulative saturation 0

VQRDMULH_LANE (check rounding cumulative saturation) output:
VQRDMULH_LANE:60:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_LANE:61:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQRDMULH_LANE:62:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQRDMULH_LANE:63:result_int64x1 [] = { 3333333333333333,  }
VQRDMULH_LANE:64:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_LANE:65:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRDMULH_LANE:66:result_uint32x2 [] = { 33333333, 33333333,  }
VQRDMULH_LANE:67:result_uint64x1 [] = { 3333333333333333,  }
VQRDMULH_LANE:68:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_LANE:69:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRDMULH_LANE:70:result_float32x2 [] = { 33333333, 33333333,  }
VQRDMULH_LANE:71:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRDMULH_LANE:72:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_LANE:73:result_int16x8 [] = { 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff,  }
VQRDMULH_LANE:74:result_int32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }
VQRDMULH_LANE:75:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRDMULH_LANE:76:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_LANE:77:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRDMULH_LANE:78:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRDMULH_LANE:79:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRDMULH_LANE:80:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_LANE:81:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRDMULH_LANE:82:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRDMULH_LANE:83:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRDMULH_N cumulative saturation output:
VQRDMULH_N:0:vqrdmulh_n_s16 Neon cumulative saturation 0
VQRDMULH_N:1:vqrdmulh_n_s32 Neon cumulative saturation 0
VQRDMULH_N:2:vqrdmulhq_n_s16 Neon cumulative saturation 0
VQRDMULH_N:3:vqrdmulhq_n_s32 Neon cumulative saturation 0

VQRDMULH_N output:
VQRDMULH_N:4:result_int16x4 [] = { fffffffc, fffffffc, fffffffc, fffffffd,  }
VQRDMULH_N:5:result_int32x2 [] = { fffffffe, fffffffe,  }
VQRDMULH_N:6:result_int16x8 [] = { 6, 6, 6, 5, 5, 4, 4, 4,  }
VQRDMULH_N:7:result_int32x4 [] = { fffffffe, fffffffe, fffffffe, fffffffe,  }

VQRDMULH_N (check mul cumulative saturation) cumulative saturation output:
VQRDMULH_N:8:vqrdmulh_n_s16 Neon cumulative saturation 1
VQRDMULH_N:9:vqrdmulh_n_s32 Neon cumulative saturation 1
VQRDMULH_N:10:vqrdmulhq_n_s16 Neon cumulative saturation 1
VQRDMULH_N:11:vqrdmulhq_n_s32 Neon cumulative saturation 1

VQRDMULH_N (check mul cumulative saturation) output:
VQRDMULH_N:12:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_N:13:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQRDMULH_N:14:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQRDMULH_N:15:result_int64x1 [] = { 3333333333333333,  }
VQRDMULH_N:16:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_N:17:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRDMULH_N:18:result_uint32x2 [] = { 33333333, 33333333,  }
VQRDMULH_N:19:result_uint64x1 [] = { 3333333333333333,  }
VQRDMULH_N:20:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_N:21:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRDMULH_N:22:result_float32x2 [] = { 33333333, 33333333,  }
VQRDMULH_N:23:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRDMULH_N:24:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_N:25:result_int16x8 [] = { 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff,  }
VQRDMULH_N:26:result_int32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }
VQRDMULH_N:27:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRDMULH_N:28:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_N:29:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRDMULH_N:30:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRDMULH_N:31:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRDMULH_N:32:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_N:33:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRDMULH_N:34:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRDMULH_N:35:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRDMULH_N (check rounding cumulative saturation) cumulative saturation output:
VQRDMULH_N:36:vqrdmulh_n_s16 Neon cumulative saturation 0
VQRDMULH_N:37:vqrdmulh_n_s32 Neon cumulative saturation 0
VQRDMULH_N:38:vqrdmulhq_n_s16 Neon cumulative saturation 0
VQRDMULH_N:39:vqrdmulhq_n_s32 Neon cumulative saturation 0

VQRDMULH_N (check rounding cumulative saturation) output:
VQRDMULH_N:40:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_N:41:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQRDMULH_N:42:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQRDMULH_N:43:result_int64x1 [] = { 3333333333333333,  }
VQRDMULH_N:44:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_N:45:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRDMULH_N:46:result_uint32x2 [] = { 33333333, 33333333,  }
VQRDMULH_N:47:result_uint64x1 [] = { 3333333333333333,  }
VQRDMULH_N:48:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_N:49:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRDMULH_N:50:result_float32x2 [] = { 33333333, 33333333,  }
VQRDMULH_N:51:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRDMULH_N:52:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_N:53:result_int16x8 [] = { 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff,  }
VQRDMULH_N:54:result_int32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }
VQRDMULH_N:55:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRDMULH_N:56:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_N:57:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRDMULH_N:58:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRDMULH_N:59:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRDMULH_N:60:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRDMULH_N:61:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRDMULH_N:62:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRDMULH_N:63:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRSHL/VQRSHLQ (with input = 0) cumulative saturation output:
VQRSHL/VQRSHLQ:0:vqrshl_s8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:1:vqrshl_s16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:2:vqrshl_s32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:3:vqrshl_s64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:4:vqrshl_u8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:5:vqrshl_u16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:6:vqrshl_u32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:7:vqrshl_u64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:8:vqrshlq_s8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:9:vqrshlq_s16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:10:vqrshlq_s32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:11:vqrshlq_s64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:12:vqrshlq_u8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:13:vqrshlq_u16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:14:vqrshlq_u32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:15:vqrshlq_u64 Neon cumulative saturation 0

VQRSHL/VQRSHLQ (with input = 0) output:
VQRSHL/VQRSHLQ:16:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:17:result_int16x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:18:result_int32x2 [] = { 0, 0,  }
VQRSHL/VQRSHLQ:19:result_int64x1 [] = { 0,  }
VQRSHL/VQRSHLQ:20:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:21:result_uint16x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:22:result_uint32x2 [] = { 0, 0,  }
VQRSHL/VQRSHLQ:23:result_uint64x1 [] = { 0,  }
VQRSHL/VQRSHLQ:24:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:25:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:26:result_float32x2 [] = { 33333333, 33333333,  }
VQRSHL/VQRSHLQ:27:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:28:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:29:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:30:result_int32x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:31:result_int64x2 [] = { 0, 0,  }
VQRSHL/VQRSHLQ:32:result_uint8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:33:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:34:result_uint32x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:35:result_uint64x2 [] = { 0, 0,  }
VQRSHL/VQRSHLQ:36:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:37:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:38:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHL/VQRSHLQ:39:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRSHL/VQRSHLQ (input 0 and negative shift amount) cumulative saturation output:
VQRSHL/VQRSHLQ:40:vqrshl_s8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:41:vqrshl_s16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:42:vqrshl_s32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:43:vqrshl_s64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:44:vqrshl_u8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:45:vqrshl_u16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:46:vqrshl_u32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:47:vqrshl_u64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:48:vqrshlq_s8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:49:vqrshlq_s16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:50:vqrshlq_s32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:51:vqrshlq_s64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:52:vqrshlq_u8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:53:vqrshlq_u16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:54:vqrshlq_u32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:55:vqrshlq_u64 Neon cumulative saturation 0

VQRSHL/VQRSHLQ (input 0 and negative shift amount) output:
VQRSHL/VQRSHLQ:56:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:57:result_int16x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:58:result_int32x2 [] = { 0, 0,  }
VQRSHL/VQRSHLQ:59:result_int64x1 [] = { 0,  }
VQRSHL/VQRSHLQ:60:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:61:result_uint16x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:62:result_uint32x2 [] = { 0, 0,  }
VQRSHL/VQRSHLQ:63:result_uint64x1 [] = { 0,  }
VQRSHL/VQRSHLQ:64:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:65:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:66:result_float32x2 [] = { 33333333, 33333333,  }
VQRSHL/VQRSHLQ:67:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:68:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:69:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:70:result_int32x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:71:result_int64x2 [] = { 0, 0,  }
VQRSHL/VQRSHLQ:72:result_uint8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:73:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:74:result_uint32x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:75:result_uint64x2 [] = { 0, 0,  }
VQRSHL/VQRSHLQ:76:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:77:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:78:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHL/VQRSHLQ:79:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRSHL/VQRSHLQ cumulative saturation output:
VQRSHL/VQRSHLQ:80:vqrshl_s8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:81:vqrshl_s16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:82:vqrshl_s32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:83:vqrshl_s64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:84:vqrshl_u8 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:85:vqrshl_u16 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:86:vqrshl_u32 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:87:vqrshl_u64 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:88:vqrshlq_s8 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:89:vqrshlq_s16 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:90:vqrshlq_s32 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:91:vqrshlq_s64 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:92:vqrshlq_u8 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:93:vqrshlq_u16 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:94:vqrshlq_u32 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:95:vqrshlq_u64 Neon cumulative saturation 1

VQRSHL/VQRSHLQ output:
VQRSHL/VQRSHLQ:96:result_int8x8 [] = { ffffffe0, ffffffe2, ffffffe4, ffffffe6, ffffffe8, ffffffea, ffffffec, ffffffee,  }
VQRSHL/VQRSHLQ:97:result_int16x4 [] = { ffffff80, ffffff88, ffffff90, ffffff98,  }
VQRSHL/VQRSHLQ:98:result_int32x2 [] = { fffff000, fffff100,  }
VQRSHL/VQRSHLQ:99:result_int64x1 [] = { ffffffffffffff80,  }
VQRSHL/VQRSHLQ:100:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQRSHL/VQRSHLQ:101:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQRSHL/VQRSHLQ:102:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQRSHL/VQRSHLQ:103:result_uint64x1 [] = { ffffffffffffffff,  }
VQRSHL/VQRSHLQ:104:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:105:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:106:result_float32x2 [] = { 33333333, 33333333,  }
VQRSHL/VQRSHLQ:107:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:108:result_int8x16 [] = { ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80,  }
VQRSHL/VQRSHLQ:109:result_int16x8 [] = { ffff8000, ffff8000, ffff8000, ffff8000, ffff8000, ffff8000, ffff8000, ffff8000,  }
VQRSHL/VQRSHLQ:110:result_int32x4 [] = { 80000000, 80000000, 80000000, 80000000,  }
VQRSHL/VQRSHLQ:111:result_int64x2 [] = { 8000000000000000, 8000000000000000,  }
VQRSHL/VQRSHLQ:112:result_uint8x16 [] = { ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff,  }
VQRSHL/VQRSHLQ:113:result_uint16x8 [] = { ffff, ffff, ffff, ffff, ffff, ffff, ffff, ffff,  }
VQRSHL/VQRSHLQ:114:result_uint32x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }
VQRSHL/VQRSHLQ:115:result_uint64x2 [] = { ffffffffffffffff, ffffffffffffffff,  }
VQRSHL/VQRSHLQ:116:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:117:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:118:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHL/VQRSHLQ:119:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRSHL/VQRSHLQ (negative shift amount) cumulative saturation output:
VQRSHL/VQRSHLQ:120:vqrshl_s8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:121:vqrshl_s16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:122:vqrshl_s32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:123:vqrshl_s64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:124:vqrshl_u8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:125:vqrshl_u16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:126:vqrshl_u32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:127:vqrshl_u64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:128:vqrshlq_s8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:129:vqrshlq_s16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:130:vqrshlq_s32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:131:vqrshlq_s64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:132:vqrshlq_u8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:133:vqrshlq_u16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:134:vqrshlq_u32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:135:vqrshlq_u64 Neon cumulative saturation 0

VQRSHL/VQRSHLQ (negative shift amount) output:
VQRSHL/VQRSHLQ:136:result_int8x8 [] = { fffffffc, fffffffc, fffffffd, fffffffd, fffffffd, fffffffd, fffffffe, fffffffe,  }
VQRSHL/VQRSHLQ:137:result_int16x4 [] = { fffffffc, fffffffc, fffffffd, fffffffd,  }
VQRSHL/VQRSHLQ:138:result_int32x2 [] = { fffffffe, fffffffe,  }
VQRSHL/VQRSHLQ:139:result_int64x1 [] = { ffffffffffffffff,  }
VQRSHL/VQRSHLQ:140:result_uint8x8 [] = { 3c, 3c, 3d, 3d, 3d, 3d, 3e, 3e,  }
VQRSHL/VQRSHLQ:141:result_uint16x4 [] = { 3ffc, 3ffc, 3ffd, 3ffd,  }
VQRSHL/VQRSHLQ:142:result_uint32x2 [] = { 1ffffffe, 1ffffffe,  }
VQRSHL/VQRSHLQ:143:result_uint64x1 [] = { fffffffffffffff,  }
VQRSHL/VQRSHLQ:144:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:145:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:146:result_float32x2 [] = { 33333333, 33333333,  }
VQRSHL/VQRSHLQ:147:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:148:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:149:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:150:result_int32x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:151:result_int64x2 [] = { 0, 0,  }
VQRSHL/VQRSHLQ:152:result_uint8x16 [] = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,  }
VQRSHL/VQRSHLQ:153:result_uint16x8 [] = { 20, 20, 20, 20, 20, 20, 20, 20,  }
VQRSHL/VQRSHLQ:154:result_uint32x4 [] = { 80000, 80000, 80000, 80000,  }
VQRSHL/VQRSHLQ:155:result_uint64x2 [] = { 100000000000, 100000000000,  }
VQRSHL/VQRSHLQ:156:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:157:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:158:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHL/VQRSHLQ:159:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRSHL/VQRSHLQ (checking cumulative saturation: shift by -1) cumulative saturation output:
VQRSHL/VQRSHLQ:160:vqrshl_s8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:161:vqrshl_s16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:162:vqrshl_s32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:163:vqrshl_s64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:164:vqrshl_u8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:165:vqrshl_u16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:166:vqrshl_u32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:167:vqrshl_u64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:168:vqrshlq_s8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:169:vqrshlq_s16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:170:vqrshlq_s32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:171:vqrshlq_s64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:172:vqrshlq_u8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:173:vqrshlq_u16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:174:vqrshlq_u32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:175:vqrshlq_u64 Neon cumulative saturation 0

VQRSHL/VQRSHLQ (checking cumulative saturation: shift by -1) output:
VQRSHL/VQRSHLQ:176:result_int8x8 [] = { 40, 40, 40, 40, 40, 40, 40, 40,  }
VQRSHL/VQRSHLQ:177:result_int16x4 [] = { 4000, 4000, 4000, 4000,  }
VQRSHL/VQRSHLQ:178:result_int32x2 [] = { 40000000, 40000000,  }
VQRSHL/VQRSHLQ:179:result_int64x1 [] = { 4000000000000000,  }
VQRSHL/VQRSHLQ:180:result_uint8x8 [] = { 80, 80, 80, 80, 80, 80, 80, 80,  }
VQRSHL/VQRSHLQ:181:result_uint16x4 [] = { 8000, 8000, 8000, 8000,  }
VQRSHL/VQRSHLQ:182:result_uint32x2 [] = { 80000000, 80000000,  }
VQRSHL/VQRSHLQ:183:result_uint64x1 [] = { 8000000000000000,  }
VQRSHL/VQRSHLQ:184:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:185:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:186:result_float32x2 [] = { 33333333, 33333333,  }
VQRSHL/VQRSHLQ:187:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:188:result_int8x16 [] = { 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,  }
VQRSHL/VQRSHLQ:189:result_int16x8 [] = { 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000,  }
VQRSHL/VQRSHLQ:190:result_int32x4 [] = { 40000000, 40000000, 40000000, 40000000,  }
VQRSHL/VQRSHLQ:191:result_int64x2 [] = { 4000000000000000, 4000000000000000,  }
VQRSHL/VQRSHLQ:192:result_uint8x16 [] = { 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80,  }
VQRSHL/VQRSHLQ:193:result_uint16x8 [] = { 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000,  }
VQRSHL/VQRSHLQ:194:result_uint32x4 [] = { 80000000, 80000000, 80000000, 80000000,  }
VQRSHL/VQRSHLQ:195:result_uint64x2 [] = { 8000000000000000, 8000000000000000,  }
VQRSHL/VQRSHLQ:196:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:197:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:198:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHL/VQRSHLQ:199:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRSHL/VQRSHLQ (checking cumulative saturation: shift by -3) cumulative saturation output:
VQRSHL/VQRSHLQ:200:vqrshl_s8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:201:vqrshl_s16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:202:vqrshl_s32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:203:vqrshl_s64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:204:vqrshl_u8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:205:vqrshl_u16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:206:vqrshl_u32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:207:vqrshl_u64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:208:vqrshlq_s8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:209:vqrshlq_s16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:210:vqrshlq_s32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:211:vqrshlq_s64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:212:vqrshlq_u8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:213:vqrshlq_u16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:214:vqrshlq_u32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:215:vqrshlq_u64 Neon cumulative saturation 0

VQRSHL/VQRSHLQ (checking cumulative saturation: shift by -3) output:
VQRSHL/VQRSHLQ:216:result_int8x8 [] = { 10, 10, 10, 10, 10, 10, 10, 10,  }
VQRSHL/VQRSHLQ:217:result_int16x4 [] = { 1000, 1000, 1000, 1000,  }
VQRSHL/VQRSHLQ:218:result_int32x2 [] = { 10000000, 10000000,  }
VQRSHL/VQRSHLQ:219:result_int64x1 [] = { 1000000000000000,  }
VQRSHL/VQRSHLQ:220:result_uint8x8 [] = { 20, 20, 20, 20, 20, 20, 20, 20,  }
VQRSHL/VQRSHLQ:221:result_uint16x4 [] = { 2000, 2000, 2000, 2000,  }
VQRSHL/VQRSHLQ:222:result_uint32x2 [] = { 20000000, 20000000,  }
VQRSHL/VQRSHLQ:223:result_uint64x1 [] = { 2000000000000000,  }
VQRSHL/VQRSHLQ:224:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:225:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:226:result_float32x2 [] = { 33333333, 33333333,  }
VQRSHL/VQRSHLQ:227:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:228:result_int8x16 [] = { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  }
VQRSHL/VQRSHLQ:229:result_int16x8 [] = { 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  }
VQRSHL/VQRSHLQ:230:result_int32x4 [] = { 10000000, 10000000, 10000000, 10000000,  }
VQRSHL/VQRSHLQ:231:result_int64x2 [] = { 1000000000000000, 1000000000000000,  }
VQRSHL/VQRSHLQ:232:result_uint8x16 [] = { 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  }
VQRSHL/VQRSHLQ:233:result_uint16x8 [] = { 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,  }
VQRSHL/VQRSHLQ:234:result_uint32x4 [] = { 20000000, 20000000, 20000000, 20000000,  }
VQRSHL/VQRSHLQ:235:result_uint64x2 [] = { 2000000000000000, 2000000000000000,  }
VQRSHL/VQRSHLQ:236:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:237:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:238:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHL/VQRSHLQ:239:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRSHL/VQRSHLQ (checking cumulative saturation: large shift amount) cumulative saturation output:
VQRSHL/VQRSHLQ:240:vqrshl_s8 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:241:vqrshl_s16 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:242:vqrshl_s32 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:243:vqrshl_s64 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:244:vqrshl_u8 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:245:vqrshl_u16 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:246:vqrshl_u32 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:247:vqrshl_u64 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:248:vqrshlq_s8 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:249:vqrshlq_s16 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:250:vqrshlq_s32 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:251:vqrshlq_s64 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:252:vqrshlq_u8 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:253:vqrshlq_u16 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:254:vqrshlq_u32 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:255:vqrshlq_u64 Neon cumulative saturation 1

VQRSHL/VQRSHLQ (checking cumulative saturation: large shift amount) output:
VQRSHL/VQRSHLQ:256:result_int8x8 [] = { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f,  }
VQRSHL/VQRSHLQ:257:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQRSHL/VQRSHLQ:258:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQRSHL/VQRSHLQ:259:result_int64x1 [] = { 7fffffffffffffff,  }
VQRSHL/VQRSHLQ:260:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQRSHL/VQRSHLQ:261:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQRSHL/VQRSHLQ:262:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQRSHL/VQRSHLQ:263:result_uint64x1 [] = { ffffffffffffffff,  }
VQRSHL/VQRSHLQ:264:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:265:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:266:result_float32x2 [] = { 33333333, 33333333,  }
VQRSHL/VQRSHLQ:267:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:268:result_int8x16 [] = { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f,  }
VQRSHL/VQRSHLQ:269:result_int16x8 [] = { 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff, 7fff,  }
VQRSHL/VQRSHLQ:270:result_int32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }
VQRSHL/VQRSHLQ:271:result_int64x2 [] = { 7fffffffffffffff, 7fffffffffffffff,  }
VQRSHL/VQRSHLQ:272:result_uint8x16 [] = { ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff,  }
VQRSHL/VQRSHLQ:273:result_uint16x8 [] = { ffff, ffff, ffff, ffff, ffff, ffff, ffff, ffff,  }
VQRSHL/VQRSHLQ:274:result_uint32x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }
VQRSHL/VQRSHLQ:275:result_uint64x2 [] = { ffffffffffffffff, ffffffffffffffff,  }
VQRSHL/VQRSHLQ:276:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:277:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:278:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHL/VQRSHLQ:279:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRSHL/VQRSHLQ (checking cumulative saturation: large shift amount with negative input) cumulative saturation output:
VQRSHL/VQRSHLQ:280:vqrshl_s8 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:281:vqrshl_s16 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:282:vqrshl_s32 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:283:vqrshl_s64 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:284:vqrshl_u8 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:285:vqrshl_u16 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:286:vqrshl_u32 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:287:vqrshl_u64 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:288:vqrshlq_s8 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:289:vqrshlq_s16 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:290:vqrshlq_s32 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:291:vqrshlq_s64 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:292:vqrshlq_u8 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:293:vqrshlq_u16 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:294:vqrshlq_u32 Neon cumulative saturation 1
VQRSHL/VQRSHLQ:295:vqrshlq_u64 Neon cumulative saturation 1

VQRSHL/VQRSHLQ (checking cumulative saturation: large shift amount with negative input) output:
VQRSHL/VQRSHLQ:296:result_int8x8 [] = { ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80,  }
VQRSHL/VQRSHLQ:297:result_int16x4 [] = { ffff8000, ffff8000, ffff8000, ffff8000,  }
VQRSHL/VQRSHLQ:298:result_int32x2 [] = { 80000000, 80000000,  }
VQRSHL/VQRSHLQ:299:result_int64x1 [] = { 8000000000000000,  }
VQRSHL/VQRSHLQ:300:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQRSHL/VQRSHLQ:301:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQRSHL/VQRSHLQ:302:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQRSHL/VQRSHLQ:303:result_uint64x1 [] = { ffffffffffffffff,  }
VQRSHL/VQRSHLQ:304:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:305:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:306:result_float32x2 [] = { 33333333, 33333333,  }
VQRSHL/VQRSHLQ:307:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:308:result_int8x16 [] = { ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80, ffffff80,  }
VQRSHL/VQRSHLQ:309:result_int16x8 [] = { ffff8000, ffff8000, ffff8000, ffff8000, ffff8000, ffff8000, ffff8000, ffff8000,  }
VQRSHL/VQRSHLQ:310:result_int32x4 [] = { 80000000, 80000000, 80000000, 80000000,  }
VQRSHL/VQRSHLQ:311:result_int64x2 [] = { 8000000000000000, 8000000000000000,  }
VQRSHL/VQRSHLQ:312:result_uint8x16 [] = { ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff,  }
VQRSHL/VQRSHLQ:313:result_uint16x8 [] = { ffff, ffff, ffff, ffff, ffff, ffff, ffff, ffff,  }
VQRSHL/VQRSHLQ:314:result_uint32x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }
VQRSHL/VQRSHLQ:315:result_uint64x2 [] = { ffffffffffffffff, ffffffffffffffff,  }
VQRSHL/VQRSHLQ:316:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:317:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:318:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHL/VQRSHLQ:319:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRSHL/VQRSHLQ (checking cumulative saturation: large negative shift amount) cumulative saturation output:
VQRSHL/VQRSHLQ:320:vqrshl_s8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:321:vqrshl_s16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:322:vqrshl_s32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:323:vqrshl_s64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:324:vqrshl_u8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:325:vqrshl_u16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:326:vqrshl_u32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:327:vqrshl_u64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:328:vqrshlq_s8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:329:vqrshlq_s16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:330:vqrshlq_s32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:331:vqrshlq_s64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:332:vqrshlq_u8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:333:vqrshlq_u16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:334:vqrshlq_u32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:335:vqrshlq_u64 Neon cumulative saturation 0

VQRSHL/VQRSHLQ (checking cumulative saturation: large negative shift amount) output:
VQRSHL/VQRSHLQ:336:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:337:result_int16x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:338:result_int32x2 [] = { 0, 0,  }
VQRSHL/VQRSHLQ:339:result_int64x1 [] = { 0,  }
VQRSHL/VQRSHLQ:340:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:341:result_uint16x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:342:result_uint32x2 [] = { 0, 0,  }
VQRSHL/VQRSHLQ:343:result_uint64x1 [] = { 0,  }
VQRSHL/VQRSHLQ:344:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:345:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:346:result_float32x2 [] = { 33333333, 33333333,  }
VQRSHL/VQRSHLQ:347:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:348:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:349:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:350:result_int32x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:351:result_int64x2 [] = { 0, 0,  }
VQRSHL/VQRSHLQ:352:result_uint8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:353:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:354:result_uint32x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:355:result_uint64x2 [] = { 0, 0,  }
VQRSHL/VQRSHLQ:356:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:357:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:358:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHL/VQRSHLQ:359:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRSHL/VQRSHLQ (checking cumulative saturation: large shift amount with 0 input) cumulative saturation output:
VQRSHL/VQRSHLQ:360:vqrshl_s8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:361:vqrshl_s16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:362:vqrshl_s32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:363:vqrshl_s64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:364:vqrshl_u8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:365:vqrshl_u16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:366:vqrshl_u32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:367:vqrshl_u64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:368:vqrshlq_s8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:369:vqrshlq_s16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:370:vqrshlq_s32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:371:vqrshlq_s64 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:372:vqrshlq_u8 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:373:vqrshlq_u16 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:374:vqrshlq_u32 Neon cumulative saturation 0
VQRSHL/VQRSHLQ:375:vqrshlq_u64 Neon cumulative saturation 0

VQRSHL/VQRSHLQ (checking cumulative saturation: large shift amount with 0 input) output:
VQRSHL/VQRSHLQ:376:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:377:result_int16x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:378:result_int32x2 [] = { 0, 0,  }
VQRSHL/VQRSHLQ:379:result_int64x1 [] = { 0,  }
VQRSHL/VQRSHLQ:380:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:381:result_uint16x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:382:result_uint32x2 [] = { 0, 0,  }
VQRSHL/VQRSHLQ:383:result_uint64x1 [] = { 0,  }
VQRSHL/VQRSHLQ:384:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:385:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:386:result_float32x2 [] = { 33333333, 33333333,  }
VQRSHL/VQRSHLQ:387:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:388:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:389:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:390:result_int32x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:391:result_int64x2 [] = { 0, 0,  }
VQRSHL/VQRSHLQ:392:result_uint8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:393:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:394:result_uint32x4 [] = { 0, 0, 0, 0,  }
VQRSHL/VQRSHLQ:395:result_uint64x2 [] = { 0, 0,  }
VQRSHL/VQRSHLQ:396:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHL/VQRSHLQ:397:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHL/VQRSHLQ:398:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHL/VQRSHLQ:399:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VABA/VABAQ output:
VABA/VABAQ:0:result_int8x8 [] = { fffffff6, fffffff7, fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd,  }
VABA/VABAQ:1:result_int16x4 [] = { 16, 17, 18, 19,  }
VABA/VABAQ:2:result_int32x2 [] = { 20, 21,  }
VABA/VABAQ:3:result_int64x1 [] = { 3333333333333333,  }
VABA/VABAQ:4:result_uint8x8 [] = { 53, 54, 55, 56, 57, 58, 59, 5a,  }
VABA/VABAQ:5:result_uint16x4 [] = { 907, 908, 909, 90a,  }
VABA/VABAQ:6:result_uint32x2 [] = { ffffffe7, ffffffe8,  }
VABA/VABAQ:7:result_uint64x1 [] = { 3333333333333333,  }
VABA/VABAQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VABA/VABAQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VABA/VABAQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VABA/VABAQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VABA/VABAQ:12:result_int8x16 [] = { 5e, 5f, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 6a, 6b, 6c, 6d,  }
VABA/VABAQ:13:result_int16x8 [] = { b9c, b9d, b9e, b9f, ba0, ba1, ba2, ba3,  }
VABA/VABAQ:14:result_int32x4 [] = { 26e0, 26e1, 26e2, 26e3,  }
VABA/VABAQ:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VABA/VABAQ:16:result_uint8x16 [] = { f8, f9, fa, fb, fc, fd, fe, ff, 0, 1, 2, 3, 4, 5, 6, 7,  }
VABA/VABAQ:17:result_uint16x8 [] = { fff9, fffa, fffb, fffc, fffd, fffe, ffff, 0,  }
VABA/VABAQ:18:result_uint32x4 [] = { c, d, e, f,  }
VABA/VABAQ:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VABA/VABAQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VABA/VABAQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VABA/VABAQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VABA/VABAQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VABAL output:
VABAL:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VABAL:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VABAL:2:result_int32x2 [] = { 33333333, 33333333,  }
VABAL:3:result_int64x1 [] = { 3333333333333333,  }
VABAL:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VABAL:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VABAL:6:result_uint32x2 [] = { 33333333, 33333333,  }
VABAL:7:result_uint64x1 [] = { 3333333333333333,  }
VABAL:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VABAL:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VABAL:10:result_float32x2 [] = { 33333333, 33333333,  }
VABAL:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VABAL:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VABAL:13:result_int16x8 [] = { fffffff6, fffffff7, fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd,  }
VABAL:14:result_int32x4 [] = { 16, 17, 18, 19,  }
VABAL:15:result_int64x2 [] = { 20, 21,  }
VABAL:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VABAL:17:result_uint16x8 [] = { 53, 54, 55, 56, 57, 58, 59, 5a,  }
VABAL:18:result_uint32x4 [] = { 907, 908, 909, 90a,  }
VABAL:19:result_uint64x2 [] = { ffffffe7, ffffffe8,  }
VABAL:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VABAL:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VABAL:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VABAL:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VABAL test intermediate overflow output:
VABAL:24:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VABAL:25:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VABAL:26:result_int32x2 [] = { 33333333, 33333333,  }
VABAL:27:result_int64x1 [] = { 3333333333333333,  }
VABAL:28:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VABAL:29:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VABAL:30:result_uint32x2 [] = { 33333333, 33333333,  }
VABAL:31:result_uint64x1 [] = { 3333333333333333,  }
VABAL:32:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VABAL:33:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VABAL:34:result_float32x2 [] = { 33333333, 33333333,  }
VABAL:35:result_float16x4 [] = { 0, 0, 0, 0,  }
VABAL:36:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VABAL:37:result_int16x8 [] = { ef, f0, f1, f2, f3, f4, f5, f6,  }
VABAL:38:result_int32x4 [] = { ffef, fff0, fff1, fff2,  }
VABAL:39:result_int64x2 [] = { ffffffef, fffffff0,  }
VABAL:40:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VABAL:41:result_uint16x8 [] = { ee, ef, f0, f1, f2, f3, f4, f5,  }
VABAL:42:result_uint32x4 [] = { ffe2, ffe3, ffe4, ffe5,  }
VABAL:43:result_uint64x2 [] = { ffffffe7, ffffffe8,  }
VABAL:44:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VABAL:45:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VABAL:46:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VABAL:47:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VABD/VABDQ output:
VABD/VABDQ:0:result_int8x8 [] = { 11, 10, f, e, d, c, b, a,  }
VABD/VABDQ:1:result_int16x4 [] = { 3, 2, 1, 0,  }
VABD/VABDQ:2:result_int32x2 [] = { 18, 17,  }
VABD/VABDQ:3:result_int64x1 [] = { 3333333333333333,  }
VABD/VABDQ:4:result_uint8x8 [] = { ef, f0, f1, f2, f3, f4, f5, f6,  }
VABD/VABDQ:5:result_uint16x4 [] = { ffe3, ffe4, ffe5, ffe6,  }
VABD/VABDQ:6:result_uint32x2 [] = { ffffffe8, ffffffe9,  }
VABD/VABDQ:7:result_uint64x1 [] = { 3333333333333333,  }
VABD/VABDQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VABD/VABDQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VABD/VABDQ:10:result_float32x2 [] = { 41c26666, 41ba6666,  }
VABD/VABDQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VABD/VABDQ:12:result_int8x16 [] = { 1a, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, f, e, d, c, b,  }
VABD/VABDQ:13:result_int16x8 [] = { 4, 3, 2, 1, 0, 1, 2, 3,  }
VABD/VABDQ:14:result_int32x4 [] = { 30, 2f, 2e, 2d,  }
VABD/VABDQ:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VABD/VABDQ:16:result_uint8x16 [] = { e6, e7, e8, e9, ea, eb, ec, ed, ee, ef, f0, f1, f2, f3, f4, f5,  }
VABD/VABDQ:17:result_uint16x8 [] = { ffe4, ffe5, ffe6, ffe7, ffe8, ffe9, ffea, ffeb,  }
VABD/VABDQ:18:result_uint32x4 [] = { ffffffd0, ffffffd1, ffffffd2, ffffffd3,  }
VABD/VABDQ:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VABD/VABDQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VABD/VABDQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VABD/VABDQ:22:result_float32x4 [] = { 42407ae1, 423c7ae1, 42387ae1, 42347ae1,  }
VABD/VABDQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VABD/VABDQ FP special (-0.0):24:result_float32x4 [] = { 0, 0, 0, 0,  }
VABD/VABDQ FP special (-0.0):25:result_float32x4 [] = { 0, 0, 0, 0,  }

VABDL output:
VABDL:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VABDL:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VABDL:2:result_int32x2 [] = { 33333333, 33333333,  }
VABDL:3:result_int64x1 [] = { 3333333333333333,  }
VABDL:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VABDL:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VABDL:6:result_uint32x2 [] = { 33333333, 33333333,  }
VABDL:7:result_uint64x1 [] = { 3333333333333333,  }
VABDL:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VABDL:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VABDL:10:result_float32x2 [] = { 33333333, 33333333,  }
VABDL:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VABDL:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VABDL:13:result_int16x8 [] = { 11, 10, f, e, d, c, b, a,  }
VABDL:14:result_int32x4 [] = { 3, 2, 1, 0,  }
VABDL:15:result_int64x2 [] = { 18, 17,  }
VABDL:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VABDL:17:result_uint16x8 [] = { ef, f0, f1, f2, f3, f4, f5, f6,  }
VABDL:18:result_uint32x4 [] = { ffe3, ffe4, ffe5, ffe6,  }
VABDL:19:result_uint64x2 [] = { ffffffe8, ffffffe9,  }
VABDL:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VABDL:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VABDL:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VABDL:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VAND/VANDQ output:
VAND/VANDQ:0:result_int8x8 [] = { 0, 0, 2, 2, 0, 0, 2, 2,  }
VAND/VANDQ:1:result_int16x4 [] = { fffffff0, fffffff0, fffffff0, fffffff0,  }
VAND/VANDQ:2:result_int32x2 [] = { 0, 1,  }
VAND/VANDQ:3:result_int64x1 [] = { 60,  }
VAND/VANDQ:4:result_uint8x8 [] = { 10, 10, 10, 10, 14, 14, 14, 14,  }
VAND/VANDQ:5:result_uint16x4 [] = { 10, 10, 12, 12,  }
VAND/VANDQ:6:result_uint32x2 [] = { 20, 20,  }
VAND/VANDQ:7:result_uint64x1 [] = { 0,  }
VAND/VANDQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VAND/VANDQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VAND/VANDQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VAND/VANDQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VAND/VANDQ:12:result_int8x16 [] = { fffffff0, fffffff0, fffffff2, fffffff2, fffffff4, fffffff4, fffffff6, fffffff6, fffffff0, fffffff0, fffffff2, fffffff2, fffffff4, fffffff4, fffffff6, fffffff6,  }
VAND/VANDQ:13:result_int16x8 [] = { ffffffe0, ffffffe0, ffffffe0, ffffffe0, ffffffe4, ffffffe4, ffffffe4, ffffffe4,  }
VAND/VANDQ:14:result_int32x4 [] = { ffffffe0, ffffffe0, ffffffe2, ffffffe2,  }
VAND/VANDQ:15:result_int64x2 [] = { 10, 10,  }
VAND/VANDQ:16:result_uint8x16 [] = { 0, 0, 0, 0, 4, 4, 4, 4, 8, 8, 8, 8, c, c, c, c,  }
VAND/VANDQ:17:result_uint16x8 [] = { 0, 1, 2, 3, 0, 1, 2, 3,  }
VAND/VANDQ:18:result_uint32x4 [] = { 30, 31, 32, 33,  }
VAND/VANDQ:19:result_uint64x2 [] = { 0, 1,  }
VAND/VANDQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VAND/VANDQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VAND/VANDQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VAND/VANDQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VORR/VORRQ output:
VORR/VORRQ:0:result_int8x8 [] = { fffffff2, fffffff3, fffffff2, fffffff3, fffffff6, fffffff7, fffffff6, fffffff7,  }
VORR/VORRQ:1:result_int16x4 [] = { fffffffc, fffffffd, fffffffe, ffffffff,  }
VORR/VORRQ:2:result_int32x2 [] = { fffffff3, fffffff3,  }
VORR/VORRQ:3:result_int64x1 [] = { fffffffffffffff4,  }
VORR/VORRQ:4:result_uint8x8 [] = { f4, f5, f6, f7, f4, f5, f6, f7,  }
VORR/VORRQ:5:result_uint16x4 [] = { fffe, ffff, fffe, ffff,  }
VORR/VORRQ:6:result_uint32x2 [] = { fffffff8, fffffff9,  }
VORR/VORRQ:7:result_uint64x1 [] = { fffffffffffffff2,  }
VORR/VORRQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VORR/VORRQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VORR/VORRQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VORR/VORRQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VORR/VORRQ:12:result_int8x16 [] = { fffffff6, fffffff7, fffffff6, fffffff7, fffffff6, fffffff7, fffffff6, fffffff7, fffffffe, ffffffff, fffffffe, ffffffff, fffffffe, ffffffff, fffffffe, ffffffff,  }
VORR/VORRQ:13:result_int16x8 [] = { fffffffc, fffffffd, fffffffe, ffffffff, fffffffc, fffffffd, fffffffe, ffffffff,  }
VORR/VORRQ:14:result_int32x4 [] = { fffffff2, fffffff3, fffffff2, fffffff3,  }
VORR/VORRQ:15:result_int64x2 [] = { fffffffffffffff8, fffffffffffffff9,  }
VORR/VORRQ:16:result_uint8x16 [] = { fc, fd, fe, ff, fc, fd, fe, ff, fc, fd, fe, ff, fc, fd, fe, ff,  }
VORR/VORRQ:17:result_uint16x8 [] = { fff3, fff3, fff3, fff3, fff7, fff7, fff7, fff7,  }
VORR/VORRQ:18:result_uint32x4 [] = { fffffff7, fffffff7, fffffff7, fffffff7,  }
VORR/VORRQ:19:result_uint64x2 [] = { fffffffffffffff3, fffffffffffffff3,  }
VORR/VORRQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VORR/VORRQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VORR/VORRQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VORR/VORRQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VORN/VORNQ output:
VORN/VORNQ:0:result_int8x8 [] = { fffffffd, fffffffd, ffffffff, ffffffff, fffffffd, fffffffd, ffffffff, ffffffff,  }
VORN/VORNQ:1:result_int16x4 [] = { fffffff3, fffffff3, fffffff3, fffffff3,  }
VORN/VORNQ:2:result_int32x2 [] = { fffffffc, fffffffd,  }
VORN/VORNQ:3:result_int64x1 [] = { fffffffffffffffb,  }
VORN/VORNQ:4:result_uint8x8 [] = { fb, fb, fb, fb, ff, ff, ff, ff,  }
VORN/VORNQ:5:result_uint16x4 [] = { fff1, fff1, fff3, fff3,  }
VORN/VORNQ:6:result_uint32x2 [] = { fffffff7, fffffff7,  }
VORN/VORNQ:7:result_uint64x1 [] = { fffffffffffffffd,  }
VORN/VORNQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VORN/VORNQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VORN/VORNQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VORN/VORNQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VORN/VORNQ:12:result_int8x16 [] = { fffffff9, fffffff9, fffffffb, fffffffb, fffffffd, fffffffd, ffffffff, ffffffff, fffffff9, fffffff9, fffffffb, fffffffb, fffffffd, fffffffd, ffffffff, ffffffff,  }
VORN/VORNQ:13:result_int16x8 [] = { fffffff3, fffffff3, fffffff3, fffffff3, fffffff7, fffffff7, fffffff7, fffffff7,  }
VORN/VORNQ:14:result_int32x4 [] = { fffffffd, fffffffd, ffffffff, ffffffff,  }
VORN/VORNQ:15:result_int64x2 [] = { fffffffffffffff7, fffffffffffffff7,  }
VORN/VORNQ:16:result_uint8x16 [] = { f3, f3, f3, f3, f7, f7, f7, f7, fb, fb, fb, fb, ff, ff, ff, ff,  }
VORN/VORNQ:17:result_uint16x8 [] = { fffc, fffd, fffe, ffff, fffc, fffd, fffe, ffff,  }
VORN/VORNQ:18:result_uint32x4 [] = { fffffff8, fffffff9, fffffffa, fffffffb,  }
VORN/VORNQ:19:result_uint64x2 [] = { fffffffffffffffc, fffffffffffffffd,  }
VORN/VORNQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VORN/VORNQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VORN/VORNQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VORN/VORNQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VEOR/VEORQ output:
VEOR/VEORQ:0:result_int8x8 [] = { fffffff2, fffffff3, fffffff0, fffffff1, fffffff6, fffffff7, fffffff4, fffffff5,  }
VEOR/VEORQ:1:result_int16x4 [] = { c, d, e, f,  }
VEOR/VEORQ:2:result_int32x2 [] = { fffffff3, fffffff2,  }
VEOR/VEORQ:3:result_int64x1 [] = { ffffffffffffff94,  }
VEOR/VEORQ:4:result_uint8x8 [] = { e4, e5, e6, e7, e0, e1, e2, e3,  }
VEOR/VEORQ:5:result_uint16x4 [] = { ffee, ffef, ffec, ffed,  }
VEOR/VEORQ:6:result_uint32x2 [] = { ffffffd8, ffffffd9,  }
VEOR/VEORQ:7:result_uint64x1 [] = { fffffffffffffff2,  }
VEOR/VEORQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VEOR/VEORQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VEOR/VEORQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VEOR/VEORQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VEOR/VEORQ:12:result_int8x16 [] = { 6, 7, 4, 5, 2, 3, 0, 1, e, f, c, d, a, b, 8, 9,  }
VEOR/VEORQ:13:result_int16x8 [] = { 1c, 1d, 1e, 1f, 18, 19, 1a, 1b,  }
VEOR/VEORQ:14:result_int32x4 [] = { 12, 13, 10, 11,  }
VEOR/VEORQ:15:result_int64x2 [] = { ffffffffffffffe8, ffffffffffffffe9,  }
VEOR/VEORQ:16:result_uint8x16 [] = { fc, fd, fe, ff, f8, f9, fa, fb, f4, f5, f6, f7, f0, f1, f2, f3,  }
VEOR/VEORQ:17:result_uint16x8 [] = { fff3, fff2, fff1, fff0, fff7, fff6, fff5, fff4,  }
VEOR/VEORQ:18:result_uint32x4 [] = { ffffffc7, ffffffc6, ffffffc5, ffffffc4,  }
VEOR/VEORQ:19:result_uint64x2 [] = { fffffffffffffff3, fffffffffffffff2,  }
VEOR/VEORQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VEOR/VEORQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VEOR/VEORQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VEOR/VEORQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VBIC/VBICQ output:
VBIC/VBICQ:0:result_int8x8 [] = { fffffff0, fffffff1, fffffff0, fffffff1, fffffff4, fffffff5, fffffff4, fffffff5,  }
VBIC/VBICQ:1:result_int16x4 [] = { 0, 1, 2, 3,  }
VBIC/VBICQ:2:result_int32x2 [] = { fffffff0, fffffff0,  }
VBIC/VBICQ:3:result_int64x1 [] = { ffffffffffffff90,  }
VBIC/VBICQ:4:result_uint8x8 [] = { e0, e1, e2, e3, e0, e1, e2, e3,  }
VBIC/VBICQ:5:result_uint16x4 [] = { ffe0, ffe1, ffe0, ffe1,  }
VBIC/VBICQ:6:result_uint32x2 [] = { ffffffd0, ffffffd1,  }
VBIC/VBICQ:7:result_uint64x1 [] = { fffffffffffffff0,  }
VBIC/VBICQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VBIC/VBICQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VBIC/VBICQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VBIC/VBICQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VBIC/VBICQ:12:result_int8x16 [] = { 0, 1, 0, 1, 0, 1, 0, 1, 8, 9, 8, 9, 8, 9, 8, 9,  }
VBIC/VBICQ:13:result_int16x8 [] = { 10, 11, 12, 13, 10, 11, 12, 13,  }
VBIC/VBICQ:14:result_int32x4 [] = { 10, 11, 10, 11,  }
VBIC/VBICQ:15:result_int64x2 [] = { ffffffffffffffe0, ffffffffffffffe1,  }
VBIC/VBICQ:16:result_uint8x16 [] = { f0, f1, f2, f3, f0, f1, f2, f3, f0, f1, f2, f3, f0, f1, f2, f3,  }
VBIC/VBICQ:17:result_uint16x8 [] = { fff0, fff0, fff0, fff0, fff4, fff4, fff4, fff4,  }
VBIC/VBICQ:18:result_uint32x4 [] = { ffffffc0, ffffffc0, ffffffc0, ffffffc0,  }
VBIC/VBICQ:19:result_uint64x2 [] = { fffffffffffffff0, fffffffffffffff0,  }
VBIC/VBICQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VBIC/VBICQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VBIC/VBICQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VBIC/VBICQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VCREATE output:
VCREATE:0:result_int8x8 [] = { fffffff0, ffffffde, ffffffbc, ffffff9a, 78, 56, 34, 12,  }
VCREATE:1:result_int16x4 [] = { ffffdef0, ffff9abc, 5678, 1234,  }
VCREATE:2:result_int32x2 [] = { 9abcdef0, 12345678,  }
VCREATE:3:result_int64x1 [] = { 123456789abcdef0,  }
VCREATE:4:result_uint8x8 [] = { f0, de, bc, 9a, 78, 56, 34, 12,  }
VCREATE:5:result_uint16x4 [] = { def0, 9abc, 5678, 1234,  }
VCREATE:6:result_uint32x2 [] = { 9abcdef0, 12345678,  }
VCREATE:7:result_uint64x1 [] = { 123456789abcdef0,  }
VCREATE:8:result_poly8x8 [] = { f0, de, bc, 9a, 78, 56, 34, 12,  }
VCREATE:9:result_poly16x4 [] = { def0, 9abc, 5678, 1234,  }
VCREATE:10:result_float32x2 [] = { 9abcdef0, 12345678,  }
VCREATE:11:result_float16x4 [] = { def0, 9abc, 5678, 1234,  }
VCREATE:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VCREATE:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VCREATE:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VCREATE:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VCREATE:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VCREATE:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VCREATE:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VCREATE:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VCREATE:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VCREATE:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VCREATE:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VCREATE:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VLD2_LANE/VLD2Q_LANE chunk 0 output:
VLD2_LANE/VLD2Q_LANE:0:result_int8x8 [] = { ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa,  }
VLD2_LANE/VLD2Q_LANE:1:result_int16x4 [] = { ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa,  }
VLD2_LANE/VLD2Q_LANE:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VLD2_LANE/VLD2Q_LANE:3:result_int64x1 [] = { 3333333333333333,  }
VLD2_LANE/VLD2Q_LANE:4:result_uint8x8 [] = { aa, aa, aa, aa, aa, aa, aa, aa,  }
VLD2_LANE/VLD2Q_LANE:5:result_uint16x4 [] = { aaaa, aaaa, aaaa, aaaa,  }
VLD2_LANE/VLD2Q_LANE:6:result_uint32x2 [] = { aaaaaaaa, aaaaaaaa,  }
VLD2_LANE/VLD2Q_LANE:7:result_uint64x1 [] = { 3333333333333333,  }
VLD2_LANE/VLD2Q_LANE:8:result_poly8x8 [] = { aa, aa, aa, aa, aa, aa, aa, aa,  }
VLD2_LANE/VLD2Q_LANE:9:result_poly16x4 [] = { aaaa, aaaa, aaaa, aaaa,  }
VLD2_LANE/VLD2Q_LANE:10:result_float32x2 [] = { c1800000, c1700000,  }
VLD2_LANE/VLD2Q_LANE:11:result_float16x4 [] = { cc00, cb80, aaaa, aaaa,  }
VLD2_LANE/VLD2Q_LANE:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD2_LANE/VLD2Q_LANE:13:result_int16x8 [] = { ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa,  }
VLD2_LANE/VLD2Q_LANE:14:result_int32x4 [] = { aaaaaaaa, aaaaaaaa, aaaaaaaa, aaaaaaaa,  }
VLD2_LANE/VLD2Q_LANE:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD2_LANE/VLD2Q_LANE:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD2_LANE/VLD2Q_LANE:17:result_uint16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa,  }
VLD2_LANE/VLD2Q_LANE:18:result_uint32x4 [] = { fffffff0, fffffff1, aaaaaaaa, aaaaaaaa,  }
VLD2_LANE/VLD2Q_LANE:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD2_LANE/VLD2Q_LANE:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD2_LANE/VLD2Q_LANE:21:result_poly16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa,  }
VLD2_LANE/VLD2Q_LANE:22:result_float32x4 [] = { aaaaaaaa, aaaaaaaa, aaaaaaaa, aaaaaaaa,  }
VLD2_LANE/VLD2Q_LANE:23:result_float16x8 [] = { aaaa, aaaa, aaaa, aaaa, cc00, cb80, aaaa, aaaa,  }

VLD2_LANE/VLD2Q_LANE chunk 1 output:
VLD2_LANE/VLD2Q_LANE:24:result_int8x8 [] = { ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, fffffff0, fffffff1,  }
VLD2_LANE/VLD2Q_LANE:25:result_int16x4 [] = { fffffff0, fffffff1, ffffaaaa, ffffaaaa,  }
VLD2_LANE/VLD2Q_LANE:26:result_int32x2 [] = { aaaaaaaa, aaaaaaaa,  }
VLD2_LANE/VLD2Q_LANE:27:result_int64x1 [] = { 3333333333333333,  }
VLD2_LANE/VLD2Q_LANE:28:result_uint8x8 [] = { f0, f1, aa, aa, aa, aa, aa, aa,  }
VLD2_LANE/VLD2Q_LANE:29:result_uint16x4 [] = { aaaa, aaaa, fff0, fff1,  }
VLD2_LANE/VLD2Q_LANE:30:result_uint32x2 [] = { fffffff0, fffffff1,  }
VLD2_LANE/VLD2Q_LANE:31:result_uint64x1 [] = { 3333333333333333,  }
VLD2_LANE/VLD2Q_LANE:32:result_poly8x8 [] = { f0, f1, aa, aa, aa, aa, aa, aa,  }
VLD2_LANE/VLD2Q_LANE:33:result_poly16x4 [] = { aaaa, aaaa, fff0, fff1,  }
VLD2_LANE/VLD2Q_LANE:34:result_float32x2 [] = { aaaaaaaa, aaaaaaaa,  }
VLD2_LANE/VLD2Q_LANE:35:result_float16x4 [] = { aaaa, aaaa, aaaa, aaaa,  }
VLD2_LANE/VLD2Q_LANE:36:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD2_LANE/VLD2Q_LANE:37:result_int16x8 [] = { ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, fffffff0, fffffff1, ffffaaaa, ffffaaaa,  }
VLD2_LANE/VLD2Q_LANE:38:result_int32x4 [] = { fffffff0, fffffff1, aaaaaaaa, aaaaaaaa,  }
VLD2_LANE/VLD2Q_LANE:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD2_LANE/VLD2Q_LANE:40:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD2_LANE/VLD2Q_LANE:41:result_uint16x8 [] = { aaaa, aaaa, fff0, fff1, aaaa, aaaa, aaaa, aaaa,  }
VLD2_LANE/VLD2Q_LANE:42:result_uint32x4 [] = { aaaaaaaa, aaaaaaaa, aaaaaaaa, aaaaaaaa,  }
VLD2_LANE/VLD2Q_LANE:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD2_LANE/VLD2Q_LANE:44:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD2_LANE/VLD2Q_LANE:45:result_poly16x8 [] = { aaaa, aaaa, fff0, fff1, aaaa, aaaa, aaaa, aaaa,  }
VLD2_LANE/VLD2Q_LANE:46:result_float32x4 [] = { c1800000, c1700000, aaaaaaaa, aaaaaaaa,  }
VLD2_LANE/VLD2Q_LANE:47:result_float16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa,  }

VLD3_LANE/VLD3Q_LANE chunk 0 output:
VLD3_LANE/VLD3Q_LANE:0:result_int8x8 [] = { ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa,  }
VLD3_LANE/VLD3Q_LANE:1:result_int16x4 [] = { ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa,  }
VLD3_LANE/VLD3Q_LANE:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VLD3_LANE/VLD3Q_LANE:3:result_int64x1 [] = { 3333333333333333,  }
VLD3_LANE/VLD3Q_LANE:4:result_uint8x8 [] = { aa, aa, aa, aa, aa, aa, aa, aa,  }
VLD3_LANE/VLD3Q_LANE:5:result_uint16x4 [] = { aaaa, aaaa, aaaa, aaaa,  }
VLD3_LANE/VLD3Q_LANE:6:result_uint32x2 [] = { aaaaaaaa, aaaaaaaa,  }
VLD3_LANE/VLD3Q_LANE:7:result_uint64x1 [] = { 3333333333333333,  }
VLD3_LANE/VLD3Q_LANE:8:result_poly8x8 [] = { aa, aa, aa, aa, aa, aa, aa, aa,  }
VLD3_LANE/VLD3Q_LANE:9:result_poly16x4 [] = { aaaa, aaaa, aaaa, aaaa,  }
VLD3_LANE/VLD3Q_LANE:10:result_float32x2 [] = { c1800000, c1700000,  }
VLD3_LANE/VLD3Q_LANE:11:result_float16x4 [] = { cc00, cb80, cb00, aaaa,  }
VLD3_LANE/VLD3Q_LANE:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD3_LANE/VLD3Q_LANE:13:result_int16x8 [] = { ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa,  }
VLD3_LANE/VLD3Q_LANE:14:result_int32x4 [] = { aaaaaaaa, aaaaaaaa, aaaaaaaa, aaaaaaaa,  }
VLD3_LANE/VLD3Q_LANE:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD3_LANE/VLD3Q_LANE:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD3_LANE/VLD3Q_LANE:17:result_uint16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa,  }
VLD3_LANE/VLD3Q_LANE:18:result_uint32x4 [] = { fffffff0, fffffff1, fffffff2, aaaaaaaa,  }
VLD3_LANE/VLD3Q_LANE:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD3_LANE/VLD3Q_LANE:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD3_LANE/VLD3Q_LANE:21:result_poly16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa,  }
VLD3_LANE/VLD3Q_LANE:22:result_float32x4 [] = { aaaaaaaa, aaaaaaaa, aaaaaaaa, aaaaaaaa,  }
VLD3_LANE/VLD3Q_LANE:23:result_float16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, cc00, cb80,  }

VLD3_LANE/VLD3Q_LANE chunk 1 output:
VLD3_LANE/VLD3Q_LANE:24:result_int8x8 [] = { ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa,  }
VLD3_LANE/VLD3Q_LANE:25:result_int16x4 [] = { ffffaaaa, ffffaaaa, fffffff0, fffffff1,  }
VLD3_LANE/VLD3Q_LANE:26:result_int32x2 [] = { fffffff2, aaaaaaaa,  }
VLD3_LANE/VLD3Q_LANE:27:result_int64x1 [] = { 3333333333333333,  }
VLD3_LANE/VLD3Q_LANE:28:result_uint8x8 [] = { aa, aa, aa, aa, f0, f1, f2, aa,  }
VLD3_LANE/VLD3Q_LANE:29:result_uint16x4 [] = { aaaa, aaaa, aaaa, aaaa,  }
VLD3_LANE/VLD3Q_LANE:30:result_uint32x2 [] = { aaaaaaaa, fffffff0,  }
VLD3_LANE/VLD3Q_LANE:31:result_uint64x1 [] = { 3333333333333333,  }
VLD3_LANE/VLD3Q_LANE:32:result_poly8x8 [] = { aa, aa, aa, aa, f0, f1, f2, aa,  }
VLD3_LANE/VLD3Q_LANE:33:result_poly16x4 [] = { aaaa, aaaa, aaaa, aaaa,  }
VLD3_LANE/VLD3Q_LANE:34:result_float32x2 [] = { c1600000, aaaaaaaa,  }
VLD3_LANE/VLD3Q_LANE:35:result_float16x4 [] = { aaaa, aaaa, aaaa, aaaa,  }
VLD3_LANE/VLD3Q_LANE:36:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD3_LANE/VLD3Q_LANE:37:result_int16x8 [] = { ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa,  }
VLD3_LANE/VLD3Q_LANE:38:result_int32x4 [] = { aaaaaaaa, aaaaaaaa, fffffff0, fffffff1,  }
VLD3_LANE/VLD3Q_LANE:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD3_LANE/VLD3Q_LANE:40:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD3_LANE/VLD3Q_LANE:41:result_uint16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, fff0,  }
VLD3_LANE/VLD3Q_LANE:42:result_uint32x4 [] = { aaaaaaaa, aaaaaaaa, aaaaaaaa, aaaaaaaa,  }
VLD3_LANE/VLD3Q_LANE:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD3_LANE/VLD3Q_LANE:44:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD3_LANE/VLD3Q_LANE:45:result_poly16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, fff0,  }
VLD3_LANE/VLD3Q_LANE:46:result_float32x4 [] = { aaaaaaaa, aaaaaaaa, c1800000, c1700000,  }
VLD3_LANE/VLD3Q_LANE:47:result_float16x8 [] = { cb00, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa,  }

VLD3_LANE/VLD3Q_LANE chunk 2 output:
VLD3_LANE/VLD3Q_LANE:48:result_int8x8 [] = { ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, fffffff0, fffffff1, fffffff2,  }
VLD3_LANE/VLD3Q_LANE:49:result_int16x4 [] = { fffffff2, ffffaaaa, ffffaaaa, ffffaaaa,  }
VLD3_LANE/VLD3Q_LANE:50:result_int32x2 [] = { aaaaaaaa, aaaaaaaa,  }
VLD3_LANE/VLD3Q_LANE:51:result_int64x1 [] = { 3333333333333333,  }
VLD3_LANE/VLD3Q_LANE:52:result_uint8x8 [] = { aa, aa, aa, aa, aa, aa, aa, aa,  }
VLD3_LANE/VLD3Q_LANE:53:result_uint16x4 [] = { aaaa, fff0, fff1, fff2,  }
VLD3_LANE/VLD3Q_LANE:54:result_uint32x2 [] = { fffffff1, fffffff2,  }
VLD3_LANE/VLD3Q_LANE:55:result_uint64x1 [] = { 3333333333333333,  }
VLD3_LANE/VLD3Q_LANE:56:result_poly8x8 [] = { aa, aa, aa, aa, aa, aa, aa, aa,  }
VLD3_LANE/VLD3Q_LANE:57:result_poly16x4 [] = { aaaa, fff0, fff1, fff2,  }
VLD3_LANE/VLD3Q_LANE:58:result_float32x2 [] = { aaaaaaaa, aaaaaaaa,  }
VLD3_LANE/VLD3Q_LANE:59:result_float16x4 [] = { aaaa, aaaa, aaaa, aaaa,  }
VLD3_LANE/VLD3Q_LANE:60:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD3_LANE/VLD3Q_LANE:61:result_int16x8 [] = { ffffaaaa, ffffaaaa, fffffff0, fffffff1, fffffff2, ffffaaaa, ffffaaaa, ffffaaaa,  }
VLD3_LANE/VLD3Q_LANE:62:result_int32x4 [] = { fffffff2, aaaaaaaa, aaaaaaaa, aaaaaaaa,  }
VLD3_LANE/VLD3Q_LANE:63:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD3_LANE/VLD3Q_LANE:64:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD3_LANE/VLD3Q_LANE:65:result_uint16x8 [] = { fff1, fff2, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa,  }
VLD3_LANE/VLD3Q_LANE:66:result_uint32x4 [] = { aaaaaaaa, aaaaaaaa, aaaaaaaa, aaaaaaaa,  }
VLD3_LANE/VLD3Q_LANE:67:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD3_LANE/VLD3Q_LANE:68:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD3_LANE/VLD3Q_LANE:69:result_poly16x8 [] = { fff1, fff2, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa,  }
VLD3_LANE/VLD3Q_LANE:70:result_float32x4 [] = { c1600000, aaaaaaaa, aaaaaaaa, aaaaaaaa,  }
VLD3_LANE/VLD3Q_LANE:71:result_float16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa,  }

VLD4_LANE/VLD4Q_LANE chunk 0 output:
VLD4_LANE/VLD4Q_LANE:0:result_int8x8 [] = { ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa,  }
VLD4_LANE/VLD4Q_LANE:1:result_int16x4 [] = { ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa,  }
VLD4_LANE/VLD4Q_LANE:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VLD4_LANE/VLD4Q_LANE:3:result_int64x1 [] = { 3333333333333333,  }
VLD4_LANE/VLD4Q_LANE:4:result_uint8x8 [] = { aa, aa, aa, aa, aa, aa, aa, aa,  }
VLD4_LANE/VLD4Q_LANE:5:result_uint16x4 [] = { aaaa, aaaa, aaaa, aaaa,  }
VLD4_LANE/VLD4Q_LANE:6:result_uint32x2 [] = { aaaaaaaa, aaaaaaaa,  }
VLD4_LANE/VLD4Q_LANE:7:result_uint64x1 [] = { 3333333333333333,  }
VLD4_LANE/VLD4Q_LANE:8:result_poly8x8 [] = { aa, aa, aa, aa, aa, aa, aa, aa,  }
VLD4_LANE/VLD4Q_LANE:9:result_poly16x4 [] = { aaaa, aaaa, aaaa, aaaa,  }
VLD4_LANE/VLD4Q_LANE:10:result_float32x2 [] = { c1800000, c1700000,  }
VLD4_LANE/VLD4Q_LANE:11:result_float16x4 [] = { cc00, cb80, cb00, ca80,  }
VLD4_LANE/VLD4Q_LANE:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_LANE/VLD4Q_LANE:13:result_int16x8 [] = { ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa,  }
VLD4_LANE/VLD4Q_LANE:14:result_int32x4 [] = { aaaaaaaa, aaaaaaaa, aaaaaaaa, aaaaaaaa,  }
VLD4_LANE/VLD4Q_LANE:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4_LANE/VLD4Q_LANE:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_LANE/VLD4Q_LANE:17:result_uint16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa,  }
VLD4_LANE/VLD4Q_LANE:18:result_uint32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD4_LANE/VLD4Q_LANE:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4_LANE/VLD4Q_LANE:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_LANE/VLD4Q_LANE:21:result_poly16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa,  }
VLD4_LANE/VLD4Q_LANE:22:result_float32x4 [] = { aaaaaaaa, aaaaaaaa, aaaaaaaa, aaaaaaaa,  }
VLD4_LANE/VLD4Q_LANE:23:result_float16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa,  }

VLD4_LANE/VLD4Q_LANE chunk 1 output:
VLD4_LANE/VLD4Q_LANE:24:result_int8x8 [] = { ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa,  }
VLD4_LANE/VLD4Q_LANE:25:result_int16x4 [] = { ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa,  }
VLD4_LANE/VLD4Q_LANE:26:result_int32x2 [] = { fffffff2, fffffff3,  }
VLD4_LANE/VLD4Q_LANE:27:result_int64x1 [] = { 3333333333333333,  }
VLD4_LANE/VLD4Q_LANE:28:result_uint8x8 [] = { aa, aa, aa, aa, aa, aa, aa, aa,  }
VLD4_LANE/VLD4Q_LANE:29:result_uint16x4 [] = { aaaa, aaaa, aaaa, aaaa,  }
VLD4_LANE/VLD4Q_LANE:30:result_uint32x2 [] = { aaaaaaaa, aaaaaaaa,  }
VLD4_LANE/VLD4Q_LANE:31:result_uint64x1 [] = { 3333333333333333,  }
VLD4_LANE/VLD4Q_LANE:32:result_poly8x8 [] = { aa, aa, aa, aa, aa, aa, aa, aa,  }
VLD4_LANE/VLD4Q_LANE:33:result_poly16x4 [] = { aaaa, aaaa, aaaa, aaaa,  }
VLD4_LANE/VLD4Q_LANE:34:result_float32x2 [] = { c1600000, c1500000,  }
VLD4_LANE/VLD4Q_LANE:35:result_float16x4 [] = { aaaa, aaaa, aaaa, aaaa,  }
VLD4_LANE/VLD4Q_LANE:36:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_LANE/VLD4Q_LANE:37:result_int16x8 [] = { ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa,  }
VLD4_LANE/VLD4Q_LANE:38:result_int32x4 [] = { aaaaaaaa, aaaaaaaa, aaaaaaaa, aaaaaaaa,  }
VLD4_LANE/VLD4Q_LANE:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4_LANE/VLD4Q_LANE:40:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_LANE/VLD4Q_LANE:41:result_uint16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa,  }
VLD4_LANE/VLD4Q_LANE:42:result_uint32x4 [] = { aaaaaaaa, aaaaaaaa, aaaaaaaa, aaaaaaaa,  }
VLD4_LANE/VLD4Q_LANE:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4_LANE/VLD4Q_LANE:44:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_LANE/VLD4Q_LANE:45:result_poly16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa,  }
VLD4_LANE/VLD4Q_LANE:46:result_float32x4 [] = { aaaaaaaa, aaaaaaaa, aaaaaaaa, aaaaaaaa,  }
VLD4_LANE/VLD4Q_LANE:47:result_float16x8 [] = { cc00, cb80, cb00, ca80, aaaa, aaaa, aaaa, aaaa,  }

VLD4_LANE/VLD4Q_LANE chunk 2 output:
VLD4_LANE/VLD4Q_LANE:48:result_int8x8 [] = { ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa, ffffffaa,  }
VLD4_LANE/VLD4Q_LANE:49:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD4_LANE/VLD4Q_LANE:50:result_int32x2 [] = { aaaaaaaa, aaaaaaaa,  }
VLD4_LANE/VLD4Q_LANE:51:result_int64x1 [] = { 3333333333333333,  }
VLD4_LANE/VLD4Q_LANE:52:result_uint8x8 [] = { f0, f1, f2, f3, aa, aa, aa, aa,  }
VLD4_LANE/VLD4Q_LANE:53:result_uint16x4 [] = { aaaa, aaaa, aaaa, aaaa,  }
VLD4_LANE/VLD4Q_LANE:54:result_uint32x2 [] = { fffffff0, fffffff1,  }
VLD4_LANE/VLD4Q_LANE:55:result_uint64x1 [] = { 3333333333333333,  }
VLD4_LANE/VLD4Q_LANE:56:result_poly8x8 [] = { f0, f1, f2, f3, aa, aa, aa, aa,  }
VLD4_LANE/VLD4Q_LANE:57:result_poly16x4 [] = { aaaa, aaaa, aaaa, aaaa,  }
VLD4_LANE/VLD4Q_LANE:58:result_float32x2 [] = { aaaaaaaa, aaaaaaaa,  }
VLD4_LANE/VLD4Q_LANE:59:result_float16x4 [] = { aaaa, aaaa, aaaa, aaaa,  }
VLD4_LANE/VLD4Q_LANE:60:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_LANE/VLD4Q_LANE:61:result_int16x8 [] = { ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa,  }
VLD4_LANE/VLD4Q_LANE:62:result_int32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD4_LANE/VLD4Q_LANE:63:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4_LANE/VLD4Q_LANE:64:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_LANE/VLD4Q_LANE:65:result_uint16x8 [] = { aaaa, aaaa, aaaa, aaaa, fff0, fff1, fff2, fff3,  }
VLD4_LANE/VLD4Q_LANE:66:result_uint32x4 [] = { aaaaaaaa, aaaaaaaa, aaaaaaaa, aaaaaaaa,  }
VLD4_LANE/VLD4Q_LANE:67:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4_LANE/VLD4Q_LANE:68:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_LANE/VLD4Q_LANE:69:result_poly16x8 [] = { aaaa, aaaa, aaaa, aaaa, fff0, fff1, fff2, fff3,  }
VLD4_LANE/VLD4Q_LANE:70:result_float32x4 [] = { c1800000, c1700000, c1600000, c1500000,  }
VLD4_LANE/VLD4Q_LANE:71:result_float16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa,  }

VLD4_LANE/VLD4Q_LANE chunk 3 output:
VLD4_LANE/VLD4Q_LANE:72:result_int8x8 [] = { ffffffaa, ffffffaa, ffffffaa, ffffffaa, fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD4_LANE/VLD4Q_LANE:73:result_int16x4 [] = { ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa,  }
VLD4_LANE/VLD4Q_LANE:74:result_int32x2 [] = { aaaaaaaa, aaaaaaaa,  }
VLD4_LANE/VLD4Q_LANE:75:result_int64x1 [] = { 3333333333333333,  }
VLD4_LANE/VLD4Q_LANE:76:result_uint8x8 [] = { aa, aa, aa, aa, aa, aa, aa, aa,  }
VLD4_LANE/VLD4Q_LANE:77:result_uint16x4 [] = { fff0, fff1, fff2, fff3,  }
VLD4_LANE/VLD4Q_LANE:78:result_uint32x2 [] = { fffffff2, fffffff3,  }
VLD4_LANE/VLD4Q_LANE:79:result_uint64x1 [] = { 3333333333333333,  }
VLD4_LANE/VLD4Q_LANE:80:result_poly8x8 [] = { aa, aa, aa, aa, aa, aa, aa, aa,  }
VLD4_LANE/VLD4Q_LANE:81:result_poly16x4 [] = { fff0, fff1, fff2, fff3,  }
VLD4_LANE/VLD4Q_LANE:82:result_float32x2 [] = { aaaaaaaa, aaaaaaaa,  }
VLD4_LANE/VLD4Q_LANE:83:result_float16x4 [] = { aaaa, aaaa, aaaa, aaaa,  }
VLD4_LANE/VLD4Q_LANE:84:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_LANE/VLD4Q_LANE:85:result_int16x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, ffffaaaa, ffffaaaa, ffffaaaa, ffffaaaa,  }
VLD4_LANE/VLD4Q_LANE:86:result_int32x4 [] = { aaaaaaaa, aaaaaaaa, aaaaaaaa, aaaaaaaa,  }
VLD4_LANE/VLD4Q_LANE:87:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4_LANE/VLD4Q_LANE:88:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_LANE/VLD4Q_LANE:89:result_uint16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa,  }
VLD4_LANE/VLD4Q_LANE:90:result_uint32x4 [] = { aaaaaaaa, aaaaaaaa, aaaaaaaa, aaaaaaaa,  }
VLD4_LANE/VLD4Q_LANE:91:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4_LANE/VLD4Q_LANE:92:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_LANE/VLD4Q_LANE:93:result_poly16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa,  }
VLD4_LANE/VLD4Q_LANE:94:result_float32x4 [] = { aaaaaaaa, aaaaaaaa, aaaaaaaa, aaaaaaaa,  }
VLD4_LANE/VLD4Q_LANE:95:result_float16x8 [] = { aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa, aaaa,  }

VLD2_DUP/VLD2Q_DUP chunk 0 output:
VLD2_DUP/VLD2Q_DUP:0:result_int8x8 [] = { fffffff0, fffffff1, fffffff0, fffffff1, fffffff0, fffffff1, fffffff0, fffffff1,  }
VLD2_DUP/VLD2Q_DUP:1:result_int16x4 [] = { fffffff0, fffffff1, fffffff0, fffffff1,  }
VLD2_DUP/VLD2Q_DUP:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VLD2_DUP/VLD2Q_DUP:3:result_int64x1 [] = { fffffffffffffff0,  }
VLD2_DUP/VLD2Q_DUP:4:result_uint8x8 [] = { f0, f1, f0, f1, f0, f1, f0, f1,  }
VLD2_DUP/VLD2Q_DUP:5:result_uint16x4 [] = { fff0, fff1, fff0, fff1,  }
VLD2_DUP/VLD2Q_DUP:6:result_uint32x2 [] = { fffffff0, fffffff1,  }
VLD2_DUP/VLD2Q_DUP:7:result_uint64x1 [] = { fffffffffffffff0,  }
VLD2_DUP/VLD2Q_DUP:8:result_poly8x8 [] = { f0, f1, f0, f1, f0, f1, f0, f1,  }
VLD2_DUP/VLD2Q_DUP:9:result_poly16x4 [] = { fff0, fff1, fff0, fff1,  }
VLD2_DUP/VLD2Q_DUP:10:result_float32x2 [] = { c1800000, c1700000,  }
VLD2_DUP/VLD2Q_DUP:11:result_float16x4 [] = { cc00, cb80, cc00, cb80,  }
VLD2_DUP/VLD2Q_DUP:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD2_DUP/VLD2Q_DUP:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD2_DUP/VLD2Q_DUP:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD2_DUP/VLD2Q_DUP:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD2_DUP/VLD2Q_DUP:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD2_DUP/VLD2Q_DUP:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD2_DUP/VLD2Q_DUP:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD2_DUP/VLD2Q_DUP:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD2_DUP/VLD2Q_DUP:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD2_DUP/VLD2Q_DUP:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD2_DUP/VLD2Q_DUP:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD2_DUP/VLD2Q_DUP:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VLD2_DUP/VLD2Q_DUP chunk 1 output:
VLD2_DUP/VLD2Q_DUP:24:result_int8x8 [] = { fffffff0, fffffff1, fffffff0, fffffff1, fffffff0, fffffff1, fffffff0, fffffff1,  }
VLD2_DUP/VLD2Q_DUP:25:result_int16x4 [] = { fffffff0, fffffff1, fffffff0, fffffff1,  }
VLD2_DUP/VLD2Q_DUP:26:result_int32x2 [] = { fffffff0, fffffff1,  }
VLD2_DUP/VLD2Q_DUP:27:result_int64x1 [] = { fffffffffffffff1,  }
VLD2_DUP/VLD2Q_DUP:28:result_uint8x8 [] = { f0, f1, f0, f1, f0, f1, f0, f1,  }
VLD2_DUP/VLD2Q_DUP:29:result_uint16x4 [] = { fff0, fff1, fff0, fff1,  }
VLD2_DUP/VLD2Q_DUP:30:result_uint32x2 [] = { fffffff0, fffffff1,  }
VLD2_DUP/VLD2Q_DUP:31:result_uint64x1 [] = { fffffffffffffff1,  }
VLD2_DUP/VLD2Q_DUP:32:result_poly8x8 [] = { f0, f1, f0, f1, f0, f1, f0, f1,  }
VLD2_DUP/VLD2Q_DUP:33:result_poly16x4 [] = { fff0, fff1, fff0, fff1,  }
VLD2_DUP/VLD2Q_DUP:34:result_float32x2 [] = { c1800000, c1700000,  }
VLD2_DUP/VLD2Q_DUP:35:result_float16x4 [] = { cc00, cb80, cc00, cb80,  }
VLD2_DUP/VLD2Q_DUP:36:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD2_DUP/VLD2Q_DUP:37:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD2_DUP/VLD2Q_DUP:38:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD2_DUP/VLD2Q_DUP:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD2_DUP/VLD2Q_DUP:40:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD2_DUP/VLD2Q_DUP:41:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD2_DUP/VLD2Q_DUP:42:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD2_DUP/VLD2Q_DUP:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD2_DUP/VLD2Q_DUP:44:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD2_DUP/VLD2Q_DUP:45:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD2_DUP/VLD2Q_DUP:46:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD2_DUP/VLD2Q_DUP:47:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VLD3_DUP/VLD3Q_DUP chunk 0 output:
VLD3_DUP/VLD3Q_DUP:0:result_int8x8 [] = { fffffff0, fffffff1, fffffff2, fffffff0, fffffff1, fffffff2, fffffff0, fffffff1,  }
VLD3_DUP/VLD3Q_DUP:1:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff0,  }
VLD3_DUP/VLD3Q_DUP:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VLD3_DUP/VLD3Q_DUP:3:result_int64x1 [] = { fffffffffffffff0,  }
VLD3_DUP/VLD3Q_DUP:4:result_uint8x8 [] = { f0, f1, f2, f0, f1, f2, f0, f1,  }
VLD3_DUP/VLD3Q_DUP:5:result_uint16x4 [] = { fff0, fff1, fff2, fff0,  }
VLD3_DUP/VLD3Q_DUP:6:result_uint32x2 [] = { fffffff0, fffffff1,  }
VLD3_DUP/VLD3Q_DUP:7:result_uint64x1 [] = { fffffffffffffff0,  }
VLD3_DUP/VLD3Q_DUP:8:result_poly8x8 [] = { f0, f1, f2, f0, f1, f2, f0, f1,  }
VLD3_DUP/VLD3Q_DUP:9:result_poly16x4 [] = { fff0, fff1, fff2, fff0,  }
VLD3_DUP/VLD3Q_DUP:10:result_float32x2 [] = { c1800000, c1700000,  }
VLD3_DUP/VLD3Q_DUP:11:result_float16x4 [] = { cc00, cb80, cb00, cc00,  }
VLD3_DUP/VLD3Q_DUP:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD3_DUP/VLD3Q_DUP:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD3_DUP/VLD3Q_DUP:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD3_DUP/VLD3Q_DUP:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD3_DUP/VLD3Q_DUP:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD3_DUP/VLD3Q_DUP:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD3_DUP/VLD3Q_DUP:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD3_DUP/VLD3Q_DUP:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD3_DUP/VLD3Q_DUP:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD3_DUP/VLD3Q_DUP:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD3_DUP/VLD3Q_DUP:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD3_DUP/VLD3Q_DUP:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VLD3_DUP/VLD3Q_DUP chunk 1 output:
VLD3_DUP/VLD3Q_DUP:24:result_int8x8 [] = { fffffff2, fffffff0, fffffff1, fffffff2, fffffff0, fffffff1, fffffff2, fffffff0,  }
VLD3_DUP/VLD3Q_DUP:25:result_int16x4 [] = { fffffff1, fffffff2, fffffff0, fffffff1,  }
VLD3_DUP/VLD3Q_DUP:26:result_int32x2 [] = { fffffff2, fffffff0,  }
VLD3_DUP/VLD3Q_DUP:27:result_int64x1 [] = { fffffffffffffff1,  }
VLD3_DUP/VLD3Q_DUP:28:result_uint8x8 [] = { f2, f0, f1, f2, f0, f1, f2, f0,  }
VLD3_DUP/VLD3Q_DUP:29:result_uint16x4 [] = { fff1, fff2, fff0, fff1,  }
VLD3_DUP/VLD3Q_DUP:30:result_uint32x2 [] = { fffffff2, fffffff0,  }
VLD3_DUP/VLD3Q_DUP:31:result_uint64x1 [] = { fffffffffffffff1,  }
VLD3_DUP/VLD3Q_DUP:32:result_poly8x8 [] = { f2, f0, f1, f2, f0, f1, f2, f0,  }
VLD3_DUP/VLD3Q_DUP:33:result_poly16x4 [] = { fff1, fff2, fff0, fff1,  }
VLD3_DUP/VLD3Q_DUP:34:result_float32x2 [] = { c1600000, c1800000,  }
VLD3_DUP/VLD3Q_DUP:35:result_float16x4 [] = { cb80, cb00, cc00, cb80,  }
VLD3_DUP/VLD3Q_DUP:36:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD3_DUP/VLD3Q_DUP:37:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD3_DUP/VLD3Q_DUP:38:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD3_DUP/VLD3Q_DUP:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD3_DUP/VLD3Q_DUP:40:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD3_DUP/VLD3Q_DUP:41:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD3_DUP/VLD3Q_DUP:42:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD3_DUP/VLD3Q_DUP:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD3_DUP/VLD3Q_DUP:44:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD3_DUP/VLD3Q_DUP:45:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD3_DUP/VLD3Q_DUP:46:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD3_DUP/VLD3Q_DUP:47:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VLD3_DUP/VLD3Q_DUP chunk 2 output:
VLD3_DUP/VLD3Q_DUP:48:result_int8x8 [] = { fffffff1, fffffff2, fffffff0, fffffff1, fffffff2, fffffff0, fffffff1, fffffff2,  }
VLD3_DUP/VLD3Q_DUP:49:result_int16x4 [] = { fffffff2, fffffff0, fffffff1, fffffff2,  }
VLD3_DUP/VLD3Q_DUP:50:result_int32x2 [] = { fffffff1, fffffff2,  }
VLD3_DUP/VLD3Q_DUP:51:result_int64x1 [] = { fffffffffffffff2,  }
VLD3_DUP/VLD3Q_DUP:52:result_uint8x8 [] = { f1, f2, f0, f1, f2, f0, f1, f2,  }
VLD3_DUP/VLD3Q_DUP:53:result_uint16x4 [] = { fff2, fff0, fff1, fff2,  }
VLD3_DUP/VLD3Q_DUP:54:result_uint32x2 [] = { fffffff1, fffffff2,  }
VLD3_DUP/VLD3Q_DUP:55:result_uint64x1 [] = { fffffffffffffff2,  }
VLD3_DUP/VLD3Q_DUP:56:result_poly8x8 [] = { f1, f2, f0, f1, f2, f0, f1, f2,  }
VLD3_DUP/VLD3Q_DUP:57:result_poly16x4 [] = { fff2, fff0, fff1, fff2,  }
VLD3_DUP/VLD3Q_DUP:58:result_float32x2 [] = { c1700000, c1600000,  }
VLD3_DUP/VLD3Q_DUP:59:result_float16x4 [] = { cb00, cc00, cb80, cb00,  }
VLD3_DUP/VLD3Q_DUP:60:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD3_DUP/VLD3Q_DUP:61:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD3_DUP/VLD3Q_DUP:62:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD3_DUP/VLD3Q_DUP:63:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD3_DUP/VLD3Q_DUP:64:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD3_DUP/VLD3Q_DUP:65:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD3_DUP/VLD3Q_DUP:66:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD3_DUP/VLD3Q_DUP:67:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD3_DUP/VLD3Q_DUP:68:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD3_DUP/VLD3Q_DUP:69:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD3_DUP/VLD3Q_DUP:70:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD3_DUP/VLD3Q_DUP:71:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VLD4_DUP/VLD4Q_DUP chunk 0 output:
VLD4_DUP/VLD4Q_DUP:0:result_int8x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD4_DUP/VLD4Q_DUP:1:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD4_DUP/VLD4Q_DUP:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VLD4_DUP/VLD4Q_DUP:3:result_int64x1 [] = { fffffffffffffff0,  }
VLD4_DUP/VLD4Q_DUP:4:result_uint8x8 [] = { f0, f1, f2, f3, f0, f1, f2, f3,  }
VLD4_DUP/VLD4Q_DUP:5:result_uint16x4 [] = { fff0, fff1, fff2, fff3,  }
VLD4_DUP/VLD4Q_DUP:6:result_uint32x2 [] = { fffffff0, fffffff1,  }
VLD4_DUP/VLD4Q_DUP:7:result_uint64x1 [] = { fffffffffffffff0,  }
VLD4_DUP/VLD4Q_DUP:8:result_poly8x8 [] = { f0, f1, f2, f3, f0, f1, f2, f3,  }
VLD4_DUP/VLD4Q_DUP:9:result_poly16x4 [] = { fff0, fff1, fff2, fff3,  }
VLD4_DUP/VLD4Q_DUP:10:result_float32x2 [] = { c1800000, c1700000,  }
VLD4_DUP/VLD4Q_DUP:11:result_float16x4 [] = { cc00, cb80, cb00, ca80,  }
VLD4_DUP/VLD4Q_DUP:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_DUP/VLD4Q_DUP:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD4_DUP/VLD4Q_DUP:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD4_DUP/VLD4Q_DUP:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4_DUP/VLD4Q_DUP:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_DUP/VLD4Q_DUP:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD4_DUP/VLD4Q_DUP:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD4_DUP/VLD4Q_DUP:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4_DUP/VLD4Q_DUP:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_DUP/VLD4Q_DUP:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD4_DUP/VLD4Q_DUP:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD4_DUP/VLD4Q_DUP:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VLD4_DUP/VLD4Q_DUP chunk 1 output:
VLD4_DUP/VLD4Q_DUP:24:result_int8x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD4_DUP/VLD4Q_DUP:25:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD4_DUP/VLD4Q_DUP:26:result_int32x2 [] = { fffffff2, fffffff3,  }
VLD4_DUP/VLD4Q_DUP:27:result_int64x1 [] = { fffffffffffffff1,  }
VLD4_DUP/VLD4Q_DUP:28:result_uint8x8 [] = { f0, f1, f2, f3, f0, f1, f2, f3,  }
VLD4_DUP/VLD4Q_DUP:29:result_uint16x4 [] = { fff0, fff1, fff2, fff3,  }
VLD4_DUP/VLD4Q_DUP:30:result_uint32x2 [] = { fffffff2, fffffff3,  }
VLD4_DUP/VLD4Q_DUP:31:result_uint64x1 [] = { fffffffffffffff1,  }
VLD4_DUP/VLD4Q_DUP:32:result_poly8x8 [] = { f0, f1, f2, f3, f0, f1, f2, f3,  }
VLD4_DUP/VLD4Q_DUP:33:result_poly16x4 [] = { fff0, fff1, fff2, fff3,  }
VLD4_DUP/VLD4Q_DUP:34:result_float32x2 [] = { c1600000, c1500000,  }
VLD4_DUP/VLD4Q_DUP:35:result_float16x4 [] = { cc00, cb80, cb00, ca80,  }
VLD4_DUP/VLD4Q_DUP:36:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_DUP/VLD4Q_DUP:37:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD4_DUP/VLD4Q_DUP:38:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD4_DUP/VLD4Q_DUP:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4_DUP/VLD4Q_DUP:40:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_DUP/VLD4Q_DUP:41:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD4_DUP/VLD4Q_DUP:42:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD4_DUP/VLD4Q_DUP:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4_DUP/VLD4Q_DUP:44:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_DUP/VLD4Q_DUP:45:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD4_DUP/VLD4Q_DUP:46:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD4_DUP/VLD4Q_DUP:47:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VLD4_DUP/VLD4Q_DUP chunk 2 output:
VLD4_DUP/VLD4Q_DUP:48:result_int8x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD4_DUP/VLD4Q_DUP:49:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD4_DUP/VLD4Q_DUP:50:result_int32x2 [] = { fffffff0, fffffff1,  }
VLD4_DUP/VLD4Q_DUP:51:result_int64x1 [] = { fffffffffffffff2,  }
VLD4_DUP/VLD4Q_DUP:52:result_uint8x8 [] = { f0, f1, f2, f3, f0, f1, f2, f3,  }
VLD4_DUP/VLD4Q_DUP:53:result_uint16x4 [] = { fff0, fff1, fff2, fff3,  }
VLD4_DUP/VLD4Q_DUP:54:result_uint32x2 [] = { fffffff0, fffffff1,  }
VLD4_DUP/VLD4Q_DUP:55:result_uint64x1 [] = { fffffffffffffff2,  }
VLD4_DUP/VLD4Q_DUP:56:result_poly8x8 [] = { f0, f1, f2, f3, f0, f1, f2, f3,  }
VLD4_DUP/VLD4Q_DUP:57:result_poly16x4 [] = { fff0, fff1, fff2, fff3,  }
VLD4_DUP/VLD4Q_DUP:58:result_float32x2 [] = { c1800000, c1700000,  }
VLD4_DUP/VLD4Q_DUP:59:result_float16x4 [] = { cc00, cb80, cb00, ca80,  }
VLD4_DUP/VLD4Q_DUP:60:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_DUP/VLD4Q_DUP:61:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD4_DUP/VLD4Q_DUP:62:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD4_DUP/VLD4Q_DUP:63:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4_DUP/VLD4Q_DUP:64:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_DUP/VLD4Q_DUP:65:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD4_DUP/VLD4Q_DUP:66:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD4_DUP/VLD4Q_DUP:67:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4_DUP/VLD4Q_DUP:68:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_DUP/VLD4Q_DUP:69:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD4_DUP/VLD4Q_DUP:70:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD4_DUP/VLD4Q_DUP:71:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VLD4_DUP/VLD4Q_DUP chunk 3 output:
VLD4_DUP/VLD4Q_DUP:72:result_int8x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD4_DUP/VLD4Q_DUP:73:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VLD4_DUP/VLD4Q_DUP:74:result_int32x2 [] = { fffffff2, fffffff3,  }
VLD4_DUP/VLD4Q_DUP:75:result_int64x1 [] = { fffffffffffffff3,  }
VLD4_DUP/VLD4Q_DUP:76:result_uint8x8 [] = { f0, f1, f2, f3, f0, f1, f2, f3,  }
VLD4_DUP/VLD4Q_DUP:77:result_uint16x4 [] = { fff0, fff1, fff2, fff3,  }
VLD4_DUP/VLD4Q_DUP:78:result_uint32x2 [] = { fffffff2, fffffff3,  }
VLD4_DUP/VLD4Q_DUP:79:result_uint64x1 [] = { fffffffffffffff3,  }
VLD4_DUP/VLD4Q_DUP:80:result_poly8x8 [] = { f0, f1, f2, f3, f0, f1, f2, f3,  }
VLD4_DUP/VLD4Q_DUP:81:result_poly16x4 [] = { fff0, fff1, fff2, fff3,  }
VLD4_DUP/VLD4Q_DUP:82:result_float32x2 [] = { c1600000, c1500000,  }
VLD4_DUP/VLD4Q_DUP:83:result_float16x4 [] = { cc00, cb80, cb00, ca80,  }
VLD4_DUP/VLD4Q_DUP:84:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_DUP/VLD4Q_DUP:85:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD4_DUP/VLD4Q_DUP:86:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD4_DUP/VLD4Q_DUP:87:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4_DUP/VLD4Q_DUP:88:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_DUP/VLD4Q_DUP:89:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD4_DUP/VLD4Q_DUP:90:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD4_DUP/VLD4Q_DUP:91:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VLD4_DUP/VLD4Q_DUP:92:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VLD4_DUP/VLD4Q_DUP:93:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VLD4_DUP/VLD4Q_DUP:94:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VLD4_DUP/VLD4Q_DUP:95:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMLA output:
VMLA:0:result_int8x8 [] = { ffffffdf, ffffffe0, ffffffe1, ffffffe2, ffffffe3, ffffffe4, ffffffe5, ffffffe6,  }
VMLA:1:result_int16x4 [] = { 1f8c, 1f8d, 1f8e, 1f8f,  }
VMLA:2:result_int32x2 [] = { 2bf7, 2bf8,  }
VMLA:3:result_int64x1 [] = { 3333333333333333,  }
VMLA:4:result_uint8x8 [] = { 20, 21, 22, 23, 24, 25, 26, 27,  }
VMLA:5:result_uint16x4 [] = { 3e07, 3e08, 3e09, 3e0a,  }
VMLA:6:result_uint32x2 [] = { 43ac, 43ad,  }
VMLA:7:result_uint64x1 [] = { 3333333333333333,  }
VMLA:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLA:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLA:10:result_float32x2 [] = { 43a14e76, 43a1ce76,  }
VMLA:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMLA:12:result_int8x16 [] = { f, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1a, 1b, 1c, 1d, 1e,  }
VMLA:13:result_int16x8 [] = { 4830, 4831, 4832, 4833, 4834, 4835, 4836, 4837,  }
VMLA:14:result_int32x4 [] = { 470f, 4710, 4711, 4712,  }
VMLA:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VMLA:16:result_uint8x16 [] = { ac, ad, ae, af, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb,  }
VMLA:17:result_uint16x8 [] = { 3e07, 3e08, 3e09, 3e0a, 3e0b, 3e0c, 3e0d, 3e0e,  }
VMLA:18:result_uint32x4 [] = { 3620, 3621, 3622, 3623,  }
VMLA:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VMLA:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLA:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLA:22:result_float32x4 [] = { 45f0ae15, 45f0b615, 45f0be15, 45f0c615,  }
VMLA:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMLS output:
VMLS:0:result_int8x8 [] = { 1, 2, 3, 4, 5, 6, 7, 8,  }
VMLS:1:result_int16x4 [] = { ffffe054, ffffe055, ffffe056, ffffe057,  }
VMLS:2:result_int32x2 [] = { ffffd3e9, ffffd3ea,  }
VMLS:3:result_int64x1 [] = { 3333333333333333,  }
VMLS:4:result_uint8x8 [] = { c0, c1, c2, c3, c4, c5, c6, c7,  }
VMLS:5:result_uint16x4 [] = { c1d9, c1da, c1db, c1dc,  }
VMLS:6:result_uint32x2 [] = { ffffbc34, ffffbc35,  }
VMLS:7:result_uint64x1 [] = { 3333333333333333,  }
VMLS:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLS:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLS:10:result_float32x2 [] = { c3b14e76, c3b0ce76,  }
VMLS:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMLS:12:result_int8x16 [] = { ffffffd1, ffffffd2, ffffffd3, ffffffd4, ffffffd5, ffffffd6, ffffffd7, ffffffd8, ffffffd9, ffffffda, ffffffdb, ffffffdc, ffffffdd, ffffffde, ffffffdf, ffffffe0,  }
VMLS:13:result_int16x8 [] = { ffffb7b0, ffffb7b1, ffffb7b2, ffffb7b3, ffffb7b4, ffffb7b5, ffffb7b6, ffffb7b7,  }
VMLS:14:result_int32x4 [] = { ffffb8d1, ffffb8d2, ffffb8d3, ffffb8d4,  }
VMLS:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VMLS:16:result_uint8x16 [] = { 34, 35, 36, 37, 38, 39, 3a, 3b, 3c, 3d, 3e, 3f, 40, 41, 42, 43,  }
VMLS:17:result_uint16x8 [] = { c1d9, c1da, c1db, c1dc, c1dd, c1de, c1df, c1e0,  }
VMLS:18:result_uint32x4 [] = { ffffc9c0, ffffc9c1, ffffc9c2, ffffc9c3,  }
VMLS:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VMLS:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLS:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLS:22:result_float32x4 [] = { c5f1ae15, c5f1a615, c5f19e15, c5f19615,  }
VMLS:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMUL output:
VMUL:0:result_int8x8 [] = { fffffff0, 1, 12, 23, 34, 45, 56, 67,  }
VMUL:1:result_int16x4 [] = { fffffde0, fffffe02, fffffe24, fffffe46,  }
VMUL:2:result_int32x2 [] = { fffffcd0, fffffd03,  }
VMUL:3:result_int64x1 [] = { 3333333333333333,  }
VMUL:4:result_uint8x8 [] = { c0, 4, 48, 8c, d0, 14, 58, 9c,  }
VMUL:5:result_uint16x4 [] = { fab0, fb05, fb5a, fbaf,  }
VMUL:6:result_uint32x2 [] = { fffff9a0, fffffa06,  }
VMUL:7:result_uint64x1 [] = { 3333333333333333,  }
VMUL:8:result_poly8x8 [] = { c0, 84, 48, c, d0, 94, 58, 1c,  }
VMUL:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMUL:10:result_float32x2 [] = { c4053333, c3f9c000,  }
VMUL:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMUL:12:result_int8x16 [] = { ffffff90, 7, 7e, fffffff5, 6c, ffffffe3, 5a, ffffffd1, 48, ffffffbf, 36, ffffffad, 24, ffffff9b, 12, ffffff89,  }
VMUL:13:result_int16x8 [] = { fffff780, fffff808, fffff890, fffff918, fffff9a0, fffffa28, fffffab0, fffffb38,  }
VMUL:14:result_int32x4 [] = { fffff670, fffff709, fffff7a2, fffff83b,  }
VMUL:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VMUL:16:result_uint8x16 [] = { 60, a, b4, 5e, 8, b2, 5c, 6, b0, 5a, 4, ae, 58, 2, ac, 56,  }
VMUL:17:result_uint16x8 [] = { f450, f50b, f5c6, f681, f73c, f7f7, f8b2, f96d,  }
VMUL:18:result_uint32x4 [] = { fffff340, fffff40c, fffff4d8, fffff5a4,  }
VMUL:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VMUL:20:result_poly8x16 [] = { 60, ca, 34, 9e, c8, 62, 9c, 36, 30, 9a, 64, ce, 98, 32, cc, 66,  }
VMUL:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMUL:22:result_float32x4 [] = { c4c73333, c4bac000, c4ae4ccd, c4a1d999,  }
VMUL:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMUL_LANE output:
VMUL_LANE:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMUL_LANE:1:result_int16x4 [] = { ffffffc0, ffffffc4, ffffffc8, ffffffcc,  }
VMUL_LANE:2:result_int32x2 [] = { fffffde0, fffffe02,  }
VMUL_LANE:3:result_int64x1 [] = { 3333333333333333,  }
VMUL_LANE:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMUL_LANE:5:result_uint16x4 [] = { bbc0, c004, c448, c88c,  }
VMUL_LANE:6:result_uint32x2 [] = { fffface0, ffffb212,  }
VMUL_LANE:7:result_uint64x1 [] = { 3333333333333333,  }
VMUL_LANE:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMUL_LANE:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMUL_LANE:10:result_float32x2 [] = { c3b66666, c3ab0000,  }
VMUL_LANE:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMUL_LANE:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMUL_LANE:13:result_int16x8 [] = { ffffffc0, ffffffc4, ffffffc8, ffffffcc, ffffffd0, ffffffd4, ffffffd8, ffffffdc,  }
VMUL_LANE:14:result_int32x4 [] = { fffffde0, fffffe02, fffffe24, fffffe46,  }
VMUL_LANE:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VMUL_LANE:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMUL_LANE:17:result_uint16x8 [] = { bbc0, c004, c448, c88c, ccd0, d114, d558, d99c,  }
VMUL_LANE:18:result_uint32x4 [] = { fffface0, ffffb212, ffffb744, ffffbc76,  }
VMUL_LANE:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VMUL_LANE:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMUL_LANE:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMUL_LANE:22:result_float32x4 [] = { c3b66666, c3ab0000, c39f9999, c3943333,  }
VMUL_LANE:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMUL_N output:
VMUL_N:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMUL_N:1:result_int16x4 [] = { fffffef0, ffffff01, ffffff12, ffffff23,  }
VMUL_N:2:result_int32x2 [] = { fffffde0, fffffe02,  }
VMUL_N:3:result_int64x1 [] = { 3333333333333333,  }
VMUL_N:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMUL_N:5:result_uint16x4 [] = { fcd0, fd03, fd36, fd69,  }
VMUL_N:6:result_uint32x2 [] = { fffffbc0, fffffc04,  }
VMUL_N:7:result_uint64x1 [] = { 3333333333333333,  }
VMUL_N:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMUL_N:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMUL_N:10:result_float32x2 [] = { c3b26666, c3a74000,  }
VMUL_N:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMUL_N:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMUL_N:13:result_int16x8 [] = { fffffab0, fffffb05, fffffb5a, fffffbaf, fffffc04, fffffc59, fffffcae, fffffd03,  }
VMUL_N:14:result_int32x4 [] = { fffff9a0, fffffa06, fffffa6c, fffffad2,  }
VMUL_N:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VMUL_N:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMUL_N:17:result_uint16x8 [] = { f890, f907, f97e, f9f5, fa6c, fae3, fb5a, fbd1,  }
VMUL_N:18:result_uint32x4 [] = { fffff780, fffff808, fffff890, fffff918,  }
VMUL_N:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VMUL_N:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMUL_N:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMUL_N:22:result_float32x4 [] = { c4b1cccd, c4a6b000, c49b9333, c4907667,  }
VMUL_N:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMULL_N output:
VMULL_N:0:result_int32x4 [] = { 11000, 11000, 11000, 11000,  }
VMULL_N:1:result_int64x2 [] = { 22000, 22000,  }
VMULL_N:2:result_uint32x4 [] = { 33000, 33000, 33000, 33000,  }
VMULL_N:3:result_uint64x2 [] = { 44000, 44000,  }

VMLA_LANE output:
VMLA_LANE:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLA_LANE:1:result_int16x4 [] = { 3e07, 3e08, 3e09, 3e0a,  }
VMLA_LANE:2:result_int32x2 [] = { 3e07, 3e08,  }
VMLA_LANE:3:result_int64x1 [] = { 3333333333333333,  }
VMLA_LANE:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLA_LANE:5:result_uint16x4 [] = { 3e07, 3e08, 3e09, 3e0a,  }
VMLA_LANE:6:result_uint32x2 [] = { 3e07, 3e08,  }
VMLA_LANE:7:result_uint64x1 [] = { 3333333333333333,  }
VMLA_LANE:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLA_LANE:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLA_LANE:10:result_float32x2 [] = { 4418c687, 44190687,  }
VMLA_LANE:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMLA_LANE:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLA_LANE:13:result_int16x8 [] = { 3e07, 3e08, 3e09, 3e0a, 3e0b, 3e0c, 3e0d, 3e0e,  }
VMLA_LANE:14:result_int32x4 [] = { 3e07, 3e08, 3e09, 3e0a,  }
VMLA_LANE:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VMLA_LANE:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLA_LANE:17:result_uint16x8 [] = { 3e07, 3e08, 3e09, 3e0a, 3e0b, 3e0c, 3e0d, 3e0e,  }
VMLA_LANE:18:result_uint32x4 [] = { 3e07, 3e08, 3e09, 3e0a,  }
VMLA_LANE:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VMLA_LANE:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLA_LANE:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLA_LANE:22:result_float32x4 [] = { 441a3168, 441a7168, 441ab168, 441af168,  }
VMLA_LANE:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMLS_LANE output:
VMLS_LANE:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLS_LANE:1:result_int16x4 [] = { ffffc1d9, ffffc1da, ffffc1db, ffffc1dc,  }
VMLS_LANE:2:result_int32x2 [] = { ffffc1d9, ffffc1da,  }
VMLS_LANE:3:result_int64x1 [] = { 3333333333333333,  }
VMLS_LANE:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLS_LANE:5:result_uint16x4 [] = { c1d9, c1da, c1db, c1dc,  }
VMLS_LANE:6:result_uint32x2 [] = { ffffc1d9, ffffc1da,  }
VMLS_LANE:7:result_uint64x1 [] = { 3333333333333333,  }
VMLS_LANE:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLS_LANE:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLS_LANE:10:result_float32x2 [] = { c420c687, c4208687,  }
VMLS_LANE:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMLS_LANE:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLS_LANE:13:result_int16x8 [] = { ffffc1d9, ffffc1da, ffffc1db, ffffc1dc, ffffc1dd, ffffc1de, ffffc1df, ffffc1e0,  }
VMLS_LANE:14:result_int32x4 [] = { ffffc1d9, ffffc1da, ffffc1db, ffffc1dc,  }
VMLS_LANE:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VMLS_LANE:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLS_LANE:17:result_uint16x8 [] = { c1d9, c1da, c1db, c1dc, c1dd, c1de, c1df, c1e0,  }
VMLS_LANE:18:result_uint32x4 [] = { ffffc1d9, ffffc1da, ffffc1db, ffffc1dc,  }
VMLS_LANE:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VMLS_LANE:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLS_LANE:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLS_LANE:22:result_float32x4 [] = { c4223168, c421f168, c421b168, c4217168,  }
VMLS_LANE:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMLA_N output:
VMLA_N:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLA_N:1:result_int16x4 [] = { 595, 596, 597, 598,  }
VMLA_N:2:result_int32x2 [] = { b3a, b3b,  }
VMLA_N:3:result_int64x1 [] = { 3333333333333333,  }
VMLA_N:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLA_N:5:result_uint16x4 [] = { 10df, 10e0, 10e1, 10e2,  }
VMLA_N:6:result_uint32x2 [] = { 1684, 1685,  }
VMLA_N:7:result_uint64x1 [] = { 3333333333333333,  }
VMLA_N:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLA_N:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLA_N:10:result_float32x2 [] = { 4497deb8, 4497feb8,  }
VMLA_N:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMLA_N:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLA_N:13:result_int16x8 [] = { 1c29, 1c2a, 1c2b, 1c2c, 1c2d, 1c2e, 1c2f, 1c30,  }
VMLA_N:14:result_int32x4 [] = { 21ce, 21cf, 21d0, 21d1,  }
VMLA_N:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VMLA_N:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLA_N:17:result_uint16x8 [] = { 2773, 2774, 2775, 2776, 2777, 2778, 2779, 277a,  }
VMLA_N:18:result_uint32x4 [] = { 2d18, 2d19, 2d1a, 2d1b,  }
VMLA_N:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VMLA_N:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLA_N:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLA_N:22:result_float32x4 [] = { 4568087b, 4568187b, 4568287b, 4568387b,  }
VMLA_N:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMLS_N output:
VMLS_N:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLS_N:1:result_int16x4 [] = { fffffa4b, fffffa4c, fffffa4d, fffffa4e,  }
VMLS_N:2:result_int32x2 [] = { fffff4a6, fffff4a7,  }
VMLS_N:3:result_int64x1 [] = { 3333333333333333,  }
VMLS_N:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLS_N:5:result_uint16x4 [] = { ef01, ef02, ef03, ef04,  }
VMLS_N:6:result_uint32x2 [] = { ffffe95c, ffffe95d,  }
VMLS_N:7:result_uint64x1 [] = { 3333333333333333,  }
VMLS_N:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLS_N:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMLS_N:10:result_float32x2 [] = { c49bdeb8, c49bbeb8,  }
VMLS_N:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMLS_N:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLS_N:13:result_int16x8 [] = { ffffe3b7, ffffe3b8, ffffe3b9, ffffe3ba, ffffe3bb, ffffe3bc, ffffe3bd, ffffe3be,  }
VMLS_N:14:result_int32x4 [] = { ffffde12, ffffde13, ffffde14, ffffde15,  }
VMLS_N:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VMLS_N:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLS_N:17:result_uint16x8 [] = { d86d, d86e, d86f, d870, d871, d872, d873, d874,  }
VMLS_N:18:result_uint32x4 [] = { ffffd2c8, ffffd2c9, ffffd2ca, ffffd2cb,  }
VMLS_N:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VMLS_N:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VMLS_N:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMLS_N:22:result_float32x4 [] = { c56a087b, c569f87b, c569e87b, c569d87b,  }
VMLS_N:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VSLI_N output:
VSLI_N:0:result_int8x8 [] = { 20, 21, 22, 23, 24, 25, 26, 27,  }
VSLI_N:1:result_int16x4 [] = { ffffffe0, ffffffe1, ffffffe2, ffffffe3,  }
VSLI_N:2:result_int32x2 [] = { 6, 7,  }
VSLI_N:3:result_int64x1 [] = { 64fffffff0,  }
VSLI_N:4:result_uint8x8 [] = { 50, 51, 52, 53, 50, 51, 52, 53,  }
VSLI_N:5:result_uint16x4 [] = { 7bf0, 7bf1, 7bf2, 7bf3,  }
VSLI_N:6:result_uint32x2 [] = { 3ffffff0, 3ffffff1,  }
VSLI_N:7:result_uint64x1 [] = { 10,  }
VSLI_N:8:result_poly8x8 [] = { 50, 51, 52, 53, 50, 51, 52, 53,  }
VSLI_N:9:result_poly16x4 [] = { 7bf0, 7bf1, 7bf2, 7bf3,  }
VSLI_N:10:result_float32x2 [] = { 33333333, 33333333,  }
VSLI_N:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VSLI_N:12:result_int8x16 [] = { ffffffd0, ffffffd1, ffffffd2, ffffffd3, ffffffd4, ffffffd5, ffffffd6, ffffffd7, ffffffd8, ffffffd9, ffffffda, ffffffdb, ffffffdc, ffffffdd, ffffffde, ffffffdf,  }
VSLI_N:13:result_int16x8 [] = { ffffff60, ffffff61, ffffff62, ffffff63, ffffff64, ffffff65, ffffff66, ffffff67,  }
VSLI_N:14:result_int32x4 [] = { fe2ffff0, fe2ffff1, fe2ffff2, fe2ffff3,  }
VSLI_N:15:result_int64x2 [] = { 18fff0, 18fff1,  }
VSLI_N:16:result_uint8x16 [] = { 60, 61, 62, 63, 64, 65, 66, 67, 60, 61, 62, 63, 64, 65, 66, 67,  }
VSLI_N:17:result_uint16x8 [] = { 3ff0, 3ff1, 3ff2, 3ff3, 3ff4, 3ff5, 3ff6, 3ff7,  }
VSLI_N:18:result_uint32x4 [] = { 1bfffff0, 1bfffff1, 1bfffff2, 1bfffff3,  }
VSLI_N:19:result_uint64x2 [] = { 7ffffffffffff0, 7ffffffffffff1,  }
VSLI_N:20:result_poly8x16 [] = { 60, 61, 62, 63, 64, 65, 66, 67, 60, 61, 62, 63, 64, 65, 66, 67,  }
VSLI_N:21:result_poly16x8 [] = { 3ff0, 3ff1, 3ff2, 3ff3, 3ff4, 3ff5, 3ff6, 3ff7,  }
VSLI_N:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSLI_N:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VSLI_Nmax shift amount output:
VSLI_N:0:result_int8x8 [] = { 70, 71, 72, 73, 74, 75, 76, 77,  }
VSLI_N:1:result_int16x4 [] = { 7ff0, 7ff1, 7ff2, 7ff3,  }
VSLI_N:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VSLI_N:3:result_int64x1 [] = { 7ffffffffffffff0,  }
VSLI_N:4:result_uint8x8 [] = { 70, 71, 72, 73, 74, 75, 76, 77,  }
VSLI_N:5:result_uint16x4 [] = { 7ff0, 7ff1, 7ff2, 7ff3,  }
VSLI_N:6:result_uint32x2 [] = { 7ffffff0, 7ffffff1,  }
VSLI_N:7:result_uint64x1 [] = { 7ffffffffffffff0,  }
VSLI_N:8:result_poly8x8 [] = { 70, 71, 72, 73, 74, 75, 76, 77,  }
VSLI_N:9:result_poly16x4 [] = { 7ff0, 7ff1, 7ff2, 7ff3,  }
VSLI_N:10:result_float32x2 [] = { 33333333, 33333333,  }
VSLI_N:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VSLI_N:12:result_int8x16 [] = { 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 7a, 7b, 7c, 7d, 7e, 7f,  }
VSLI_N:13:result_int16x8 [] = { 7ff0, 7ff1, 7ff2, 7ff3, 7ff4, 7ff5, 7ff6, 7ff7,  }
VSLI_N:14:result_int32x4 [] = { 7ffffff0, 7ffffff1, 7ffffff2, 7ffffff3,  }
VSLI_N:15:result_int64x2 [] = { 7ffffffffffffff0, 7ffffffffffffff1,  }
VSLI_N:16:result_uint8x16 [] = { 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 7a, 7b, 7c, 7d, 7e, 7f,  }
VSLI_N:17:result_uint16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, fff6, fff7,  }
VSLI_N:18:result_uint32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VSLI_N:19:result_uint64x2 [] = { fffffffffffffff0, fffffffffffffff1,  }
VSLI_N:20:result_poly8x16 [] = { 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 7a, 7b, 7c, 7d, 7e, 7f,  }
VSLI_N:21:result_poly16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, fff6, fff7,  }
VSLI_N:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSLI_N:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VSRI_N output:
VSRI_N:0:result_int8x8 [] = { fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0,  }
VSRI_N:1:result_int16x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }
VSRI_N:2:result_int32x2 [] = { 80000001, 80000001,  }
VSRI_N:3:result_int64x1 [] = { ffffffff00000000,  }
VSRI_N:4:result_uint8x8 [] = { c5, c5, c5, c5, c5, c5, c5, c5,  }
VSRI_N:5:result_uint16x4 [] = { ffc0, ffc0, ffc0, ffc0,  }
VSRI_N:6:result_uint32x2 [] = { fffffff0, fffffff0,  }
VSRI_N:7:result_uint64x1 [] = { e000000000000000,  }
VSRI_N:8:result_poly8x8 [] = { c5, c5, c5, c5, c5, c5, c5, c5,  }
VSRI_N:9:result_poly16x4 [] = { ffc0, ffc0, ffc0, ffc0,  }
VSRI_N:10:result_float32x2 [] = { 33333333, 33333333,  }
VSRI_N:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VSRI_N:12:result_int8x16 [] = { fffffff7, fffffff7, fffffff7, fffffff7, fffffff7, fffffff7, fffffff7, fffffff7, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff, ffffffff,  }
VSRI_N:13:result_int16x8 [] = { fffffffd, fffffffd, fffffffd, fffffffd, fffffffd, fffffffd, fffffffd, fffffffd,  }
VSRI_N:14:result_int32x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }
VSRI_N:15:result_int64x2 [] = { ffff000000000000, ffff000000000000,  }
VSRI_N:16:result_uint8x16 [] = { e1, e1, e1, e1, e1, e1, e1, e1, e1, e1, e1, e1, e1, e1, e1, e1,  }
VSRI_N:17:result_uint16x8 [] = { fff0, fff0, fff0, fff0, fff0, fff0, fff0, fff0,  }
VSRI_N:18:result_uint32x4 [] = { fffffe00, fffffe00, fffffe00, fffffe00,  }
VSRI_N:19:result_uint64x2 [] = { fffffffffffff800, fffffffffffff800,  }
VSRI_N:20:result_poly8x16 [] = { e1, e1, e1, e1, e1, e1, e1, e1, e1, e1, e1, e1, e1, e1, e1, e1,  }
VSRI_N:21:result_poly16x8 [] = { fff0, fff0, fff0, fff0, fff0, fff0, fff0, fff0,  }
VSRI_N:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSRI_N:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VSRI_N max shift amount output:
VSRI_N:0:result_int8x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VSRI_N:1:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VSRI_N:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VSRI_N:3:result_int64x1 [] = { fffffffffffffff0,  }
VSRI_N:4:result_uint8x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VSRI_N:5:result_uint16x4 [] = { fff0, fff1, fff2, fff3,  }
VSRI_N:6:result_uint32x2 [] = { fffffff0, fffffff1,  }
VSRI_N:7:result_uint64x1 [] = { fffffffffffffff0,  }
VSRI_N:8:result_poly8x8 [] = { f0, f1, f2, f3, f4, f5, f6, f7,  }
VSRI_N:9:result_poly16x4 [] = { fff0, fff1, fff2, fff3,  }
VSRI_N:10:result_float32x2 [] = { 33333333, 33333333,  }
VSRI_N:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VSRI_N:12:result_int8x16 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7, fffffff8, fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff,  }
VSRI_N:13:result_int16x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VSRI_N:14:result_int32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VSRI_N:15:result_int64x2 [] = { fffffffffffffff0, fffffffffffffff1,  }
VSRI_N:16:result_uint8x16 [] = { f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fa, fb, fc, fd, fe, ff,  }
VSRI_N:17:result_uint16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, fff6, fff7,  }
VSRI_N:18:result_uint32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VSRI_N:19:result_uint64x2 [] = { fffffffffffffff0, fffffffffffffff1,  }
VSRI_N:20:result_poly8x16 [] = { f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fa, fb, fc, fd, fe, ff,  }
VSRI_N:21:result_poly16x8 [] = { fff0, fff1, fff2, fff3, fff4, fff5, fff6, fff7,  }
VSRI_N:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSRI_N:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VTST/VTSTQ (signed input) output:
VTST/VTSTQ:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VTST/VTSTQ:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VTST/VTSTQ:2:result_int32x2 [] = { 33333333, 33333333,  }
VTST/VTSTQ:3:result_int64x1 [] = { 3333333333333333,  }
VTST/VTSTQ:4:result_uint8x8 [] = { 0, ff, ff, ff, ff, ff, ff, ff,  }
VTST/VTSTQ:5:result_uint16x4 [] = { 0, ffff, 0, ffff,  }
VTST/VTSTQ:6:result_uint32x2 [] = { 0, ffffffff,  }
VTST/VTSTQ:7:result_uint64x1 [] = { 3333333333333333,  }
VTST/VTSTQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VTST/VTSTQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VTST/VTSTQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VTST/VTSTQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VTST/VTSTQ:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTST/VTSTQ:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTST/VTSTQ:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTST/VTSTQ:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VTST/VTSTQ:16:result_uint8x16 [] = { 0, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff,  }
VTST/VTSTQ:17:result_uint16x8 [] = { 0, ffff, 0, ffff, ffff, ffff, ffff, ffff,  }
VTST/VTSTQ:18:result_uint32x4 [] = { 0, ffffffff, 0, ffffffff,  }
VTST/VTSTQ:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VTST/VTSTQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTST/VTSTQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTST/VTSTQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTST/VTSTQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VTST/VTSTQ (unsigned input) output:
VTST/VTSTQ:24:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VTST/VTSTQ:25:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VTST/VTSTQ:26:result_int32x2 [] = { 33333333, 33333333,  }
VTST/VTSTQ:27:result_int64x1 [] = { 3333333333333333,  }
VTST/VTSTQ:28:result_uint8x8 [] = { 0, ff, ff, ff, ff, ff, ff, ff,  }
VTST/VTSTQ:29:result_uint16x4 [] = { 0, ffff, 0, ffff,  }
VTST/VTSTQ:30:result_uint32x2 [] = { 0, ffffffff,  }
VTST/VTSTQ:31:result_uint64x1 [] = { 3333333333333333,  }
VTST/VTSTQ:32:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VTST/VTSTQ:33:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VTST/VTSTQ:34:result_float32x2 [] = { 33333333, 33333333,  }
VTST/VTSTQ:35:result_float16x4 [] = { 0, 0, 0, 0,  }
VTST/VTSTQ:36:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTST/VTSTQ:37:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTST/VTSTQ:38:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTST/VTSTQ:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VTST/VTSTQ:40:result_uint8x16 [] = { 0, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff,  }
VTST/VTSTQ:41:result_uint16x8 [] = { 0, ffff, 0, ffff, ffff, ffff, ffff, ffff,  }
VTST/VTSTQ:42:result_uint32x4 [] = { 0, ffffffff, 0, ffffffff,  }
VTST/VTSTQ:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VTST/VTSTQ:44:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTST/VTSTQ:45:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTST/VTSTQ:46:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTST/VTSTQ:47:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VADDHN output:
VADDHN:0:result_int8x8 [] = { 32, 32, 32, 32, 32, 32, 32, 32,  }
VADDHN:1:result_int16x4 [] = { 32, 32, 32, 32,  }
VADDHN:2:result_int32x2 [] = { 18, 18,  }
VADDHN:3:result_int64x1 [] = { 3333333333333333,  }
VADDHN:4:result_uint8x8 [] = { 3, 3, 3, 3, 3, 3, 3, 3,  }
VADDHN:5:result_uint16x4 [] = { 37, 37, 37, 37,  }
VADDHN:6:result_uint32x2 [] = { 3, 3,  }
VADDHN:7:result_uint64x1 [] = { 3333333333333333,  }
VADDHN:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VADDHN:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VADDHN:10:result_float32x2 [] = { 33333333, 33333333,  }
VADDHN:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VADDHN:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VADDHN:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VADDHN:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VADDHN:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VADDHN:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VADDHN:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VADDHN:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VADDHN:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VADDHN:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VADDHN:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VADDHN:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VADDHN:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRADDHN output:
VRADDHN:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRADDHN:1:result_int16x4 [] = { 33, 33, 33, 33,  }
VRADDHN:2:result_int32x2 [] = { 19, 19,  }
VRADDHN:3:result_int64x1 [] = { 3333333333333333,  }
VRADDHN:4:result_uint8x8 [] = { 4, 4, 4, 4, 4, 4, 4, 4,  }
VRADDHN:5:result_uint16x4 [] = { 38, 38, 38, 38,  }
VRADDHN:6:result_uint32x2 [] = { 4, 4,  }
VRADDHN:7:result_uint64x1 [] = { 3333333333333333,  }
VRADDHN:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRADDHN:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRADDHN:10:result_float32x2 [] = { 33333333, 33333333,  }
VRADDHN:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VRADDHN:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRADDHN:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRADDHN:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRADDHN:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VRADDHN:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRADDHN:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRADDHN:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRADDHN:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VRADDHN:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRADDHN:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRADDHN:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRADDHN:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VADDL output:
VADDL:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VADDL:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VADDL:2:result_int32x2 [] = { 33333333, 33333333,  }
VADDL:3:result_int64x1 [] = { 3333333333333333,  }
VADDL:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VADDL:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VADDL:6:result_uint32x2 [] = { 33333333, 33333333,  }
VADDL:7:result_uint64x1 [] = { 3333333333333333,  }
VADDL:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VADDL:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VADDL:10:result_float32x2 [] = { 33333333, 33333333,  }
VADDL:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VADDL:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VADDL:13:result_int16x8 [] = { ffffffe3, ffffffe4, ffffffe5, ffffffe6, ffffffe7, ffffffe8, ffffffe9, ffffffea,  }
VADDL:14:result_int32x4 [] = { ffffffe2, ffffffe3, ffffffe4, ffffffe5,  }
VADDL:15:result_int64x2 [] = { ffffffffffffffe0, ffffffffffffffe1,  }
VADDL:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VADDL:17:result_uint16x8 [] = { 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1ea,  }
VADDL:18:result_uint32x4 [] = { 1ffe1, 1ffe2, 1ffe3, 1ffe4,  }
VADDL:19:result_uint64x2 [] = { 1ffffffe0, 1ffffffe1,  }
VADDL:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VADDL:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VADDL:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VADDL:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VADDW output:
VADDW:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VADDW:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VADDW:2:result_int32x2 [] = { 33333333, 33333333,  }
VADDW:3:result_int64x1 [] = { 3333333333333333,  }
VADDW:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VADDW:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VADDW:6:result_uint32x2 [] = { 33333333, 33333333,  }
VADDW:7:result_uint64x1 [] = { 3333333333333333,  }
VADDW:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VADDW:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VADDW:10:result_float32x2 [] = { 33333333, 33333333,  }
VADDW:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VADDW:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VADDW:13:result_int16x8 [] = { ffffffe3, ffffffe4, ffffffe5, ffffffe6, ffffffe7, ffffffe8, ffffffe9, ffffffea,  }
VADDW:14:result_int32x4 [] = { ffffffe2, ffffffe3, ffffffe4, ffffffe5,  }
VADDW:15:result_int64x2 [] = { ffffffffffffffe0, ffffffffffffffe1,  }
VADDW:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VADDW:17:result_uint16x8 [] = { e3, e4, e5, e6, e7, e8, e9, ea,  }
VADDW:18:result_uint32x4 [] = { ffe1, ffe2, ffe3, ffe4,  }
VADDW:19:result_uint64x2 [] = { ffffffe0, ffffffe1,  }
VADDW:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VADDW:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VADDW:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VADDW:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VHADD/VHADDQ output:
VHADD/VHADDQ:0:result_int8x8 [] = { fffffff1, fffffff2, fffffff2, fffffff3, fffffff3, fffffff4, fffffff4, fffffff5,  }
VHADD/VHADDQ:1:result_int16x4 [] = { fffffff1, fffffff1, fffffff2, fffffff2,  }
VHADD/VHADDQ:2:result_int32x2 [] = { fffffff0, fffffff0,  }
VHADD/VHADDQ:3:result_int64x1 [] = { 3333333333333333,  }
VHADD/VHADDQ:4:result_uint8x8 [] = { f1, f2, f2, f3, f3, f4, f4, f5,  }
VHADD/VHADDQ:5:result_uint16x4 [] = { fff0, fff1, fff1, fff2,  }
VHADD/VHADDQ:6:result_uint32x2 [] = { fffffff0, fffffff0,  }
VHADD/VHADDQ:7:result_uint64x1 [] = { 3333333333333333,  }
VHADD/VHADDQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VHADD/VHADDQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VHADD/VHADDQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VHADD/VHADDQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VHADD/VHADDQ:12:result_int8x16 [] = { fffffff2, fffffff2, fffffff3, fffffff3, fffffff4, fffffff4, fffffff5, fffffff5, fffffff6, fffffff6, fffffff7, fffffff7, fffffff8, fffffff8, fffffff9, fffffff9,  }
VHADD/VHADDQ:13:result_int16x8 [] = { fffffff1, fffffff2, fffffff2, fffffff3, fffffff3, fffffff4, fffffff4, fffffff5,  }
VHADD/VHADDQ:14:result_int32x4 [] = { fffffff0, fffffff1, fffffff1, fffffff2,  }
VHADD/VHADDQ:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VHADD/VHADDQ:16:result_uint8x16 [] = { f4, f5, f5, f6, f6, f7, f7, f8, f8, f9, f9, fa, fa, fb, fb, fc,  }
VHADD/VHADDQ:17:result_uint16x8 [] = { fff1, fff1, fff2, fff2, fff3, fff3, fff4, fff4,  }
VHADD/VHADDQ:18:result_uint32x4 [] = { fffffff0, fffffff1, fffffff1, fffffff2,  }
VHADD/VHADDQ:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VHADD/VHADDQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VHADD/VHADDQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VHADD/VHADDQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VHADD/VHADDQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRHADD/VRHADDQ output:
VRHADD/VRHADDQ:0:result_int8x8 [] = { fffffff2, fffffff2, fffffff3, fffffff3, fffffff4, fffffff4, fffffff5, fffffff5,  }
VRHADD/VRHADDQ:1:result_int16x4 [] = { fffffff1, fffffff2, fffffff2, fffffff3,  }
VRHADD/VRHADDQ:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VRHADD/VRHADDQ:3:result_int64x1 [] = { 3333333333333333,  }
VRHADD/VRHADDQ:4:result_uint8x8 [] = { f2, f2, f3, f3, f4, f4, f5, f5,  }
VRHADD/VRHADDQ:5:result_uint16x4 [] = { fff1, fff1, fff2, fff2,  }
VRHADD/VRHADDQ:6:result_uint32x2 [] = { fffffff0, fffffff1,  }
VRHADD/VRHADDQ:7:result_uint64x1 [] = { 3333333333333333,  }
VRHADD/VRHADDQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRHADD/VRHADDQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRHADD/VRHADDQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VRHADD/VRHADDQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VRHADD/VRHADDQ:12:result_int8x16 [] = { fffffff2, fffffff3, fffffff3, fffffff4, fffffff4, fffffff5, fffffff5, fffffff6, fffffff6, fffffff7, fffffff7, fffffff8, fffffff8, fffffff9, fffffff9, fffffffa,  }
VRHADD/VRHADDQ:13:result_int16x8 [] = { fffffff2, fffffff2, fffffff3, fffffff3, fffffff4, fffffff4, fffffff5, fffffff5,  }
VRHADD/VRHADDQ:14:result_int32x4 [] = { fffffff1, fffffff1, fffffff2, fffffff2,  }
VRHADD/VRHADDQ:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VRHADD/VRHADDQ:16:result_uint8x16 [] = { f5, f5, f6, f6, f7, f7, f8, f8, f9, f9, fa, fa, fb, fb, fc, fc,  }
VRHADD/VRHADDQ:17:result_uint16x8 [] = { fff1, fff2, fff2, fff3, fff3, fff4, fff4, fff5,  }
VRHADD/VRHADDQ:18:result_uint32x4 [] = { fffffff1, fffffff1, fffffff2, fffffff2,  }
VRHADD/VRHADDQ:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VRHADD/VRHADDQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRHADD/VRHADDQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRHADD/VRHADDQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRHADD/VRHADDQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VHSUB/VHSUBQ output:
VHSUB/VHSUBQ:0:result_int8x8 [] = { fffffffe, ffffffff, ffffffff, 0, 0, 1, 1, 2,  }
VHSUB/VHSUBQ:1:result_int16x4 [] = { ffffffff, ffffffff, 0, 0,  }
VHSUB/VHSUBQ:2:result_int32x2 [] = { 0, 0,  }
VHSUB/VHSUBQ:3:result_int64x1 [] = { 3333333333333333,  }
VHSUB/VHSUBQ:4:result_uint8x8 [] = { fe, ff, ff, 0, 0, 1, 1, 2,  }
VHSUB/VHSUBQ:5:result_uint16x4 [] = { ffff, 0, 0, 1,  }
VHSUB/VHSUBQ:6:result_uint32x2 [] = { 0, 0,  }
VHSUB/VHSUBQ:7:result_uint64x1 [] = { 3333333333333333,  }
VHSUB/VHSUBQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VHSUB/VHSUBQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VHSUB/VHSUBQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VHSUB/VHSUBQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VHSUB/VHSUBQ:12:result_int8x16 [] = { fffffffe, fffffffe, ffffffff, ffffffff, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5,  }
VHSUB/VHSUBQ:13:result_int16x8 [] = { fffffffe, ffffffff, ffffffff, 0, 0, 1, 1, 2,  }
VHSUB/VHSUBQ:14:result_int32x4 [] = { ffffffff, 0, 0, 1,  }
VHSUB/VHSUBQ:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VHSUB/VHSUBQ:16:result_uint8x16 [] = { fb, fc, fc, fd, fd, fe, fe, ff, ff, 0, 0, 1, 1, 2, 2, 3,  }
VHSUB/VHSUBQ:17:result_uint16x8 [] = { ffff, ffff, 0, 0, 1, 1, 2, 2,  }
VHSUB/VHSUBQ:18:result_uint32x4 [] = { ffffffff, 0, 0, 1,  }
VHSUB/VHSUBQ:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VHSUB/VHSUBQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VHSUB/VHSUBQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VHSUB/VHSUBQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VHSUB/VHSUBQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VSUBL output:
VSUBL:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VSUBL:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VSUBL:2:result_int32x2 [] = { 33333333, 33333333,  }
VSUBL:3:result_int64x1 [] = { 3333333333333333,  }
VSUBL:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VSUBL:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VSUBL:6:result_uint32x2 [] = { 33333333, 33333333,  }
VSUBL:7:result_uint64x1 [] = { 3333333333333333,  }
VSUBL:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VSUBL:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VSUBL:10:result_float32x2 [] = { 33333333, 33333333,  }
VSUBL:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VSUBL:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSUBL:13:result_int16x8 [] = { fffffffd, fffffffe, ffffffff, 0, 1, 2, 3, 4,  }
VSUBL:14:result_int32x4 [] = { fffffffe, ffffffff, 0, 1,  }
VSUBL:15:result_int64x2 [] = { 0, 1,  }
VSUBL:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSUBL:17:result_uint16x8 [] = { fffd, fffe, ffff, 0, 1, 2, 3, 4,  }
VSUBL:18:result_uint32x4 [] = { ffffffff, 0, 1, 2,  }
VSUBL:19:result_uint64x2 [] = { 0, 1,  }
VSUBL:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSUBL:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VSUBL:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSUBL:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VSUBW output:
VSUBW:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VSUBW:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VSUBW:2:result_int32x2 [] = { 33333333, 33333333,  }
VSUBW:3:result_int64x1 [] = { 3333333333333333,  }
VSUBW:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VSUBW:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VSUBW:6:result_uint32x2 [] = { 33333333, 33333333,  }
VSUBW:7:result_uint64x1 [] = { 3333333333333333,  }
VSUBW:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VSUBW:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VSUBW:10:result_float32x2 [] = { 33333333, 33333333,  }
VSUBW:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VSUBW:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSUBW:13:result_int16x8 [] = { fffffffd, fffffffe, ffffffff, 0, 1, 2, 3, 4,  }
VSUBW:14:result_int32x4 [] = { fffffffe, ffffffff, 0, 1,  }
VSUBW:15:result_int64x2 [] = { 0, 1,  }
VSUBW:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSUBW:17:result_uint16x8 [] = { fefd, fefe, feff, ff00, ff01, ff02, ff03, ff04,  }
VSUBW:18:result_uint32x4 [] = { fffeffff, ffff0000, ffff0001, ffff0002,  }
VSUBW:19:result_uint64x2 [] = { ffffffff00000000, ffffffff00000001,  }
VSUBW:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSUBW:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VSUBW:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSUBW:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VSUBHN output:
VSUBHN:0:result_int8x8 [] = { 31, 31, 31, 31, 31, 31, 31, 31,  }
VSUBHN:1:result_int16x4 [] = { 31, 31, 31, 31,  }
VSUBHN:2:result_int32x2 [] = { 17, 17,  }
VSUBHN:3:result_int64x1 [] = { 3333333333333333,  }
VSUBHN:4:result_uint8x8 [] = { 2, 2, 2, 2, 2, 2, 2, 2,  }
VSUBHN:5:result_uint16x4 [] = { 36, 36, 36, 36,  }
VSUBHN:6:result_uint32x2 [] = { 2, 2,  }
VSUBHN:7:result_uint64x1 [] = { 3333333333333333,  }
VSUBHN:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VSUBHN:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VSUBHN:10:result_float32x2 [] = { 33333333, 33333333,  }
VSUBHN:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VSUBHN:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSUBHN:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VSUBHN:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSUBHN:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VSUBHN:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSUBHN:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VSUBHN:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSUBHN:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VSUBHN:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSUBHN:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VSUBHN:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSUBHN:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSUBHN output:
VRSUBHN:0:result_int8x8 [] = { 31, 31, 31, 31, 31, 31, 31, 31,  }
VRSUBHN:1:result_int16x4 [] = { 31, 31, 31, 31,  }
VRSUBHN:2:result_int32x2 [] = { 17, 17,  }
VRSUBHN:3:result_int64x1 [] = { 3333333333333333,  }
VRSUBHN:4:result_uint8x8 [] = { 2, 2, 2, 2, 2, 2, 2, 2,  }
VRSUBHN:5:result_uint16x4 [] = { 36, 36, 36, 36,  }
VRSUBHN:6:result_uint32x2 [] = { 2, 2,  }
VRSUBHN:7:result_uint64x1 [] = { 3333333333333333,  }
VRSUBHN:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSUBHN:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSUBHN:10:result_float32x2 [] = { 33333333, 33333333,  }
VRSUBHN:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSUBHN:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSUBHN:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSUBHN:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSUBHN:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VRSUBHN:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSUBHN:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSUBHN:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSUBHN:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VRSUBHN:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSUBHN:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSUBHN:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSUBHN:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VMVN/VMVNQ output:
VMVN/VMVNQ:0:result_int8x8 [] = { f, e, d, c, b, a, 9, 8,  }
VMVN/VMVNQ:1:result_int16x4 [] = { f, e, d, c,  }
VMVN/VMVNQ:2:result_int32x2 [] = { f, e,  }
VMVN/VMVNQ:3:result_int64x1 [] = { 3333333333333333,  }
VMVN/VMVNQ:4:result_uint8x8 [] = { f, e, d, c, b, a, 9, 8,  }
VMVN/VMVNQ:5:result_uint16x4 [] = { f, e, d, c,  }
VMVN/VMVNQ:6:result_uint32x2 [] = { f, e,  }
VMVN/VMVNQ:7:result_uint64x1 [] = { 3333333333333333,  }
VMVN/VMVNQ:8:result_poly8x8 [] = { f, e, d, c, b, a, 9, 8,  }
VMVN/VMVNQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VMVN/VMVNQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VMVN/VMVNQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VMVN/VMVNQ:12:result_int8x16 [] = { f, e, d, c, b, a, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,  }
VMVN/VMVNQ:13:result_int16x8 [] = { f, e, d, c, b, a, 9, 8,  }
VMVN/VMVNQ:14:result_int32x4 [] = { f, e, d, c,  }
VMVN/VMVNQ:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VMVN/VMVNQ:16:result_uint8x16 [] = { f, e, d, c, b, a, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,  }
VMVN/VMVNQ:17:result_uint16x8 [] = { f, e, d, c, b, a, 9, 8,  }
VMVN/VMVNQ:18:result_uint32x4 [] = { f, e, d, c,  }
VMVN/VMVNQ:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VMVN/VMVNQ:20:result_poly8x16 [] = { f, e, d, c, b, a, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,  }
VMVN/VMVNQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VMVN/VMVNQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VMVN/VMVNQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQMOVN cumulative saturation output:
VQMOVN:0:vqmovn_s16 Neon cumulative saturation 0
VQMOVN:1:vqmovn_s32 Neon cumulative saturation 0
VQMOVN:2:vqmovn_s64 Neon cumulative saturation 0
VQMOVN:3:vqmovn_u16 Neon cumulative saturation 0
VQMOVN:4:vqmovn_u32 Neon cumulative saturation 0
VQMOVN:5:vqmovn_u64 Neon cumulative saturation 0

VQMOVN output:
VQMOVN:6:result_int8x8 [] = { 12, 12, 12, 12, 12, 12, 12, 12,  }
VQMOVN:7:result_int16x4 [] = { 1278, 1278, 1278, 1278,  }
VQMOVN:8:result_int32x2 [] = { 12345678, 12345678,  }
VQMOVN:9:result_int64x1 [] = { 3333333333333333,  }
VQMOVN:10:result_uint8x8 [] = { 82, 82, 82, 82, 82, 82, 82, 82,  }
VQMOVN:11:result_uint16x4 [] = { 8765, 8765, 8765, 8765,  }
VQMOVN:12:result_uint32x2 [] = { 87654321, 87654321,  }
VQMOVN:13:result_uint64x1 [] = { 3333333333333333,  }
VQMOVN:14:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQMOVN:15:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQMOVN:16:result_float32x2 [] = { 33333333, 33333333,  }
VQMOVN:17:result_float16x4 [] = { 0, 0, 0, 0,  }
VQMOVN:18:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQMOVN:19:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQMOVN:20:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQMOVN:21:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQMOVN:22:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQMOVN:23:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQMOVN:24:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQMOVN:25:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQMOVN:26:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQMOVN:27:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQMOVN:28:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQMOVN:29:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQMOVN cumulative saturation output:
VQMOVN:30:vqmovn_s16 Neon cumulative saturation 1
VQMOVN:31:vqmovn_s32 Neon cumulative saturation 1
VQMOVN:32:vqmovn_s64 Neon cumulative saturation 1
VQMOVN:33:vqmovn_u16 Neon cumulative saturation 1
VQMOVN:34:vqmovn_u32 Neon cumulative saturation 1
VQMOVN:35:vqmovn_u64 Neon cumulative saturation 1

VQMOVN output:
VQMOVN:36:result_int8x8 [] = { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f,  }
VQMOVN:37:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQMOVN:38:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQMOVN:39:result_int64x1 [] = { 3333333333333333,  }
VQMOVN:40:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQMOVN:41:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQMOVN:42:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQMOVN:43:result_uint64x1 [] = { 3333333333333333,  }
VQMOVN:44:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQMOVN:45:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQMOVN:46:result_float32x2 [] = { 33333333, 33333333,  }
VQMOVN:47:result_float16x4 [] = { 0, 0, 0, 0,  }
VQMOVN:48:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQMOVN:49:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQMOVN:50:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQMOVN:51:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQMOVN:52:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQMOVN:53:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQMOVN:54:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQMOVN:55:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQMOVN:56:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQMOVN:57:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQMOVN:58:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQMOVN:59:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQMOVUN cumulative saturation output:
VQMOVUN:0:vqmovun_s16 Neon cumulative saturation 0
VQMOVUN:1:vqmovun_s32 Neon cumulative saturation 0
VQMOVUN:2:vqmovun_s64 Neon cumulative saturation 0

VQMOVUN output:
VQMOVUN:3:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQMOVUN:4:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQMOVUN:5:result_int32x2 [] = { 33333333, 33333333,  }
VQMOVUN:6:result_int64x1 [] = { 3333333333333333,  }
VQMOVUN:7:result_uint8x8 [] = { 34, 34, 34, 34, 34, 34, 34, 34,  }
VQMOVUN:8:result_uint16x4 [] = { 5678, 5678, 5678, 5678,  }
VQMOVUN:9:result_uint32x2 [] = { 12345678, 12345678,  }
VQMOVUN:10:result_uint64x1 [] = { 3333333333333333,  }
VQMOVUN:11:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQMOVUN:12:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQMOVUN:13:result_float32x2 [] = { 33333333, 33333333,  }
VQMOVUN:14:result_float16x4 [] = { 0, 0, 0, 0,  }
VQMOVUN:15:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQMOVUN:16:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQMOVUN:17:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQMOVUN:18:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQMOVUN:19:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQMOVUN:20:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQMOVUN:21:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQMOVUN:22:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQMOVUN:23:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQMOVUN:24:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQMOVUN:25:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQMOVUN:26:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQMOVUN (negative input) cumulative saturation output:
VQMOVUN:27:vqmovun_s16 Neon cumulative saturation 1
VQMOVUN:28:vqmovun_s32 Neon cumulative saturation 1
VQMOVUN:29:vqmovun_s64 Neon cumulative saturation 1

VQMOVUN (negative input) output:
VQMOVUN:30:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQMOVUN:31:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQMOVUN:32:result_int32x2 [] = { 33333333, 33333333,  }
VQMOVUN:33:result_int64x1 [] = { 3333333333333333,  }
VQMOVUN:34:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQMOVUN:35:result_uint16x4 [] = { 0, 0, 0, 0,  }
VQMOVUN:36:result_uint32x2 [] = { 0, 0,  }
VQMOVUN:37:result_uint64x1 [] = { 3333333333333333,  }
VQMOVUN:38:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQMOVUN:39:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQMOVUN:40:result_float32x2 [] = { 33333333, 33333333,  }
VQMOVUN:41:result_float16x4 [] = { 0, 0, 0, 0,  }
VQMOVUN:42:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQMOVUN:43:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQMOVUN:44:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQMOVUN:45:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQMOVUN:46:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQMOVUN:47:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQMOVUN:48:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQMOVUN:49:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQMOVUN:50:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQMOVUN:51:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQMOVUN:52:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQMOVUN:53:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSHR_N output:
VRSHR_N:0:result_int8x8 [] = { fffffff8, fffffff9, fffffff9, fffffffa, fffffffa, fffffffb, fffffffb, fffffffc,  }
VRSHR_N:1:result_int16x4 [] = { 0, 0, 0, 0,  }
VRSHR_N:2:result_int32x2 [] = { fffffffc, fffffffc,  }
VRSHR_N:3:result_int64x1 [] = { 0,  }
VRSHR_N:4:result_uint8x8 [] = { 3c, 3c, 3d, 3d, 3d, 3d, 3e, 3e,  }
VRSHR_N:5:result_uint16x4 [] = { 1ffe, 1ffe, 1ffe, 1ffe,  }
VRSHR_N:6:result_uint32x2 [] = { 8000000, 8000000,  }
VRSHR_N:7:result_uint64x1 [] = { 80000000,  }
VRSHR_N:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHR_N:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSHR_N:10:result_float32x2 [] = { 33333333, 33333333,  }
VRSHR_N:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSHR_N:12:result_int8x16 [] = { fffffff8, fffffff9, fffffff9, fffffffa, fffffffa, fffffffb, fffffffb, fffffffc, fffffffc, fffffffd, fffffffd, fffffffe, fffffffe, ffffffff, ffffffff, 0,  }
VRSHR_N:13:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHR_N:14:result_int32x4 [] = { fffffffc, fffffffc, fffffffd, fffffffd,  }
VRSHR_N:15:result_int64x2 [] = { 0, 0,  }
VRSHR_N:16:result_uint8x16 [] = { 3c, 3c, 3d, 3d, 3d, 3d, 3e, 3e, 3e, 3e, 3f, 3f, 3f, 3f, 40, 40,  }
VRSHR_N:17:result_uint16x8 [] = { 1ffe, 1ffe, 1ffe, 1ffe, 1fff, 1fff, 1fff, 1fff,  }
VRSHR_N:18:result_uint32x4 [] = { 8000000, 8000000, 8000000, 8000000,  }
VRSHR_N:19:result_uint64x2 [] = { 80000000, 80000000,  }
VRSHR_N:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHR_N:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHR_N:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHR_N:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSHR_N (overflow test: max shift amount, positive input) output:
VRSHR_N:24:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHR_N:25:result_int16x4 [] = { 0, 0, 0, 0,  }
VRSHR_N:26:result_int32x2 [] = { 0, 0,  }
VRSHR_N:27:result_int64x1 [] = { 0,  }
VRSHR_N:28:result_uint8x8 [] = { 1, 1, 1, 1, 1, 1, 1, 1,  }
VRSHR_N:29:result_uint16x4 [] = { 1, 1, 1, 1,  }
VRSHR_N:30:result_uint32x2 [] = { 1, 1,  }
VRSHR_N:31:result_uint64x1 [] = { 1,  }
VRSHR_N:32:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHR_N:33:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSHR_N:34:result_float32x2 [] = { 33333333, 33333333,  }
VRSHR_N:35:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSHR_N:36:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHR_N:37:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSHR_N:38:result_int32x4 [] = { 0, 0, 0, 0,  }
VRSHR_N:39:result_int64x2 [] = { 0, 0,  }
VRSHR_N:40:result_uint8x16 [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  }
VRSHR_N:41:result_uint16x8 [] = { 1, 1, 1, 1, 1, 1, 1, 1,  }
VRSHR_N:42:result_uint32x4 [] = { 1, 1, 1, 1,  }
VRSHR_N:43:result_uint64x2 [] = { 1, 1,  }
VRSHR_N:44:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHR_N:45:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHR_N:46:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHR_N:47:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSHR_N (overflow test: shift by 1, with negative input) output:
VRSHR_N:48:result_int8x8 [] = { 40, 40, 40, 40, 40, 40, 40, 40,  }
VRSHR_N:49:result_int16x4 [] = { 4000, 4000, 4000, 4000,  }
VRSHR_N:50:result_int32x2 [] = { 40000000, 40000000,  }
VRSHR_N:51:result_int64x1 [] = { 4000000000000000,  }
VRSHR_N:52:result_uint8x8 [] = { 80, 80, 80, 80, 80, 80, 80, 80,  }
VRSHR_N:53:result_uint16x4 [] = { 8000, 8000, 8000, 8000,  }
VRSHR_N:54:result_uint32x2 [] = { 80000000, 80000000,  }
VRSHR_N:55:result_uint64x1 [] = { 8000000000000000,  }
VRSHR_N:56:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHR_N:57:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSHR_N:58:result_float32x2 [] = { 33333333, 33333333,  }
VRSHR_N:59:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSHR_N:60:result_int8x16 [] = { 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,  }
VRSHR_N:61:result_int16x8 [] = { 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000,  }
VRSHR_N:62:result_int32x4 [] = { 40000000, 40000000, 40000000, 40000000,  }
VRSHR_N:63:result_int64x2 [] = { 4000000000000000, 4000000000000000,  }
VRSHR_N:64:result_uint8x16 [] = { 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80,  }
VRSHR_N:65:result_uint16x8 [] = { 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000,  }
VRSHR_N:66:result_uint32x4 [] = { 80000000, 80000000, 80000000, 80000000,  }
VRSHR_N:67:result_uint64x2 [] = { 8000000000000000, 8000000000000000,  }
VRSHR_N:68:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHR_N:69:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHR_N:70:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHR_N:71:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSHR_N (overflow test: shift by 3, positive input) output:
VRSHR_N:72:result_int8x8 [] = { 10, 10, 10, 10, 10, 10, 10, 10,  }
VRSHR_N:73:result_int16x4 [] = { 1000, 1000, 1000, 1000,  }
VRSHR_N:74:result_int32x2 [] = { 10000000, 10000000,  }
VRSHR_N:75:result_int64x1 [] = { 1000000000000000,  }
VRSHR_N:76:result_uint8x8 [] = { 20, 20, 20, 20, 20, 20, 20, 20,  }
VRSHR_N:77:result_uint16x4 [] = { 2000, 2000, 2000, 2000,  }
VRSHR_N:78:result_uint32x2 [] = { 20000000, 20000000,  }
VRSHR_N:79:result_uint64x1 [] = { 2000000000000000,  }
VRSHR_N:80:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHR_N:81:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSHR_N:82:result_float32x2 [] = { 33333333, 33333333,  }
VRSHR_N:83:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSHR_N:84:result_int8x16 [] = { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  }
VRSHR_N:85:result_int16x8 [] = { 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  }
VRSHR_N:86:result_int32x4 [] = { 10000000, 10000000, 10000000, 10000000,  }
VRSHR_N:87:result_int64x2 [] = { 1000000000000000, 1000000000000000,  }
VRSHR_N:88:result_uint8x16 [] = { 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  }
VRSHR_N:89:result_uint16x8 [] = { 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,  }
VRSHR_N:90:result_uint32x4 [] = { 20000000, 20000000, 20000000, 20000000,  }
VRSHR_N:91:result_uint64x2 [] = { 2000000000000000, 2000000000000000,  }
VRSHR_N:92:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHR_N:93:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHR_N:94:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHR_N:95:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSHR_N (overflow test: shift by 1, with negative input) output:
VRSHR_N:96:result_int8x8 [] = { ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0,  }
VRSHR_N:97:result_int16x4 [] = { ffffc000, ffffc000, ffffc000, ffffc000,  }
VRSHR_N:98:result_int32x2 [] = { c0000000, c0000000,  }
VRSHR_N:99:result_int64x1 [] = { c000000000000000,  }
VRSHR_N:100:result_uint8x8 [] = { 80, 80, 80, 80, 80, 80, 80, 80,  }
VRSHR_N:101:result_uint16x4 [] = { 8000, 8000, 8000, 8000,  }
VRSHR_N:102:result_uint32x2 [] = { 80000000, 80000000,  }
VRSHR_N:103:result_uint64x1 [] = { 8000000000000000,  }
VRSHR_N:104:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHR_N:105:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSHR_N:106:result_float32x2 [] = { 33333333, 33333333,  }
VRSHR_N:107:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSHR_N:108:result_int8x16 [] = { ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0,  }
VRSHR_N:109:result_int16x8 [] = { ffffc000, ffffc000, ffffc000, ffffc000, ffffc000, ffffc000, ffffc000, ffffc000,  }
VRSHR_N:110:result_int32x4 [] = { c0000000, c0000000, c0000000, c0000000,  }
VRSHR_N:111:result_int64x2 [] = { c000000000000000, c000000000000000,  }
VRSHR_N:112:result_uint8x16 [] = { 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80,  }
VRSHR_N:113:result_uint16x8 [] = { 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000,  }
VRSHR_N:114:result_uint32x4 [] = { 80000000, 80000000, 80000000, 80000000,  }
VRSHR_N:115:result_uint64x2 [] = { 8000000000000000, 8000000000000000,  }
VRSHR_N:116:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHR_N:117:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHR_N:118:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHR_N:119:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSHR_N (overflow test: shift by 3, with negative input) output:
VRSHR_N:120:result_int8x8 [] = { fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0,  }
VRSHR_N:121:result_int16x4 [] = { fffff000, fffff000, fffff000, fffff000,  }
VRSHR_N:122:result_int32x2 [] = { f0000000, f0000000,  }
VRSHR_N:123:result_int64x1 [] = { f000000000000000,  }
VRSHR_N:124:result_uint8x8 [] = { 20, 20, 20, 20, 20, 20, 20, 20,  }
VRSHR_N:125:result_uint16x4 [] = { 2000, 2000, 2000, 2000,  }
VRSHR_N:126:result_uint32x2 [] = { 20000000, 20000000,  }
VRSHR_N:127:result_uint64x1 [] = { 2000000000000000,  }
VRSHR_N:128:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHR_N:129:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSHR_N:130:result_float32x2 [] = { 33333333, 33333333,  }
VRSHR_N:131:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSHR_N:132:result_int8x16 [] = { fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0,  }
VRSHR_N:133:result_int16x8 [] = { fffff000, fffff000, fffff000, fffff000, fffff000, fffff000, fffff000, fffff000,  }
VRSHR_N:134:result_int32x4 [] = { f0000000, f0000000, f0000000, f0000000,  }
VRSHR_N:135:result_int64x2 [] = { f000000000000000, f000000000000000,  }
VRSHR_N:136:result_uint8x16 [] = { 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  }
VRSHR_N:137:result_uint16x8 [] = { 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,  }
VRSHR_N:138:result_uint32x4 [] = { 20000000, 20000000, 20000000, 20000000,  }
VRSHR_N:139:result_uint64x2 [] = { 2000000000000000, 2000000000000000,  }
VRSHR_N:140:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSHR_N:141:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSHR_N:142:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSHR_N:143:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSRA_N output:
VRSRA_N:0:result_int8x8 [] = { fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff, 0,  }
VRSRA_N:1:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VRSRA_N:2:result_int32x2 [] = { fffffffd, fffffffe,  }
VRSRA_N:3:result_int64x1 [] = { fffffffffffffff0,  }
VRSRA_N:4:result_uint8x8 [] = { 5, 6, 7, 8, 9, a, b, c,  }
VRSRA_N:5:result_uint16x4 [] = { fffd, fffe, ffff, 0,  }
VRSRA_N:6:result_uint32x2 [] = { fffffff4, fffffff5,  }
VRSRA_N:7:result_uint64x1 [] = { fffffffffffffff0,  }
VRSRA_N:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSRA_N:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSRA_N:10:result_float32x2 [] = { 33333333, 33333333,  }
VRSRA_N:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSRA_N:12:result_int8x16 [] = { fffffff9, fffffffa, fffffffb, fffffffc, fffffffd, fffffffe, ffffffff, 0, 1, 2, 3, 4, 5, 6, 7, 8,  }
VRSRA_N:13:result_int16x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, fffffff4, fffffff5, fffffff6, fffffff7,  }
VRSRA_N:14:result_int32x4 [] = { fffffffd, fffffffe, ffffffff, 0,  }
VRSRA_N:15:result_int64x2 [] = { fffffffffffffff0, fffffffffffffff1,  }
VRSRA_N:16:result_uint8x16 [] = { 5, 6, 7, 8, 9, a, b, c, d, e, f, 10, 11, 12, 13, 14,  }
VRSRA_N:17:result_uint16x8 [] = { fffd, fffe, ffff, 0, 1, 2, 3, 4,  }
VRSRA_N:18:result_uint32x4 [] = { fffffff4, fffffff5, fffffff6, fffffff7,  }
VRSRA_N:19:result_uint64x2 [] = { fffffffffffffff0, fffffffffffffff1,  }
VRSRA_N:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSRA_N:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSRA_N:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSRA_N:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSRA_N (checking overflow: shift by 1, positive input) output:
VRSRA_N:24:result_int8x8 [] = { 40, 40, 40, 40, 40, 40, 40, 40,  }
VRSRA_N:25:result_int16x4 [] = { 4000, 4000, 4000, 4000,  }
VRSRA_N:26:result_int32x2 [] = { 40000000, 40000000,  }
VRSRA_N:27:result_int64x1 [] = { 4000000000000000,  }
VRSRA_N:28:result_uint8x8 [] = { 80, 80, 80, 80, 80, 80, 80, 80,  }
VRSRA_N:29:result_uint16x4 [] = { 8000, 8000, 8000, 8000,  }
VRSRA_N:30:result_uint32x2 [] = { 80000000, 80000000,  }
VRSRA_N:31:result_uint64x1 [] = { 8000000000000000,  }
VRSRA_N:32:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSRA_N:33:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSRA_N:34:result_float32x2 [] = { 33333333, 33333333,  }
VRSRA_N:35:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSRA_N:36:result_int8x16 [] = { 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,  }
VRSRA_N:37:result_int16x8 [] = { 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000,  }
VRSRA_N:38:result_int32x4 [] = { 40000000, 40000000, 40000000, 40000000,  }
VRSRA_N:39:result_int64x2 [] = { 4000000000000000, 4000000000000000,  }
VRSRA_N:40:result_uint8x16 [] = { 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80,  }
VRSRA_N:41:result_uint16x8 [] = { 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000,  }
VRSRA_N:42:result_uint32x4 [] = { 80000000, 80000000, 80000000, 80000000,  }
VRSRA_N:43:result_uint64x2 [] = { 8000000000000000, 8000000000000000,  }
VRSRA_N:44:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSRA_N:45:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSRA_N:46:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSRA_N:47:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSRA_N (checking overflow: shift by 3, positive input) output:
VRSRA_N:48:result_int8x8 [] = { 10, 10, 10, 10, 10, 10, 10, 10,  }
VRSRA_N:49:result_int16x4 [] = { 1000, 1000, 1000, 1000,  }
VRSRA_N:50:result_int32x2 [] = { 10000000, 10000000,  }
VRSRA_N:51:result_int64x1 [] = { 1000000000000000,  }
VRSRA_N:52:result_uint8x8 [] = { 20, 20, 20, 20, 20, 20, 20, 20,  }
VRSRA_N:53:result_uint16x4 [] = { 2000, 2000, 2000, 2000,  }
VRSRA_N:54:result_uint32x2 [] = { 20000000, 20000000,  }
VRSRA_N:55:result_uint64x1 [] = { 2000000000000000,  }
VRSRA_N:56:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSRA_N:57:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSRA_N:58:result_float32x2 [] = { 33333333, 33333333,  }
VRSRA_N:59:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSRA_N:60:result_int8x16 [] = { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  }
VRSRA_N:61:result_int16x8 [] = { 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  }
VRSRA_N:62:result_int32x4 [] = { 10000000, 10000000, 10000000, 10000000,  }
VRSRA_N:63:result_int64x2 [] = { 1000000000000000, 1000000000000000,  }
VRSRA_N:64:result_uint8x16 [] = { 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  }
VRSRA_N:65:result_uint16x8 [] = { 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,  }
VRSRA_N:66:result_uint32x4 [] = { 20000000, 20000000, 20000000, 20000000,  }
VRSRA_N:67:result_uint64x2 [] = { 2000000000000000, 2000000000000000,  }
VRSRA_N:68:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSRA_N:69:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSRA_N:70:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSRA_N:71:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSRA_N (checking overflow: shift by max, positive input) output:
VRSRA_N:72:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSRA_N:73:result_int16x4 [] = { 0, 0, 0, 0,  }
VRSRA_N:74:result_int32x2 [] = { 0, 0,  }
VRSRA_N:75:result_int64x1 [] = { 0,  }
VRSRA_N:76:result_uint8x8 [] = { 1, 1, 1, 1, 1, 1, 1, 1,  }
VRSRA_N:77:result_uint16x4 [] = { 1, 1, 1, 1,  }
VRSRA_N:78:result_uint32x2 [] = { 1, 1,  }
VRSRA_N:79:result_uint64x1 [] = { 1,  }
VRSRA_N:80:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSRA_N:81:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSRA_N:82:result_float32x2 [] = { 33333333, 33333333,  }
VRSRA_N:83:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSRA_N:84:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSRA_N:85:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSRA_N:86:result_int32x4 [] = { 0, 0, 0, 0,  }
VRSRA_N:87:result_int64x2 [] = { 0, 0,  }
VRSRA_N:88:result_uint8x16 [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  }
VRSRA_N:89:result_uint16x8 [] = { 1, 1, 1, 1, 1, 1, 1, 1,  }
VRSRA_N:90:result_uint32x4 [] = { 1, 1, 1, 1,  }
VRSRA_N:91:result_uint64x2 [] = { 1, 1,  }
VRSRA_N:92:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSRA_N:93:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSRA_N:94:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSRA_N:95:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSRA_N (checking overflow: shift by 1, negative input) output:
VRSRA_N:96:result_int8x8 [] = { ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0,  }
VRSRA_N:97:result_int16x4 [] = { ffffc000, ffffc000, ffffc000, ffffc000,  }
VRSRA_N:98:result_int32x2 [] = { c0000000, c0000000,  }
VRSRA_N:99:result_int64x1 [] = { c000000000000000,  }
VRSRA_N:100:result_uint8x8 [] = { 1, 1, 1, 1, 1, 1, 1, 1,  }
VRSRA_N:101:result_uint16x4 [] = { 1, 1, 1, 1,  }
VRSRA_N:102:result_uint32x2 [] = { 1, 1,  }
VRSRA_N:103:result_uint64x1 [] = { 1,  }
VRSRA_N:104:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSRA_N:105:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSRA_N:106:result_float32x2 [] = { 33333333, 33333333,  }
VRSRA_N:107:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSRA_N:108:result_int8x16 [] = { ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0, ffffffc0,  }
VRSRA_N:109:result_int16x8 [] = { ffffc000, ffffc000, ffffc000, ffffc000, ffffc000, ffffc000, ffffc000, ffffc000,  }
VRSRA_N:110:result_int32x4 [] = { c0000000, c0000000, c0000000, c0000000,  }
VRSRA_N:111:result_int64x2 [] = { c000000000000000, c000000000000000,  }
VRSRA_N:112:result_uint8x16 [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  }
VRSRA_N:113:result_uint16x8 [] = { 1, 1, 1, 1, 1, 1, 1, 1,  }
VRSRA_N:114:result_uint32x4 [] = { 1, 1, 1, 1,  }
VRSRA_N:115:result_uint64x2 [] = { 1, 1,  }
VRSRA_N:116:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSRA_N:117:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSRA_N:118:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSRA_N:119:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSRA_N (checking overflow: shift by max, negative input) output:
VRSRA_N:120:result_int8x8 [] = { fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0,  }
VRSRA_N:121:result_int16x4 [] = { fffff000, fffff000, fffff000, fffff000,  }
VRSRA_N:122:result_int32x2 [] = { f0000000, f0000000,  }
VRSRA_N:123:result_int64x1 [] = { f000000000000000,  }
VRSRA_N:124:result_uint8x8 [] = { 1, 1, 1, 1, 1, 1, 1, 1,  }
VRSRA_N:125:result_uint16x4 [] = { 1, 1, 1, 1,  }
VRSRA_N:126:result_uint32x2 [] = { 1, 1,  }
VRSRA_N:127:result_uint64x1 [] = { 1,  }
VRSRA_N:128:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSRA_N:129:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSRA_N:130:result_float32x2 [] = { 33333333, 33333333,  }
VRSRA_N:131:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSRA_N:132:result_int8x16 [] = { fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0, fffffff0,  }
VRSRA_N:133:result_int16x8 [] = { fffff000, fffff000, fffff000, fffff000, fffff000, fffff000, fffff000, fffff000,  }
VRSRA_N:134:result_int32x4 [] = { f0000000, f0000000, f0000000, f0000000,  }
VRSRA_N:135:result_int64x2 [] = { f000000000000000, f000000000000000,  }
VRSRA_N:136:result_uint8x16 [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  }
VRSRA_N:137:result_uint16x8 [] = { 1, 1, 1, 1, 1, 1, 1, 1,  }
VRSRA_N:138:result_uint32x4 [] = { 1, 1, 1, 1,  }
VRSRA_N:139:result_uint64x2 [] = { 1, 1,  }
VRSRA_N:140:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSRA_N:141:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSRA_N:142:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSRA_N:143:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRSRA_N (checking overflow: shift by max, negative input) output:
VRSRA_N:144:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSRA_N:145:result_int16x4 [] = { 0, 0, 0, 0,  }
VRSRA_N:146:result_int32x2 [] = { 0, 0,  }
VRSRA_N:147:result_int64x1 [] = { 0,  }
VRSRA_N:148:result_uint8x8 [] = { 1, 1, 1, 1, 1, 1, 1, 1,  }
VRSRA_N:149:result_uint16x4 [] = { 1, 1, 1, 1,  }
VRSRA_N:150:result_uint32x2 [] = { 1, 1,  }
VRSRA_N:151:result_uint64x1 [] = { 1,  }
VRSRA_N:152:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSRA_N:153:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VRSRA_N:154:result_float32x2 [] = { 33333333, 33333333,  }
VRSRA_N:155:result_float16x4 [] = { 0, 0, 0, 0,  }
VRSRA_N:156:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSRA_N:157:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VRSRA_N:158:result_int32x4 [] = { 0, 0, 0, 0,  }
VRSRA_N:159:result_int64x2 [] = { 0, 0,  }
VRSRA_N:160:result_uint8x16 [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  }
VRSRA_N:161:result_uint16x8 [] = { 1, 1, 1, 1, 1, 1, 1, 1,  }
VRSRA_N:162:result_uint32x4 [] = { 1, 1, 1, 1,  }
VRSRA_N:163:result_uint64x2 [] = { 1, 1,  }
VRSRA_N:164:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VRSRA_N:165:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VRSRA_N:166:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VRSRA_N:167:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VSHLL_N output:
VSHLL_N:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHLL_N:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VSHLL_N:2:result_int32x2 [] = { 33333333, 33333333,  }
VSHLL_N:3:result_int64x1 [] = { 3333333333333333,  }
VSHLL_N:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHLL_N:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VSHLL_N:6:result_uint32x2 [] = { 33333333, 33333333,  }
VSHLL_N:7:result_uint64x1 [] = { 3333333333333333,  }
VSHLL_N:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHLL_N:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VSHLL_N:10:result_float32x2 [] = { 33333333, 33333333,  }
VSHLL_N:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VSHLL_N:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHLL_N:13:result_int16x8 [] = { ffffffe0, ffffffe2, ffffffe4, ffffffe6, ffffffe8, ffffffea, ffffffec, ffffffee,  }
VSHLL_N:14:result_int32x4 [] = { ffffffe0, ffffffe2, ffffffe4, ffffffe6,  }
VSHLL_N:15:result_int64x2 [] = { ffffffffffffff80, ffffffffffffff88,  }
VSHLL_N:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHLL_N:17:result_uint16x8 [] = { 3c0, 3c4, 3c8, 3cc, 3d0, 3d4, 3d8, 3dc,  }
VSHLL_N:18:result_uint32x4 [] = { fff00, fff10, fff20, fff30,  }
VSHLL_N:19:result_uint64x2 [] = { 7ffffff80, 7ffffff88,  }
VSHLL_N:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VSHLL_N:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VSHLL_N:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VSHLL_N:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VPADDL/VPADDLQ output:
VPADDL/VPADDLQ:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VPADDL/VPADDLQ:1:result_int16x4 [] = { ffffffe1, ffffffe5, ffffffe9, ffffffed,  }
VPADDL/VPADDLQ:2:result_int32x2 [] = { ffffffe1, ffffffe5,  }
VPADDL/VPADDLQ:3:result_int64x1 [] = { ffffffffffffffe1,  }
VPADDL/VPADDLQ:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VPADDL/VPADDLQ:5:result_uint16x4 [] = { 1e1, 1e5, 1e9, 1ed,  }
VPADDL/VPADDLQ:6:result_uint32x2 [] = { 1ffe1, 1ffe5,  }
VPADDL/VPADDLQ:7:result_uint64x1 [] = { 1ffffffe1,  }
VPADDL/VPADDLQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VPADDL/VPADDLQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VPADDL/VPADDLQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VPADDL/VPADDLQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VPADDL/VPADDLQ:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VPADDL/VPADDLQ:13:result_int16x8 [] = { ffffffe1, ffffffe5, ffffffe9, ffffffed, fffffff1, fffffff5, fffffff9, fffffffd,  }
VPADDL/VPADDLQ:14:result_int32x4 [] = { ffffffe1, ffffffe5, ffffffe9, ffffffed,  }
VPADDL/VPADDLQ:15:result_int64x2 [] = { ffffffffffffffe1, ffffffffffffffe5,  }
VPADDL/VPADDLQ:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VPADDL/VPADDLQ:17:result_uint16x8 [] = { 1e1, 1e5, 1e9, 1ed, 1f1, 1f5, 1f9, 1fd,  }
VPADDL/VPADDLQ:18:result_uint32x4 [] = { 1ffe1, 1ffe5, 1ffe9, 1ffed,  }
VPADDL/VPADDLQ:19:result_uint64x2 [] = { 1ffffffe1, 1ffffffe5,  }
VPADDL/VPADDLQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VPADDL/VPADDLQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VPADDL/VPADDLQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VPADDL/VPADDLQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VPADD output:
VPADD:0:result_int8x8 [] = { ffffffe1, ffffffe5, ffffffe9, ffffffed, ffffffe1, ffffffe5, ffffffe9, ffffffed,  }
VPADD:1:result_int16x4 [] = { ffffffe1, ffffffe5, ffffffe1, ffffffe5,  }
VPADD:2:result_int32x2 [] = { ffffffe1, ffffffe1,  }
VPADD:3:result_int64x1 [] = { 3333333333333333,  }
VPADD:4:result_uint8x8 [] = { e1, e5, e9, ed, e1, e5, e9, ed,  }
VPADD:5:result_uint16x4 [] = { ffe1, ffe5, ffe1, ffe5,  }
VPADD:6:result_uint32x2 [] = { ffffffe1, ffffffe1,  }
VPADD:7:result_uint64x1 [] = { 3333333333333333,  }
VPADD:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VPADD:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VPADD:10:result_float32x2 [] = { c1f80000, c1f80000,  }
VPADD:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VPADD:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VPADD:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VPADD:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VPADD:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VPADD:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VPADD:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VPADD:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VPADD:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VPADD:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VPADD:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VPADD:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VPADD:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VPADAL/VPADALQ output:
VPADAL/VPADALQ:0:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VPADAL/VPADALQ:1:result_int16x4 [] = { ffffffd1, ffffffd6, ffffffdb, ffffffe0,  }
VPADAL/VPADALQ:2:result_int32x2 [] = { ffffffd1, ffffffd6,  }
VPADAL/VPADALQ:3:result_int64x1 [] = { ffffffffffffffd1,  }
VPADAL/VPADALQ:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VPADAL/VPADALQ:5:result_uint16x4 [] = { 1d1, 1d6, 1db, 1e0,  }
VPADAL/VPADALQ:6:result_uint32x2 [] = { 1ffd1, 1ffd6,  }
VPADAL/VPADALQ:7:result_uint64x1 [] = { 1ffffffd1,  }
VPADAL/VPADALQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VPADAL/VPADALQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VPADAL/VPADALQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VPADAL/VPADALQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VPADAL/VPADALQ:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VPADAL/VPADALQ:13:result_int16x8 [] = { ffffffd1, ffffffd6, ffffffdb, ffffffe0, ffffffe5, ffffffea, ffffffef, fffffff4,  }
VPADAL/VPADALQ:14:result_int32x4 [] = { ffffffd1, ffffffd6, ffffffdb, ffffffe0,  }
VPADAL/VPADALQ:15:result_int64x2 [] = { ffffffffffffffd1, ffffffffffffffd6,  }
VPADAL/VPADALQ:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VPADAL/VPADALQ:17:result_uint16x8 [] = { 1d1, 1d6, 1db, 1e0, 1e5, 1ea, 1ef, 1f4,  }
VPADAL/VPADALQ:18:result_uint32x4 [] = { 1ffd1, 1ffd6, 1ffdb, 1ffe0,  }
VPADAL/VPADALQ:19:result_uint64x2 [] = { 1ffffffd1, 1ffffffd6,  }
VPADAL/VPADALQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VPADAL/VPADALQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VPADAL/VPADALQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VPADAL/VPADALQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHLU_N/VQSHLUQ_N (negative input) cumulative saturation output:
VQSHLU_N/VQSHLUQ_N:0:vqshlu_n_s8 Neon cumulative saturation 1
VQSHLU_N/VQSHLUQ_N:1:vqshlu_n_s16 Neon cumulative saturation 1
VQSHLU_N/VQSHLUQ_N:2:vqshlu_n_s32 Neon cumulative saturation 1
VQSHLU_N/VQSHLUQ_N:3:vqshlu_n_s64 Neon cumulative saturation 1
VQSHLU_N/VQSHLUQ_N:4:vqshluq_n_s8 Neon cumulative saturation 1
VQSHLU_N/VQSHLUQ_N:5:vqshluq_n_s16 Neon cumulative saturation 1
VQSHLU_N/VQSHLUQ_N:6:vqshluq_n_s32 Neon cumulative saturation 1
VQSHLU_N/VQSHLUQ_N:7:vqshluq_n_s64 Neon cumulative saturation 1

VQSHLU_N/VQSHLUQ_N (negative input) output:
VQSHLU_N/VQSHLUQ_N:8:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHLU_N/VQSHLUQ_N:9:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHLU_N/VQSHLUQ_N:10:result_int32x2 [] = { 33333333, 33333333,  }
VQSHLU_N/VQSHLUQ_N:11:result_int64x1 [] = { 3333333333333333,  }
VQSHLU_N/VQSHLUQ_N:12:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQSHLU_N/VQSHLUQ_N:13:result_uint16x4 [] = { 0, 0, 0, 0,  }
VQSHLU_N/VQSHLUQ_N:14:result_uint32x2 [] = { 0, 0,  }
VQSHLU_N/VQSHLUQ_N:15:result_uint64x1 [] = { 0,  }
VQSHLU_N/VQSHLUQ_N:16:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHLU_N/VQSHLUQ_N:17:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHLU_N/VQSHLUQ_N:18:result_float32x2 [] = { 33333333, 33333333,  }
VQSHLU_N/VQSHLUQ_N:19:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHLU_N/VQSHLUQ_N:20:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHLU_N/VQSHLUQ_N:21:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHLU_N/VQSHLUQ_N:22:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHLU_N/VQSHLUQ_N:23:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQSHLU_N/VQSHLUQ_N:24:result_uint8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VQSHLU_N/VQSHLUQ_N:25:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQSHLU_N/VQSHLUQ_N:26:result_uint32x4 [] = { 0, 0, 0, 0,  }
VQSHLU_N/VQSHLUQ_N:27:result_uint64x2 [] = { 0, 0,  }
VQSHLU_N/VQSHLUQ_N:28:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHLU_N/VQSHLUQ_N:29:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHLU_N/VQSHLUQ_N:30:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHLU_N/VQSHLUQ_N:31:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHLU_N/VQSHLUQ_N (check cumulative saturation: shift by 1) cumulative saturation output:
VQSHLU_N/VQSHLUQ_N:32:vqshlu_n_s8 Neon cumulative saturation 0
VQSHLU_N/VQSHLUQ_N:33:vqshlu_n_s16 Neon cumulative saturation 0
VQSHLU_N/VQSHLUQ_N:34:vqshlu_n_s32 Neon cumulative saturation 0
VQSHLU_N/VQSHLUQ_N:35:vqshlu_n_s64 Neon cumulative saturation 0
VQSHLU_N/VQSHLUQ_N:36:vqshluq_n_s8 Neon cumulative saturation 0
VQSHLU_N/VQSHLUQ_N:37:vqshluq_n_s16 Neon cumulative saturation 0
VQSHLU_N/VQSHLUQ_N:38:vqshluq_n_s32 Neon cumulative saturation 0
VQSHLU_N/VQSHLUQ_N:39:vqshluq_n_s64 Neon cumulative saturation 0

VQSHLU_N/VQSHLUQ_N (check cumulative saturation: shift by 1) output:
VQSHLU_N/VQSHLUQ_N:40:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHLU_N/VQSHLUQ_N:41:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHLU_N/VQSHLUQ_N:42:result_int32x2 [] = { 33333333, 33333333,  }
VQSHLU_N/VQSHLUQ_N:43:result_int64x1 [] = { 3333333333333333,  }
VQSHLU_N/VQSHLUQ_N:44:result_uint8x8 [] = { fe, fe, fe, fe, fe, fe, fe, fe,  }
VQSHLU_N/VQSHLUQ_N:45:result_uint16x4 [] = { fffe, fffe, fffe, fffe,  }
VQSHLU_N/VQSHLUQ_N:46:result_uint32x2 [] = { fffffffe, fffffffe,  }
VQSHLU_N/VQSHLUQ_N:47:result_uint64x1 [] = { fffffffffffffffe,  }
VQSHLU_N/VQSHLUQ_N:48:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHLU_N/VQSHLUQ_N:49:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHLU_N/VQSHLUQ_N:50:result_float32x2 [] = { 33333333, 33333333,  }
VQSHLU_N/VQSHLUQ_N:51:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHLU_N/VQSHLUQ_N:52:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHLU_N/VQSHLUQ_N:53:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHLU_N/VQSHLUQ_N:54:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHLU_N/VQSHLUQ_N:55:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQSHLU_N/VQSHLUQ_N:56:result_uint8x16 [] = { fe, fe, fe, fe, fe, fe, fe, fe, fe, fe, fe, fe, fe, fe, fe, fe,  }
VQSHLU_N/VQSHLUQ_N:57:result_uint16x8 [] = { fffe, fffe, fffe, fffe, fffe, fffe, fffe, fffe,  }
VQSHLU_N/VQSHLUQ_N:58:result_uint32x4 [] = { fffffffe, fffffffe, fffffffe, fffffffe,  }
VQSHLU_N/VQSHLUQ_N:59:result_uint64x2 [] = { fffffffffffffffe, fffffffffffffffe,  }
VQSHLU_N/VQSHLUQ_N:60:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHLU_N/VQSHLUQ_N:61:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHLU_N/VQSHLUQ_N:62:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHLU_N/VQSHLUQ_N:63:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHLU_N/VQSHLUQ_N (check cumulative saturation: shift by 2) cumulative saturation output:
VQSHLU_N/VQSHLUQ_N:64:vqshlu_n_s8 Neon cumulative saturation 1
VQSHLU_N/VQSHLUQ_N:65:vqshlu_n_s16 Neon cumulative saturation 1
VQSHLU_N/VQSHLUQ_N:66:vqshlu_n_s32 Neon cumulative saturation 1
VQSHLU_N/VQSHLUQ_N:67:vqshlu_n_s64 Neon cumulative saturation 1
VQSHLU_N/VQSHLUQ_N:68:vqshluq_n_s8 Neon cumulative saturation 1
VQSHLU_N/VQSHLUQ_N:69:vqshluq_n_s16 Neon cumulative saturation 1
VQSHLU_N/VQSHLUQ_N:70:vqshluq_n_s32 Neon cumulative saturation 1
VQSHLU_N/VQSHLUQ_N:71:vqshluq_n_s64 Neon cumulative saturation 1

VQSHLU_N/VQSHLUQ_N (check cumulative saturation: shift by 2) output:
VQSHLU_N/VQSHLUQ_N:72:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHLU_N/VQSHLUQ_N:73:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHLU_N/VQSHLUQ_N:74:result_int32x2 [] = { 33333333, 33333333,  }
VQSHLU_N/VQSHLUQ_N:75:result_int64x1 [] = { 3333333333333333,  }
VQSHLU_N/VQSHLUQ_N:76:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQSHLU_N/VQSHLUQ_N:77:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQSHLU_N/VQSHLUQ_N:78:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQSHLU_N/VQSHLUQ_N:79:result_uint64x1 [] = { ffffffffffffffff,  }
VQSHLU_N/VQSHLUQ_N:80:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHLU_N/VQSHLUQ_N:81:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHLU_N/VQSHLUQ_N:82:result_float32x2 [] = { 33333333, 33333333,  }
VQSHLU_N/VQSHLUQ_N:83:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHLU_N/VQSHLUQ_N:84:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHLU_N/VQSHLUQ_N:85:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHLU_N/VQSHLUQ_N:86:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHLU_N/VQSHLUQ_N:87:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQSHLU_N/VQSHLUQ_N:88:result_uint8x16 [] = { ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff, ff,  }
VQSHLU_N/VQSHLUQ_N:89:result_uint16x8 [] = { ffff, ffff, ffff, ffff, ffff, ffff, ffff, ffff,  }
VQSHLU_N/VQSHLUQ_N:90:result_uint32x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }
VQSHLU_N/VQSHLUQ_N:91:result_uint64x2 [] = { ffffffffffffffff, ffffffffffffffff,  }
VQSHLU_N/VQSHLUQ_N:92:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHLU_N/VQSHLUQ_N:93:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHLU_N/VQSHLUQ_N:94:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHLU_N/VQSHLUQ_N:95:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHLU_N/VQSHLUQ_N cumulative saturation output:
VQSHLU_N/VQSHLUQ_N:96:vqshlu_n_s8 Neon cumulative saturation 0
VQSHLU_N/VQSHLUQ_N:97:vqshlu_n_s16 Neon cumulative saturation 0
VQSHLU_N/VQSHLUQ_N:98:vqshlu_n_s32 Neon cumulative saturation 0
VQSHLU_N/VQSHLUQ_N:99:vqshlu_n_s64 Neon cumulative saturation 0
VQSHLU_N/VQSHLUQ_N:100:vqshluq_n_s8 Neon cumulative saturation 0
VQSHLU_N/VQSHLUQ_N:101:vqshluq_n_s16 Neon cumulative saturation 0
VQSHLU_N/VQSHLUQ_N:102:vqshluq_n_s32 Neon cumulative saturation 0
VQSHLU_N/VQSHLUQ_N:103:vqshluq_n_s64 Neon cumulative saturation 0

VQSHLU_N/VQSHLUQ_N output:
VQSHLU_N/VQSHLUQ_N:104:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHLU_N/VQSHLUQ_N:105:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHLU_N/VQSHLUQ_N:106:result_int32x2 [] = { 33333333, 33333333,  }
VQSHLU_N/VQSHLUQ_N:107:result_int64x1 [] = { 3333333333333333,  }
VQSHLU_N/VQSHLUQ_N:108:result_uint8x8 [] = { 2, 2, 2, 2, 2, 2, 2, 2,  }
VQSHLU_N/VQSHLUQ_N:109:result_uint16x4 [] = { 8, 8, 8, 8,  }
VQSHLU_N/VQSHLUQ_N:110:result_uint32x2 [] = { 18, 18,  }
VQSHLU_N/VQSHLUQ_N:111:result_uint64x1 [] = { 40,  }
VQSHLU_N/VQSHLUQ_N:112:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHLU_N/VQSHLUQ_N:113:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHLU_N/VQSHLUQ_N:114:result_float32x2 [] = { 33333333, 33333333,  }
VQSHLU_N/VQSHLUQ_N:115:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHLU_N/VQSHLUQ_N:116:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHLU_N/VQSHLUQ_N:117:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHLU_N/VQSHLUQ_N:118:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHLU_N/VQSHLUQ_N:119:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQSHLU_N/VQSHLUQ_N:120:result_uint8x16 [] = { a0, a0, a0, a0, a0, a0, a0, a0, a0, a0, a0, a0, a0, a0, a0, a0,  }
VQSHLU_N/VQSHLUQ_N:121:result_uint16x8 [] = { 180, 180, 180, 180, 180, 180, 180, 180,  }
VQSHLU_N/VQSHLUQ_N:122:result_uint32x4 [] = { 380, 380, 380, 380,  }
VQSHLU_N/VQSHLUQ_N:123:result_uint64x2 [] = { 800, 800,  }
VQSHLU_N/VQSHLUQ_N:124:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHLU_N/VQSHLUQ_N:125:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHLU_N/VQSHLUQ_N:126:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHLU_N/VQSHLUQ_N:127:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VCLZ/VCLZQ output:
VCLZ/VCLZQ:0:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VCLZ/VCLZQ:1:result_int16x4 [] = { 3, 3, 3, 3,  }
VCLZ/VCLZQ:2:result_int32x2 [] = { 11, 11,  }
VCLZ/VCLZQ:3:result_int64x1 [] = { 3333333333333333,  }
VCLZ/VCLZQ:4:result_uint8x8 [] = { 2, 2, 2, 2, 2, 2, 2, 2,  }
VCLZ/VCLZQ:5:result_uint16x4 [] = { 0, 0, 0, 0,  }
VCLZ/VCLZQ:6:result_uint32x2 [] = { 5, 5,  }
VCLZ/VCLZQ:7:result_uint64x1 [] = { 3333333333333333,  }
VCLZ/VCLZQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VCLZ/VCLZQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VCLZ/VCLZQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VCLZ/VCLZQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VCLZ/VCLZQ:12:result_int8x16 [] = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,  }
VCLZ/VCLZQ:13:result_int16x8 [] = { 3, 3, 3, 3, 3, 3, 3, 3,  }
VCLZ/VCLZQ:14:result_int32x4 [] = { 3, 3, 3, 3,  }
VCLZ/VCLZQ:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VCLZ/VCLZQ:16:result_uint8x16 [] = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  }
VCLZ/VCLZQ:17:result_uint16x8 [] = { d, d, d, d, d, d, d, d,  }
VCLZ/VCLZQ:18:result_uint32x4 [] = { 1f, 1f, 1f, 1f,  }
VCLZ/VCLZQ:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VCLZ/VCLZQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VCLZ/VCLZQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VCLZ/VCLZQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VCLZ/VCLZQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VCLZ/VCLZQ (input=0) output:
VCLZ/VCLZQ:24:result_int8x8 [] = { 8, 8, 8, 8, 8, 8, 8, 8,  }
VCLZ/VCLZQ:25:result_int16x4 [] = { 10, 10, 10, 10,  }
VCLZ/VCLZQ:26:result_int32x2 [] = { 20, 20,  }
VCLZ/VCLZQ:27:result_int64x1 [] = { 3333333333333333,  }
VCLZ/VCLZQ:28:result_uint8x8 [] = { 8, 8, 8, 8, 8, 8, 8, 8,  }
VCLZ/VCLZQ:29:result_uint16x4 [] = { 10, 10, 10, 10,  }
VCLZ/VCLZQ:30:result_uint32x2 [] = { 20, 20,  }
VCLZ/VCLZQ:31:result_uint64x1 [] = { 3333333333333333,  }
VCLZ/VCLZQ:32:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VCLZ/VCLZQ:33:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VCLZ/VCLZQ:34:result_float32x2 [] = { 33333333, 33333333,  }
VCLZ/VCLZQ:35:result_float16x4 [] = { 0, 0, 0, 0,  }
VCLZ/VCLZQ:36:result_int8x16 [] = { 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,  }
VCLZ/VCLZQ:37:result_int16x8 [] = { 10, 10, 10, 10, 10, 10, 10, 10,  }
VCLZ/VCLZQ:38:result_int32x4 [] = { 20, 20, 20, 20,  }
VCLZ/VCLZQ:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VCLZ/VCLZQ:40:result_uint8x16 [] = { 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,  }
VCLZ/VCLZQ:41:result_uint16x8 [] = { 10, 10, 10, 10, 10, 10, 10, 10,  }
VCLZ/VCLZQ:42:result_uint32x4 [] = { 20, 20, 20, 20,  }
VCLZ/VCLZQ:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VCLZ/VCLZQ:44:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VCLZ/VCLZQ:45:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VCLZ/VCLZQ:46:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VCLZ/VCLZQ:47:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VCLS/VCLSQ (positive input) output:
VCLS/VCLSQ:0:result_int8x8 [] = { 6, 6, 6, 6, 6, 6, 6, 6,  }
VCLS/VCLSQ:1:result_int16x4 [] = { 2, 2, 2, 2,  }
VCLS/VCLSQ:2:result_int32x2 [] = { 19, 19,  }
VCLS/VCLSQ:3:result_int64x1 [] = { 3333333333333333,  }
VCLS/VCLSQ:4:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VCLS/VCLSQ:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VCLS/VCLSQ:6:result_uint32x2 [] = { 33333333, 33333333,  }
VCLS/VCLSQ:7:result_uint64x1 [] = { 3333333333333333,  }
VCLS/VCLSQ:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VCLS/VCLSQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VCLS/VCLSQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VCLS/VCLSQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VCLS/VCLSQ:12:result_int8x16 [] = { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,  }
VCLS/VCLSQ:13:result_int16x8 [] = { 2, 2, 2, 2, 2, 2, 2, 2,  }
VCLS/VCLSQ:14:result_int32x4 [] = { 14, 14, 14, 14,  }
VCLS/VCLSQ:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VCLS/VCLSQ:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VCLS/VCLSQ:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VCLS/VCLSQ:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VCLS/VCLSQ:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VCLS/VCLSQ:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VCLS/VCLSQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VCLS/VCLSQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VCLS/VCLSQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VCLS/VCLSQ (negative input) output:
VCLS/VCLSQ:24:result_int8x8 [] = { 7, 7, 7, 7, 7, 7, 7, 7,  }
VCLS/VCLSQ:25:result_int16x4 [] = { 1, 1, 1, 1,  }
VCLS/VCLSQ:26:result_int32x2 [] = { 1, 1,  }
VCLS/VCLSQ:27:result_int64x1 [] = { 3333333333333333,  }
VCLS/VCLSQ:28:result_uint8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VCLS/VCLSQ:29:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VCLS/VCLSQ:30:result_uint32x2 [] = { 33333333, 33333333,  }
VCLS/VCLSQ:31:result_uint64x1 [] = { 3333333333333333,  }
VCLS/VCLSQ:32:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VCLS/VCLSQ:33:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VCLS/VCLSQ:34:result_float32x2 [] = { 33333333, 33333333,  }
VCLS/VCLSQ:35:result_float16x4 [] = { 0, 0, 0, 0,  }
VCLS/VCLSQ:36:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VCLS/VCLSQ:37:result_int16x8 [] = { 2, 2, 2, 2, 2, 2, 2, 2,  }
VCLS/VCLSQ:38:result_int32x4 [] = { 0, 0, 0, 0,  }
VCLS/VCLSQ:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VCLS/VCLSQ:40:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VCLS/VCLSQ:41:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VCLS/VCLSQ:42:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VCLS/VCLSQ:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VCLS/VCLSQ:44:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VCLS/VCLSQ:45:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VCLS/VCLSQ:46:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VCLS/VCLSQ:47:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VCNT/VCNTQ output:
VCNT/VCNTQ:0:result_int8x8 [] = { 8, 8, 8, 8, 8, 8, 8, 8,  }
VCNT/VCNTQ:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VCNT/VCNTQ:2:result_int32x2 [] = { 33333333, 33333333,  }
VCNT/VCNTQ:3:result_int64x1 [] = { 3333333333333333,  }
VCNT/VCNTQ:4:result_uint8x8 [] = { 4, 4, 4, 4, 4, 4, 4, 4,  }
VCNT/VCNTQ:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VCNT/VCNTQ:6:result_uint32x2 [] = { 33333333, 33333333,  }
VCNT/VCNTQ:7:result_uint64x1 [] = { 3333333333333333,  }
VCNT/VCNTQ:8:result_poly8x8 [] = { 4, 4, 4, 4, 4, 4, 4, 4,  }
VCNT/VCNTQ:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VCNT/VCNTQ:10:result_float32x2 [] = { 33333333, 33333333,  }
VCNT/VCNTQ:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VCNT/VCNTQ:12:result_int8x16 [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  }
VCNT/VCNTQ:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VCNT/VCNTQ:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VCNT/VCNTQ:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VCNT/VCNTQ:16:result_uint8x16 [] = { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,  }
VCNT/VCNTQ:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VCNT/VCNTQ:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VCNT/VCNTQ:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VCNT/VCNTQ:20:result_poly8x16 [] = { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,  }
VCNT/VCNTQ:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VCNT/VCNTQ:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VCNT/VCNTQ:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHRN_N cumulative saturation output:
VQSHRN_N:0:vqshrn_n_s16 Neon cumulative saturation 0
VQSHRN_N:1:vqshrn_n_s32 Neon cumulative saturation 0
VQSHRN_N:2:vqshrn_n_s64 Neon cumulative saturation 0
VQSHRN_N:3:vqshrn_n_u16 Neon cumulative saturation 1
VQSHRN_N:4:vqshrn_n_u32 Neon cumulative saturation 1
VQSHRN_N:5:vqshrn_n_u64 Neon cumulative saturation 1

VQSHRN_N output:
VQSHRN_N:6:result_int8x8 [] = { fffffff8, fffffff8, fffffff9, fffffff9, fffffffa, fffffffa, fffffffb, fffffffb,  }
VQSHRN_N:7:result_int16x4 [] = { fffffff8, fffffff8, fffffff9, fffffff9,  }
VQSHRN_N:8:result_int32x2 [] = { fffffffc, fffffffc,  }
VQSHRN_N:9:result_int64x1 [] = { 3333333333333333,  }
VQSHRN_N:10:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQSHRN_N:11:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQSHRN_N:12:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQSHRN_N:13:result_uint64x1 [] = { 3333333333333333,  }
VQSHRN_N:14:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRN_N:15:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHRN_N:16:result_float32x2 [] = { 33333333, 33333333,  }
VQSHRN_N:17:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHRN_N:18:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRN_N:19:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHRN_N:20:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHRN_N:21:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQSHRN_N:22:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRN_N:23:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHRN_N:24:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHRN_N:25:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQSHRN_N:26:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRN_N:27:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHRN_N:28:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHRN_N:29:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHRN_N (check saturation: shift by 3) cumulative saturation output:
VQSHRN_N:30:vqshrn_n_s16 Neon cumulative saturation 1
VQSHRN_N:31:vqshrn_n_s32 Neon cumulative saturation 1
VQSHRN_N:32:vqshrn_n_s64 Neon cumulative saturation 1
VQSHRN_N:33:vqshrn_n_u16 Neon cumulative saturation 1
VQSHRN_N:34:vqshrn_n_u32 Neon cumulative saturation 1
VQSHRN_N:35:vqshrn_n_u64 Neon cumulative saturation 1

VQSHRN_N (check saturation: shift by 3) output:
VQSHRN_N:36:result_int8x8 [] = { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f,  }
VQSHRN_N:37:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQSHRN_N:38:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQSHRN_N:39:result_int64x1 [] = { 3333333333333333,  }
VQSHRN_N:40:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQSHRN_N:41:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQSHRN_N:42:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQSHRN_N:43:result_uint64x1 [] = { 3333333333333333,  }
VQSHRN_N:44:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRN_N:45:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHRN_N:46:result_float32x2 [] = { 33333333, 33333333,  }
VQSHRN_N:47:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHRN_N:48:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRN_N:49:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHRN_N:50:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHRN_N:51:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQSHRN_N:52:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRN_N:53:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHRN_N:54:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHRN_N:55:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQSHRN_N:56:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRN_N:57:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHRN_N:58:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHRN_N:59:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHRN_N (check saturation: shift by max) cumulative saturation output:
VQSHRN_N:60:vqshrn_n_s16 Neon cumulative saturation 0
VQSHRN_N:61:vqshrn_n_s32 Neon cumulative saturation 0
VQSHRN_N:62:vqshrn_n_s64 Neon cumulative saturation 0
VQSHRN_N:63:vqshrn_n_u16 Neon cumulative saturation 0
VQSHRN_N:64:vqshrn_n_u32 Neon cumulative saturation 0
VQSHRN_N:65:vqshrn_n_u64 Neon cumulative saturation 0

VQSHRN_N (check saturation: shift by max) output:
VQSHRN_N:66:result_int8x8 [] = { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f,  }
VQSHRN_N:67:result_int16x4 [] = { 7fff, 7fff, 7fff, 7fff,  }
VQSHRN_N:68:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VQSHRN_N:69:result_int64x1 [] = { 3333333333333333,  }
VQSHRN_N:70:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQSHRN_N:71:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQSHRN_N:72:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQSHRN_N:73:result_uint64x1 [] = { 3333333333333333,  }
VQSHRN_N:74:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRN_N:75:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHRN_N:76:result_float32x2 [] = { 33333333, 33333333,  }
VQSHRN_N:77:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHRN_N:78:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRN_N:79:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHRN_N:80:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHRN_N:81:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQSHRN_N:82:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRN_N:83:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHRN_N:84:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHRN_N:85:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQSHRN_N:86:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRN_N:87:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHRN_N:88:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHRN_N:89:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VPMAX output:
VPMAX:0:result_int8x8 [] = { fffffff1, fffffff3, fffffff5, fffffff7, fffffff1, fffffff3, fffffff5, fffffff7,  }
VPMAX:1:result_int16x4 [] = { fffffff1, fffffff3, fffffff1, fffffff3,  }
VPMAX:2:result_int32x2 [] = { fffffff1, fffffff1,  }
VPMAX:3:result_int64x1 [] = { 3333333333333333,  }
VPMAX:4:result_uint8x8 [] = { f1, f3, f5, f7, f1, f3, f5, f7,  }
VPMAX:5:result_uint16x4 [] = { fff1, fff3, fff1, fff3,  }
VPMAX:6:result_uint32x2 [] = { fffffff1, fffffff1,  }
VPMAX:7:result_uint64x1 [] = { 3333333333333333,  }
VPMAX:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VPMAX:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VPMAX:10:result_float32x2 [] = { c1700000, c1700000,  }
VPMAX:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VPMAX:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VPMAX:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VPMAX:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VPMAX:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VPMAX:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VPMAX:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VPMAX:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VPMAX:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VPMAX:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VPMAX:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VPMAX:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VPMAX:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VPMIN output:
VPMIN:0:result_int8x8 [] = { fffffff0, fffffff2, fffffff4, fffffff6, fffffff0, fffffff2, fffffff4, fffffff6,  }
VPMIN:1:result_int16x4 [] = { fffffff0, fffffff2, fffffff0, fffffff2,  }
VPMIN:2:result_int32x2 [] = { fffffff0, fffffff0,  }
VPMIN:3:result_int64x1 [] = { 3333333333333333,  }
VPMIN:4:result_uint8x8 [] = { f0, f2, f4, f6, f0, f2, f4, f6,  }
VPMIN:5:result_uint16x4 [] = { fff0, fff2, fff0, fff2,  }
VPMIN:6:result_uint32x2 [] = { fffffff0, fffffff0,  }
VPMIN:7:result_uint64x1 [] = { 3333333333333333,  }
VPMIN:8:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VPMIN:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VPMIN:10:result_float32x2 [] = { c1800000, c1800000,  }
VPMIN:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VPMIN:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VPMIN:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VPMIN:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VPMIN:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VPMIN:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VPMIN:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VPMIN:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VPMIN:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VPMIN:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VPMIN:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VPMIN:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VPMIN:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHRUN_N (negative input) cumulative saturation output:
VQSHRUN_N:0:vqshrun_n_s16 Neon cumulative saturation 1
VQSHRUN_N:1:vqshrun_n_s32 Neon cumulative saturation 1
VQSHRUN_N:2:vqshrun_n_s64 Neon cumulative saturation 1

VQSHRUN_N (negative input) output:
VQSHRUN_N:3:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRUN_N:4:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHRUN_N:5:result_int32x2 [] = { 33333333, 33333333,  }
VQSHRUN_N:6:result_int64x1 [] = { 3333333333333333,  }
VQSHRUN_N:7:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQSHRUN_N:8:result_uint16x4 [] = { 0, 0, 0, 0,  }
VQSHRUN_N:9:result_uint32x2 [] = { 0, 0,  }
VQSHRUN_N:10:result_uint64x1 [] = { 3333333333333333,  }
VQSHRUN_N:11:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRUN_N:12:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHRUN_N:13:result_float32x2 [] = { 33333333, 33333333,  }
VQSHRUN_N:14:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHRUN_N:15:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRUN_N:16:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHRUN_N:17:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHRUN_N:18:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQSHRUN_N:19:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRUN_N:20:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHRUN_N:21:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHRUN_N:22:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQSHRUN_N:23:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRUN_N:24:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHRUN_N:25:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHRUN_N:26:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHRUN_N (check cumulative saturation) cumulative saturation output:
VQSHRUN_N:27:vqshrun_n_s16 Neon cumulative saturation 1
VQSHRUN_N:28:vqshrun_n_s32 Neon cumulative saturation 1
VQSHRUN_N:29:vqshrun_n_s64 Neon cumulative saturation 1

VQSHRUN_N (check cumulative saturation) output:
VQSHRUN_N:30:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRUN_N:31:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHRUN_N:32:result_int32x2 [] = { 33333333, 33333333,  }
VQSHRUN_N:33:result_int64x1 [] = { 3333333333333333,  }
VQSHRUN_N:34:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQSHRUN_N:35:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQSHRUN_N:36:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQSHRUN_N:37:result_uint64x1 [] = { 3333333333333333,  }
VQSHRUN_N:38:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRUN_N:39:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHRUN_N:40:result_float32x2 [] = { 33333333, 33333333,  }
VQSHRUN_N:41:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHRUN_N:42:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRUN_N:43:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHRUN_N:44:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHRUN_N:45:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQSHRUN_N:46:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRUN_N:47:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHRUN_N:48:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHRUN_N:49:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQSHRUN_N:50:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRUN_N:51:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHRUN_N:52:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHRUN_N:53:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQSHRUN_N cumulative saturation output:
VQSHRUN_N:54:vqshrun_n_s16 Neon cumulative saturation 0
VQSHRUN_N:55:vqshrun_n_s32 Neon cumulative saturation 1
VQSHRUN_N:56:vqshrun_n_s64 Neon cumulative saturation 0

VQSHRUN_N output:
VQSHRUN_N:57:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRUN_N:58:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHRUN_N:59:result_int32x2 [] = { 33333333, 33333333,  }
VQSHRUN_N:60:result_int64x1 [] = { 3333333333333333,  }
VQSHRUN_N:61:result_uint8x8 [] = { 48, 48, 48, 48, 48, 48, 48, 48,  }
VQSHRUN_N:62:result_uint16x4 [] = { 0, 0, 0, 0,  }
VQSHRUN_N:63:result_uint32x2 [] = { deadbe, deadbe,  }
VQSHRUN_N:64:result_uint64x1 [] = { 3333333333333333,  }
VQSHRUN_N:65:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRUN_N:66:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQSHRUN_N:67:result_float32x2 [] = { 33333333, 33333333,  }
VQSHRUN_N:68:result_float16x4 [] = { 0, 0, 0, 0,  }
VQSHRUN_N:69:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRUN_N:70:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHRUN_N:71:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHRUN_N:72:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQSHRUN_N:73:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRUN_N:74:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHRUN_N:75:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHRUN_N:76:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQSHRUN_N:77:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQSHRUN_N:78:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQSHRUN_N:79:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQSHRUN_N:80:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRSHRUN_N (negative input) cumulative saturation output:
VQRSHRUN_N:0:vqrshrun_n_s16 Neon cumulative saturation 0
VQRSHRUN_N:1:vqrshrun_n_s32 Neon cumulative saturation 0
VQRSHRUN_N:2:vqrshrun_n_s64 Neon cumulative saturation 1

VQRSHRUN_N (negative input) output:
VQRSHRUN_N:3:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:4:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:5:result_int32x2 [] = { 33333333, 33333333,  }
VQRSHRUN_N:6:result_int64x1 [] = { 3333333333333333,  }
VQRSHRUN_N:7:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHRUN_N:8:result_uint16x4 [] = { 0, 0, 0, 0,  }
VQRSHRUN_N:9:result_uint32x2 [] = { 0, 0,  }
VQRSHRUN_N:10:result_uint64x1 [] = { 3333333333333333,  }
VQRSHRUN_N:11:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:12:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:13:result_float32x2 [] = { 33333333, 33333333,  }
VQRSHRUN_N:14:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRSHRUN_N:15:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:16:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:17:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRUN_N:18:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRSHRUN_N:19:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:20:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:21:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRUN_N:22:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRSHRUN_N:23:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:24:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:25:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRUN_N:26:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRSHRUN_N (check cumulative saturation: shift by 1) cumulative saturation output:
VQRSHRUN_N:27:vqrshrun_n_s16 Neon cumulative saturation 1
VQRSHRUN_N:28:vqrshrun_n_s32 Neon cumulative saturation 1
VQRSHRUN_N:29:vqrshrun_n_s64 Neon cumulative saturation 1

VQRSHRUN_N (check cumulative saturation: shift by 1) output:
VQRSHRUN_N:30:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:31:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:32:result_int32x2 [] = { 33333333, 33333333,  }
VQRSHRUN_N:33:result_int64x1 [] = { 3333333333333333,  }
VQRSHRUN_N:34:result_uint8x8 [] = { ff, ff, ff, ff, ff, ff, ff, ff,  }
VQRSHRUN_N:35:result_uint16x4 [] = { ffff, ffff, ffff, ffff,  }
VQRSHRUN_N:36:result_uint32x2 [] = { ffffffff, ffffffff,  }
VQRSHRUN_N:37:result_uint64x1 [] = { 3333333333333333,  }
VQRSHRUN_N:38:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:39:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:40:result_float32x2 [] = { 33333333, 33333333,  }
VQRSHRUN_N:41:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRSHRUN_N:42:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:43:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:44:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRUN_N:45:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRSHRUN_N:46:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:47:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:48:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRUN_N:49:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRSHRUN_N:50:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:51:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:52:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRUN_N:53:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRSHRUN_N (check cumulative saturation: shift by max, positive input) cumulative saturation output:
VQRSHRUN_N:54:vqrshrun_n_s16 Neon cumulative saturation 0
VQRSHRUN_N:55:vqrshrun_n_s32 Neon cumulative saturation 0
VQRSHRUN_N:56:vqrshrun_n_s64 Neon cumulative saturation 0

VQRSHRUN_N (check cumulative saturation: shift by max, positive input) output:
VQRSHRUN_N:57:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:58:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:59:result_int32x2 [] = { 33333333, 33333333,  }
VQRSHRUN_N:60:result_int64x1 [] = { 3333333333333333,  }
VQRSHRUN_N:61:result_uint8x8 [] = { 80, 80, 80, 80, 80, 80, 80, 80,  }
VQRSHRUN_N:62:result_uint16x4 [] = { 8000, 8000, 8000, 8000,  }
VQRSHRUN_N:63:result_uint32x2 [] = { 80000000, 80000000,  }
VQRSHRUN_N:64:result_uint64x1 [] = { 3333333333333333,  }
VQRSHRUN_N:65:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:66:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:67:result_float32x2 [] = { 33333333, 33333333,  }
VQRSHRUN_N:68:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRSHRUN_N:69:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:70:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:71:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRUN_N:72:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRSHRUN_N:73:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:74:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:75:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRUN_N:76:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRSHRUN_N:77:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:78:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:79:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRUN_N:80:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRSHRUN_N (check cumulative saturation: shift by max, negative input) cumulative saturation output:
VQRSHRUN_N:81:vqrshrun_n_s16 Neon cumulative saturation 1
VQRSHRUN_N:82:vqrshrun_n_s32 Neon cumulative saturation 1
VQRSHRUN_N:83:vqrshrun_n_s64 Neon cumulative saturation 1

VQRSHRUN_N (check cumulative saturation: shift by max, negative input) output:
VQRSHRUN_N:84:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:85:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:86:result_int32x2 [] = { 33333333, 33333333,  }
VQRSHRUN_N:87:result_int64x1 [] = { 3333333333333333,  }
VQRSHRUN_N:88:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VQRSHRUN_N:89:result_uint16x4 [] = { 0, 0, 0, 0,  }
VQRSHRUN_N:90:result_uint32x2 [] = { 0, 0,  }
VQRSHRUN_N:91:result_uint64x1 [] = { 3333333333333333,  }
VQRSHRUN_N:92:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:93:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:94:result_float32x2 [] = { 33333333, 33333333,  }
VQRSHRUN_N:95:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRSHRUN_N:96:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:97:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:98:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRUN_N:99:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRSHRUN_N:100:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:101:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:102:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRUN_N:103:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRSHRUN_N:104:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:105:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:106:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRUN_N:107:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VQRSHRUN_N cumulative saturation output:
VQRSHRUN_N:108:vqrshrun_n_s16 Neon cumulative saturation 0
VQRSHRUN_N:109:vqrshrun_n_s32 Neon cumulative saturation 1
VQRSHRUN_N:110:vqrshrun_n_s64 Neon cumulative saturation 0

VQRSHRUN_N output:
VQRSHRUN_N:111:result_int8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:112:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:113:result_int32x2 [] = { 33333333, 33333333,  }
VQRSHRUN_N:114:result_int64x1 [] = { 3333333333333333,  }
VQRSHRUN_N:115:result_uint8x8 [] = { 49, 49, 49, 49, 49, 49, 49, 49,  }
VQRSHRUN_N:116:result_uint16x4 [] = { 0, 0, 0, 0,  }
VQRSHRUN_N:117:result_uint32x2 [] = { deadbf, deadbf,  }
VQRSHRUN_N:118:result_uint64x1 [] = { 3333333333333333,  }
VQRSHRUN_N:119:result_poly8x8 [] = { 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:120:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:121:result_float32x2 [] = { 33333333, 33333333,  }
VQRSHRUN_N:122:result_float16x4 [] = { 0, 0, 0, 0,  }
VQRSHRUN_N:123:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:124:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:125:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRUN_N:126:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRSHRUN_N:127:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:128:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:129:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRUN_N:130:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VQRSHRUN_N:131:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VQRSHRUN_N:132:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VQRSHRUN_N:133:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VQRSHRUN_N:134:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VST2_LANE/VST2Q_LANE chunk 0 output:
VST2_LANE/VST2Q_LANE:0:result_int8x8 [] = { fffffff0, fffffff1, 0, 0, 0, 0, 0, 0,  }
VST2_LANE/VST2Q_LANE:1:result_int16x4 [] = { fffffff0, fffffff1, 0, 0,  }
VST2_LANE/VST2Q_LANE:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VST2_LANE/VST2Q_LANE:3:result_int64x1 [] = { 3333333333333333,  }
VST2_LANE/VST2Q_LANE:4:result_uint8x8 [] = { f0, f1, 0, 0, 0, 0, 0, 0,  }
VST2_LANE/VST2Q_LANE:5:result_uint16x4 [] = { fff0, fff1, 0, 0,  }
VST2_LANE/VST2Q_LANE:6:result_uint32x2 [] = { fffffff0, fffffff1,  }
VST2_LANE/VST2Q_LANE:7:result_uint64x1 [] = { 3333333333333333,  }
VST2_LANE/VST2Q_LANE:8:result_poly8x8 [] = { f0, f1, 0, 0, 0, 0, 0, 0,  }
VST2_LANE/VST2Q_LANE:9:result_poly16x4 [] = { fff0, fff1, 0, 0,  }
VST2_LANE/VST2Q_LANE:10:result_float32x2 [] = { c1800000, c1700000,  }
VST2_LANE/VST2Q_LANE:11:result_float16x4 [] = { cc00, cb80, 0, 0,  }
VST2_LANE/VST2Q_LANE:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST2_LANE/VST2Q_LANE:13:result_int16x8 [] = { fffffff0, fffffff1, 0, 0, 0, 0, 0, 0,  }
VST2_LANE/VST2Q_LANE:14:result_int32x4 [] = { fffffff0, fffffff1, 0, 0,  }
VST2_LANE/VST2Q_LANE:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VST2_LANE/VST2Q_LANE:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST2_LANE/VST2Q_LANE:17:result_uint16x8 [] = { fff0, fff1, 0, 0, 0, 0, 0, 0,  }
VST2_LANE/VST2Q_LANE:18:result_uint32x4 [] = { fffffff0, fffffff1, 0, 0,  }
VST2_LANE/VST2Q_LANE:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VST2_LANE/VST2Q_LANE:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST2_LANE/VST2Q_LANE:21:result_poly16x8 [] = { fff0, fff1, 0, 0, 0, 0, 0, 0,  }
VST2_LANE/VST2Q_LANE:22:result_float32x4 [] = { c1800000, c1700000, 0, 0,  }
VST2_LANE/VST2Q_LANE:23:result_float16x8 [] = { cc00, cb80, 0, 0, 0, 0, 0, 0,  }

VST2_LANE/VST2Q_LANE chunk 1 output:
VST2_LANE/VST2Q_LANE:24:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST2_LANE/VST2Q_LANE:25:result_int16x4 [] = { 0, 0, 0, 0,  }
VST2_LANE/VST2Q_LANE:26:result_int32x2 [] = { 0, 0,  }
VST2_LANE/VST2Q_LANE:27:result_int64x1 [] = { 3333333333333333,  }
VST2_LANE/VST2Q_LANE:28:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST2_LANE/VST2Q_LANE:29:result_uint16x4 [] = { 0, 0, 0, 0,  }
VST2_LANE/VST2Q_LANE:30:result_uint32x2 [] = { 0, 0,  }
VST2_LANE/VST2Q_LANE:31:result_uint64x1 [] = { 3333333333333333,  }
VST2_LANE/VST2Q_LANE:32:result_poly8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST2_LANE/VST2Q_LANE:33:result_poly16x4 [] = { 0, 0, 0, 0,  }
VST2_LANE/VST2Q_LANE:34:result_float32x2 [] = { 0, 0,  }
VST2_LANE/VST2Q_LANE:35:result_float16x4 [] = { 0, 0, 0, 0,  }
VST2_LANE/VST2Q_LANE:36:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST2_LANE/VST2Q_LANE:37:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST2_LANE/VST2Q_LANE:38:result_int32x4 [] = { 0, 0, 0, 0,  }
VST2_LANE/VST2Q_LANE:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VST2_LANE/VST2Q_LANE:40:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST2_LANE/VST2Q_LANE:41:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST2_LANE/VST2Q_LANE:42:result_uint32x4 [] = { 0, 0, 0, 0,  }
VST2_LANE/VST2Q_LANE:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VST2_LANE/VST2Q_LANE:44:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST2_LANE/VST2Q_LANE:45:result_poly16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST2_LANE/VST2Q_LANE:46:result_float32x4 [] = { 0, 0, 0, 0,  }
VST2_LANE/VST2Q_LANE:47:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VST3_LANE/VST3Q_LANE chunk 0 output:
VST3_LANE/VST3Q_LANE:0:result_int8x8 [] = { fffffff0, fffffff1, fffffff2, 0, 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:1:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, 0,  }
VST3_LANE/VST3Q_LANE:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VST3_LANE/VST3Q_LANE:3:result_int64x1 [] = { 3333333333333333,  }
VST3_LANE/VST3Q_LANE:4:result_uint8x8 [] = { f0, f1, f2, 0, 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:5:result_uint16x4 [] = { fff0, fff1, fff2, 0,  }
VST3_LANE/VST3Q_LANE:6:result_uint32x2 [] = { fffffff0, fffffff1,  }
VST3_LANE/VST3Q_LANE:7:result_uint64x1 [] = { 3333333333333333,  }
VST3_LANE/VST3Q_LANE:8:result_poly8x8 [] = { f0, f1, f2, 0, 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:9:result_poly16x4 [] = { fff0, fff1, fff2, 0,  }
VST3_LANE/VST3Q_LANE:10:result_float32x2 [] = { c1800000, c1700000,  }
VST3_LANE/VST3Q_LANE:11:result_float16x4 [] = { cc00, cb80, cb00, 0,  }
VST3_LANE/VST3Q_LANE:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST3_LANE/VST3Q_LANE:13:result_int16x8 [] = { fffffff0, fffffff1, fffffff2, 0, 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:14:result_int32x4 [] = { fffffff0, fffffff1, fffffff2, 0,  }
VST3_LANE/VST3Q_LANE:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VST3_LANE/VST3Q_LANE:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST3_LANE/VST3Q_LANE:17:result_uint16x8 [] = { fff0, fff1, fff2, 0, 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:18:result_uint32x4 [] = { fffffff0, fffffff1, fffffff2, 0,  }
VST3_LANE/VST3Q_LANE:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VST3_LANE/VST3Q_LANE:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST3_LANE/VST3Q_LANE:21:result_poly16x8 [] = { fff0, fff1, fff2, 0, 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:22:result_float32x4 [] = { c1800000, c1700000, c1600000, 0,  }
VST3_LANE/VST3Q_LANE:23:result_float16x8 [] = { cc00, cb80, cb00, 0, 0, 0, 0, 0,  }

VST3_LANE/VST3Q_LANE chunk 1 output:
VST3_LANE/VST3Q_LANE:24:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:25:result_int16x4 [] = { 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:26:result_int32x2 [] = { fffffff2, 0,  }
VST3_LANE/VST3Q_LANE:27:result_int64x1 [] = { 3333333333333333,  }
VST3_LANE/VST3Q_LANE:28:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:29:result_uint16x4 [] = { 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:30:result_uint32x2 [] = { fffffff2, 0,  }
VST3_LANE/VST3Q_LANE:31:result_uint64x1 [] = { 3333333333333333,  }
VST3_LANE/VST3Q_LANE:32:result_poly8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:33:result_poly16x4 [] = { 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:34:result_float32x2 [] = { c1600000, 0,  }
VST3_LANE/VST3Q_LANE:35:result_float16x4 [] = { 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:36:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST3_LANE/VST3Q_LANE:37:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:38:result_int32x4 [] = { 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VST3_LANE/VST3Q_LANE:40:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST3_LANE/VST3Q_LANE:41:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:42:result_uint32x4 [] = { 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VST3_LANE/VST3Q_LANE:44:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST3_LANE/VST3Q_LANE:45:result_poly16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:46:result_float32x4 [] = { 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:47:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VST3_LANE/VST3Q_LANE chunk 2 output:
VST3_LANE/VST3Q_LANE:48:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:49:result_int16x4 [] = { 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:50:result_int32x2 [] = { 0, 0,  }
VST3_LANE/VST3Q_LANE:51:result_int64x1 [] = { 3333333333333333,  }
VST3_LANE/VST3Q_LANE:52:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:53:result_uint16x4 [] = { 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:54:result_uint32x2 [] = { 0, 0,  }
VST3_LANE/VST3Q_LANE:55:result_uint64x1 [] = { 3333333333333333,  }
VST3_LANE/VST3Q_LANE:56:result_poly8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:57:result_poly16x4 [] = { 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:58:result_float32x2 [] = { 0, 0,  }
VST3_LANE/VST3Q_LANE:59:result_float16x4 [] = { 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:60:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST3_LANE/VST3Q_LANE:61:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:62:result_int32x4 [] = { 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:63:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VST3_LANE/VST3Q_LANE:64:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST3_LANE/VST3Q_LANE:65:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:66:result_uint32x4 [] = { 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:67:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VST3_LANE/VST3Q_LANE:68:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST3_LANE/VST3Q_LANE:69:result_poly16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:70:result_float32x4 [] = { 0, 0, 0, 0,  }
VST3_LANE/VST3Q_LANE:71:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VST4_LANE/VST4Q_LANE chunk 0 output:
VST4_LANE/VST4Q_LANE:0:result_int8x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:1:result_int16x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VST4_LANE/VST4Q_LANE:2:result_int32x2 [] = { fffffff0, fffffff1,  }
VST4_LANE/VST4Q_LANE:3:result_int64x1 [] = { 3333333333333333,  }
VST4_LANE/VST4Q_LANE:4:result_uint8x8 [] = { f0, f1, f2, f3, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:5:result_uint16x4 [] = { fff0, fff1, fff2, fff3,  }
VST4_LANE/VST4Q_LANE:6:result_uint32x2 [] = { fffffff0, fffffff1,  }
VST4_LANE/VST4Q_LANE:7:result_uint64x1 [] = { 3333333333333333,  }
VST4_LANE/VST4Q_LANE:8:result_poly8x8 [] = { f0, f1, f2, f3, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:9:result_poly16x4 [] = { fff0, fff1, fff2, fff3,  }
VST4_LANE/VST4Q_LANE:10:result_float32x2 [] = { c1800000, c1700000,  }
VST4_LANE/VST4Q_LANE:11:result_float16x4 [] = { cc00, cb80, cb00, ca80,  }
VST4_LANE/VST4Q_LANE:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST4_LANE/VST4Q_LANE:13:result_int16x8 [] = { fffffff0, fffffff1, fffffff2, fffffff3, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:14:result_int32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VST4_LANE/VST4Q_LANE:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VST4_LANE/VST4Q_LANE:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST4_LANE/VST4Q_LANE:17:result_uint16x8 [] = { fff0, fff1, fff2, fff3, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:18:result_uint32x4 [] = { fffffff0, fffffff1, fffffff2, fffffff3,  }
VST4_LANE/VST4Q_LANE:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VST4_LANE/VST4Q_LANE:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST4_LANE/VST4Q_LANE:21:result_poly16x8 [] = { fff0, fff1, fff2, fff3, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:22:result_float32x4 [] = { c1800000, c1700000, c1600000, c1500000,  }
VST4_LANE/VST4Q_LANE:23:result_float16x8 [] = { cc00, cb80, cb00, ca80, 0, 0, 0, 0,  }

VST4_LANE/VST4Q_LANE chunk 1 output:
VST4_LANE/VST4Q_LANE:24:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:25:result_int16x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:26:result_int32x2 [] = { fffffff2, fffffff3,  }
VST4_LANE/VST4Q_LANE:27:result_int64x1 [] = { 3333333333333333,  }
VST4_LANE/VST4Q_LANE:28:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:29:result_uint16x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:30:result_uint32x2 [] = { fffffff2, fffffff3,  }
VST4_LANE/VST4Q_LANE:31:result_uint64x1 [] = { 3333333333333333,  }
VST4_LANE/VST4Q_LANE:32:result_poly8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:33:result_poly16x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:34:result_float32x2 [] = { c1600000, c1500000,  }
VST4_LANE/VST4Q_LANE:35:result_float16x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:36:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST4_LANE/VST4Q_LANE:37:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:38:result_int32x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:39:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VST4_LANE/VST4Q_LANE:40:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST4_LANE/VST4Q_LANE:41:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:42:result_uint32x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:43:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VST4_LANE/VST4Q_LANE:44:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST4_LANE/VST4Q_LANE:45:result_poly16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:46:result_float32x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:47:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VST4_LANE/VST4Q_LANE chunk 2 output:
VST4_LANE/VST4Q_LANE:48:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:49:result_int16x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:50:result_int32x2 [] = { 0, 0,  }
VST4_LANE/VST4Q_LANE:51:result_int64x1 [] = { 3333333333333333,  }
VST4_LANE/VST4Q_LANE:52:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:53:result_uint16x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:54:result_uint32x2 [] = { 0, 0,  }
VST4_LANE/VST4Q_LANE:55:result_uint64x1 [] = { 3333333333333333,  }
VST4_LANE/VST4Q_LANE:56:result_poly8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:57:result_poly16x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:58:result_float32x2 [] = { 0, 0,  }
VST4_LANE/VST4Q_LANE:59:result_float16x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:60:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST4_LANE/VST4Q_LANE:61:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:62:result_int32x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:63:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VST4_LANE/VST4Q_LANE:64:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST4_LANE/VST4Q_LANE:65:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:66:result_uint32x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:67:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VST4_LANE/VST4Q_LANE:68:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST4_LANE/VST4Q_LANE:69:result_poly16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:70:result_float32x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:71:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VST4_LANE/VST4Q_LANE chunk 3 output:
VST4_LANE/VST4Q_LANE:72:result_int8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:73:result_int16x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:74:result_int32x2 [] = { 0, 0,  }
VST4_LANE/VST4Q_LANE:75:result_int64x1 [] = { 3333333333333333,  }
VST4_LANE/VST4Q_LANE:76:result_uint8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:77:result_uint16x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:78:result_uint32x2 [] = { 0, 0,  }
VST4_LANE/VST4Q_LANE:79:result_uint64x1 [] = { 3333333333333333,  }
VST4_LANE/VST4Q_LANE:80:result_poly8x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:81:result_poly16x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:82:result_float32x2 [] = { 0, 0,  }
VST4_LANE/VST4Q_LANE:83:result_float16x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:84:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST4_LANE/VST4Q_LANE:85:result_int16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:86:result_int32x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:87:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VST4_LANE/VST4Q_LANE:88:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST4_LANE/VST4Q_LANE:89:result_uint16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:90:result_uint32x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:91:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VST4_LANE/VST4Q_LANE:92:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VST4_LANE/VST4Q_LANE:93:result_poly16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:94:result_float32x4 [] = { 0, 0, 0, 0,  }
VST4_LANE/VST4Q_LANE:95:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VTBL1 output:
VTBL1:0:result_int8x8 [] = { 0, fffffff2, fffffff2, fffffff2, 0, 0, fffffff2, fffffff2,  }
VTBL1:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBL1:2:result_int32x2 [] = { 33333333, 33333333,  }
VTBL1:3:result_int64x1 [] = { 3333333333333333,  }
VTBL1:4:result_uint8x8 [] = { 0, f3, f3, f3, 0, 0, f3, f3,  }
VTBL1:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBL1:6:result_uint32x2 [] = { 33333333, 33333333,  }
VTBL1:7:result_uint64x1 [] = { 3333333333333333,  }
VTBL1:8:result_poly8x8 [] = { 0, f3, f3, f3, 0, 0, f3, f3,  }
VTBL1:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBL1:10:result_float32x2 [] = { 33333333, 33333333,  }
VTBL1:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VTBL1:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBL1:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBL1:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBL1:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VTBL1:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBL1:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBL1:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBL1:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VTBL1:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBL1:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBL1:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBL1:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VTBL2 output:
VTBL2:0:result_int8x8 [] = { fffffff6, fffffff3, fffffff3, fffffff3, 0, 0, fffffff3, fffffff3,  }
VTBL2:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBL2:2:result_int32x2 [] = { 33333333, 33333333,  }
VTBL2:3:result_int64x1 [] = { 3333333333333333,  }
VTBL2:4:result_uint8x8 [] = { f6, f5, f5, f5, 0, 0, f5, f5,  }
VTBL2:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBL2:6:result_uint32x2 [] = { 33333333, 33333333,  }
VTBL2:7:result_uint64x1 [] = { 3333333333333333,  }
VTBL2:8:result_poly8x8 [] = { f6, f5, f5, f5, 0, 0, f5, f5,  }
VTBL2:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBL2:10:result_float32x2 [] = { 33333333, 33333333,  }
VTBL2:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VTBL2:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBL2:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBL2:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBL2:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VTBL2:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBL2:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBL2:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBL2:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VTBL2:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBL2:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBL2:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBL2:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VTBL3 output:
VTBL3:0:result_int8x8 [] = { fffffff8, fffffff4, fffffff4, fffffff4, ffffffff, 0, fffffff4, fffffff4,  }
VTBL3:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBL3:2:result_int32x2 [] = { 33333333, 33333333,  }
VTBL3:3:result_int64x1 [] = { 3333333333333333,  }
VTBL3:4:result_uint8x8 [] = { f8, f7, f7, f7, ff, 0, f7, f7,  }
VTBL3:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBL3:6:result_uint32x2 [] = { 33333333, 33333333,  }
VTBL3:7:result_uint64x1 [] = { 3333333333333333,  }
VTBL3:8:result_poly8x8 [] = { f8, f7, f7, f7, ff, 0, f7, f7,  }
VTBL3:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBL3:10:result_float32x2 [] = { 33333333, 33333333,  }
VTBL3:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VTBL3:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBL3:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBL3:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBL3:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VTBL3:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBL3:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBL3:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBL3:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VTBL3:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBL3:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBL3:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBL3:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VTBL4 output:
VTBL4:0:result_int8x8 [] = { fffffffa, fffffff5, fffffff5, fffffff5, 3, 0, fffffff5, fffffff5,  }
VTBL4:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBL4:2:result_int32x2 [] = { 33333333, 33333333,  }
VTBL4:3:result_int64x1 [] = { 3333333333333333,  }
VTBL4:4:result_uint8x8 [] = { fa, f9, f9, f9, 3, 0, f9, f9,  }
VTBL4:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBL4:6:result_uint32x2 [] = { 33333333, 33333333,  }
VTBL4:7:result_uint64x1 [] = { 3333333333333333,  }
VTBL4:8:result_poly8x8 [] = { fa, f9, f9, f9, 3, 0, f9, f9,  }
VTBL4:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBL4:10:result_float32x2 [] = { 33333333, 33333333,  }
VTBL4:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VTBL4:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBL4:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBL4:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBL4:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VTBL4:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBL4:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBL4:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBL4:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VTBL4:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBL4:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBL4:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBL4:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VTBX1 output:
VTBX1:0:result_int8x8 [] = { 33, fffffff2, fffffff2, fffffff2, 33, 33, fffffff2, fffffff2,  }
VTBX1:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBX1:2:result_int32x2 [] = { 33333333, 33333333,  }
VTBX1:3:result_int64x1 [] = { 3333333333333333,  }
VTBX1:4:result_uint8x8 [] = { cc, f3, f3, f3, cc, cc, f3, f3,  }
VTBX1:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBX1:6:result_uint32x2 [] = { 33333333, 33333333,  }
VTBX1:7:result_uint64x1 [] = { 3333333333333333,  }
VTBX1:8:result_poly8x8 [] = { cc, f3, f3, f3, cc, cc, f3, f3,  }
VTBX1:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBX1:10:result_float32x2 [] = { 33333333, 33333333,  }
VTBX1:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VTBX1:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBX1:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBX1:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBX1:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VTBX1:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBX1:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBX1:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBX1:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VTBX1:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBX1:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBX1:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBX1:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VTBX2 output:
VTBX2:0:result_int8x8 [] = { fffffff6, fffffff3, fffffff3, fffffff3, 33, 33, fffffff3, fffffff3,  }
VTBX2:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBX2:2:result_int32x2 [] = { 33333333, 33333333,  }
VTBX2:3:result_int64x1 [] = { 3333333333333333,  }
VTBX2:4:result_uint8x8 [] = { f6, f5, f5, f5, cc, cc, f5, f5,  }
VTBX2:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBX2:6:result_uint32x2 [] = { 33333333, 33333333,  }
VTBX2:7:result_uint64x1 [] = { 3333333333333333,  }
VTBX2:8:result_poly8x8 [] = { f6, f5, f5, f5, cc, cc, f5, f5,  }
VTBX2:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBX2:10:result_float32x2 [] = { 33333333, 33333333,  }
VTBX2:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VTBX2:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBX2:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBX2:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBX2:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VTBX2:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBX2:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBX2:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBX2:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VTBX2:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBX2:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBX2:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBX2:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VTBX3 output:
VTBX3:0:result_int8x8 [] = { fffffff8, fffffff4, fffffff4, fffffff4, ffffffff, 33, fffffff4, fffffff4,  }
VTBX3:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBX3:2:result_int32x2 [] = { 33333333, 33333333,  }
VTBX3:3:result_int64x1 [] = { 3333333333333333,  }
VTBX3:4:result_uint8x8 [] = { f8, f7, f7, f7, ff, cc, f7, f7,  }
VTBX3:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBX3:6:result_uint32x2 [] = { 33333333, 33333333,  }
VTBX3:7:result_uint64x1 [] = { 3333333333333333,  }
VTBX3:8:result_poly8x8 [] = { f8, f7, f7, f7, ff, cc, f7, f7,  }
VTBX3:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBX3:10:result_float32x2 [] = { 33333333, 33333333,  }
VTBX3:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VTBX3:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBX3:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBX3:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBX3:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VTBX3:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBX3:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBX3:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBX3:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VTBX3:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBX3:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBX3:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBX3:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VTBX4 output:
VTBX4:0:result_int8x8 [] = { fffffffa, fffffff5, fffffff5, fffffff5, 3, 33, fffffff5, fffffff5,  }
VTBX4:1:result_int16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBX4:2:result_int32x2 [] = { 33333333, 33333333,  }
VTBX4:3:result_int64x1 [] = { 3333333333333333,  }
VTBX4:4:result_uint8x8 [] = { fa, f9, f9, f9, 3, cc, f9, f9,  }
VTBX4:5:result_uint16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBX4:6:result_uint32x2 [] = { 33333333, 33333333,  }
VTBX4:7:result_uint64x1 [] = { 3333333333333333,  }
VTBX4:8:result_poly8x8 [] = { fa, f9, f9, f9, 3, cc, f9, f9,  }
VTBX4:9:result_poly16x4 [] = { 3333, 3333, 3333, 3333,  }
VTBX4:10:result_float32x2 [] = { 33333333, 33333333,  }
VTBX4:11:result_float16x4 [] = { 0, 0, 0, 0,  }
VTBX4:12:result_int8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBX4:13:result_int16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBX4:14:result_int32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBX4:15:result_int64x2 [] = { 3333333333333333, 3333333333333333,  }
VTBX4:16:result_uint8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBX4:17:result_uint16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBX4:18:result_uint32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBX4:19:result_uint64x2 [] = { 3333333333333333, 3333333333333333,  }
VTBX4:20:result_poly8x16 [] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,  }
VTBX4:21:result_poly16x8 [] = { 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,  }
VTBX4:22:result_float32x4 [] = { 33333333, 33333333, 33333333, 33333333,  }
VTBX4:23:result_float16x8 [] = { 0, 0, 0, 0, 0, 0, 0, 0,  }

VRECPE/VRECPEQ  (positive input) output:
VRECPE/VRECPEQ:0:result_uint32x2 [] = { ffffffff, ffffffff,  }
VRECPE/VRECPEQ:1:result_uint32x4 [] = { bf000000, bf000000, bf000000, bf000000,  }
VRECPE/VRECPEQ:2:result_float32x2 [] = { 3f068000, 3f068000,  }
VRECPE/VRECPEQ:3:result_float32x4 [] = { 3c030000, 3c030000, 3c030000, 3c030000,  }

VRECPE/VRECPEQ  (negative input) output:
VRECPE/VRECPEQ:4:result_uint32x2 [] = { 80000000, 80000000,  }
VRECPE/VRECPEQ:5:result_uint32x4 [] = { ee800000, ee800000, ee800000, ee800000,  }
VRECPE/VRECPEQ:6:result_float32x2 [] = { bdcc8000, bdcc8000,  }
VRECPE/VRECPEQ:7:result_float32x4 [] = { bc030000, bc030000, bc030000, bc030000,  }

VRECPE/VRECPEQ  FP special (NaN, infinity) output:
VRECPE/VRECPEQ:8:result_float32x2 [] = { 7fc00000, 7fc00000,  }
VRECPE/VRECPEQ:9:result_float32x4 [] = { 0, 0, 0, 0,  }

VRECPE/VRECPEQ  FP special (zero, large value) output:
VRECPE/VRECPEQ:10:result_float32x2 [] = { 7f800000, 7f800000,  }
VRECPE/VRECPEQ:11:result_float32x4 [] = { 0, 0, 0, 0,  }

VRECPE/VRECPEQ  FP special (-0, -infinity) output:
VRECPE/VRECPEQ:12:result_float32x2 [] = { ff800000, ff800000,  }
VRECPE/VRECPEQ:13:result_float32x4 [] = { 80000000, 80000000, 80000000, 80000000,  }

VRECPE/VRECPEQ  FP special (large negative value) output:
VRECPE/VRECPEQ:14:result_float32x2 [] = { 80000000, 80000000,  }

VRSQRTE/VRSQRTEQ output:
VRSQRTE/VRSQRTEQ:0:result_uint32x2 [] = { ffffffff, ffffffff,  }
VRSQRTE/VRSQRTEQ:1:result_uint32x4 [] = { 9c800000, 9c800000, 9c800000, 9c800000,  }
VRSQRTE/VRSQRTEQ:2:result_float32x2 [] = { 3e498000, 3e498000,  }
VRSQRTE/VRSQRTEQ:3:result_float32x4 [] = { 3e700000, 3e700000, 3e700000, 3e700000,  }

VRSQRTE/VRSQRTEQ (2) output:
VRSQRTE/VRSQRTEQ:4:result_uint32x2 [] = { 80000000, 80000000,  }
VRSQRTE/VRSQRTEQ:5:result_uint32x4 [] = { ae800000, ae800000, ae800000, ae800000,  }

VRSQRTE/VRSQRTEQ (3) output:
VRSQRTE/VRSQRTEQ:6:result_uint32x2 [] = { b4800000, b4800000,  }
VRSQRTE/VRSQRTEQ:7:result_uint32x4 [] = { ed000000, ed000000, ed000000, ed000000,  }

VRSQRTE/VRSQRTEQ FP special (NaN, 0) output:
VRSQRTE/VRSQRTEQ:8:result_float32x2 [] = { 7fc00000, 7fc00000,  }
VRSQRTE/VRSQRTEQ:9:result_float32x4 [] = { 7f800000, 7f800000, 7f800000, 7f800000,  }

VRSQRTE/VRSQRTEQ FP special (negative, infinity) output:
VRSQRTE/VRSQRTEQ:10:result_float32x2 [] = { 7fc00000, 7fc00000,  }
VRSQRTE/VRSQRTEQ:11:result_float32x4 [] = { 0, 0, 0, 0,  }

VRSQRTE/VRSQRTEQ FP special (-0, -infinity) output:
VRSQRTE/VRSQRTEQ:12:result_float32x2 [] = { ff800000, ff800000,  }
VRSQRTE/VRSQRTEQ:13:result_float32x4 [] = { 7fc00000, 7fc00000, 7fc00000, 7fc00000,  }

VCAGE/VCAGEQ output:
VCAGE/VCAGEQ:0:result_uint32x2 [] = { ffffffff, 0,  }
VCAGE/VCAGEQ:1:result_uint32x4 [] = { ffffffff, ffffffff, ffffffff, 0,  }

VCAGE/VCAGEQ output:
VCAGE/VCAGEQ:2:result_uint32x2 [] = { ffffffff, ffffffff,  }
VCAGE/VCAGEQ:3:result_uint32x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }

VCALE/VCALEQ output:
VCALE/VCALEQ:0:result_uint32x2 [] = { ffffffff, ffffffff,  }
VCALE/VCALEQ:1:result_uint32x4 [] = { 0, 0, ffffffff, ffffffff,  }

VCALE/VCALEQ output:
VCALE/VCALEQ:2:result_uint32x2 [] = { 0, 0,  }
VCALE/VCALEQ:3:result_uint32x4 [] = { 0, 0, 0, 0,  }

VCAGT/VCAGTQ output:
VCAGT/VCAGTQ:0:result_uint32x2 [] = { 0, 0,  }
VCAGT/VCAGTQ:1:result_uint32x4 [] = { ffffffff, ffffffff, 0, 0,  }

VCAGT/VCAGTQ output:
VCAGT/VCAGTQ:2:result_uint32x2 [] = { ffffffff, ffffffff,  }
VCAGT/VCAGTQ:3:result_uint32x4 [] = { ffffffff, ffffffff, ffffffff, ffffffff,  }

VCALT/VCALTQ output:
VCALT/VCALTQ:0:result_uint32x2 [] = { 0, ffffffff,  }
VCALT/VCALTQ:1:result_uint32x4 [] = { 0, 0, 0, ffffffff,  }

VCALT/VCALTQ output:
VCALT/VCALTQ:2:result_uint32x2 [] = { 0, 0,  }
VCALT/VCALTQ:3:result_uint32x4 [] = { 0, 0, 0, 0,  }

VCVT/VCVTQ output:
VCVT/VCVTQ:0:result_float32x2 [] = { c1800000, c1700000,  }
VCVT/VCVTQ:1:result_float32x2 [] = { 4f800000, 4f800000,  }
VCVT/VCVTQ:2:result_float32x4 [] = { 41720000, c1720000, 0, 80000000,  }
VCVT/VCVTQ:3:result_float32x4 [] = { c1800000, c1700000, c1600000, c1500000,  }
VCVT/VCVTQ:4:result_float32x4 [] = { 4f800000, 4f800000, 4f800000, 4f800000,  }
VCVT/VCVTQ:5:result_int32x2 [] = { fffffff1, 5,  }
VCVT/VCVTQ:6:result_uint32x2 [] = { 0, 5,  }
VCVT/VCVTQ:7:result_float16x4 [] = { 0, 8000, 4b8f, cb8f,  }
VCVT/VCVTQ:8:result_int32x4 [] = { 0, 0, f, fffffff1,  }
VCVT/VCVTQ:9:result_uint32x4 [] = { 0, 0, f, 0,  }

VCVT_N/VCVTQ_N output:
VCVT_N/VCVTQ_N:10:result_float32x2 [] = { c0800000, c0700000,  }
VCVT_N/VCVTQ_N:11:result_float32x2 [] = { 4c000000, 4c000000,  }
VCVT_N/VCVTQ_N:12:result_float32x4 [] = { b2800000, b2700000, b2600000, b2500000,  }
VCVT_N/VCVTQ_N:13:result_float32x4 [] = { 49800000, 49800000, 49800000, 49800000,  }
VCVT_N/VCVTQ_N:14:result_int32x2 [] = { ff0b3333, 54cccd,  }
VCVT_N/VCVTQ_N:15:result_uint32x2 [] = { 0, 15,  }
VCVT_N/VCVTQ_N:16:result_int32x4 [] = { 0, 0, 1e3d7, fffe1c29,  }
VCVT_N/VCVTQ_N:17:result_uint32x4 [] = { 0, 0, 1e, 0,  }

VCVT/VCVTQ (check rounding) output:
VCVT/VCVTQ:18:result_int32x2 [] = { a, a,  }
VCVT/VCVTQ:19:result_uint32x2 [] = { a, a,  }
VCVT/VCVTQ:20:result_int32x4 [] = { 7d, 7d, 7d, 7d,  }
VCVT/VCVTQ:21:result_uint32x4 [] = { 7d, 7d, 7d, 7d,  }

VCVT_N/VCVTQ_N (check rounding) output:
VCVT_N/VCVTQ_N:22:result_int32x2 [] = { a66666, a66666,  }
VCVT_N/VCVTQ_N:23:result_uint32x2 [] = { a66666, a66666,  }
VCVT_N/VCVTQ_N:24:result_int32x4 [] = { fbccc, fbccc, fbccc, fbccc,  }
VCVT_N/VCVTQ_N:25:result_uint32x4 [] = { fbccc, fbccc, fbccc, fbccc,  }

VCVT_N/VCVTQ_N (check saturation) output:
VCVT_N/VCVTQ_N:26:result_int32x2 [] = { 7fffffff, 7fffffff,  }
VCVT_N/VCVTQ_N:27:result_int32x4 [] = { 7fffffff, 7fffffff, 7fffffff, 7fffffff,  }

VCVT FP16 (check fp16-fp32 inf/nan/denormal) output:
VCVT FP16:28:result_float32x4 [] = { 38640000, 7f800000, 7fc00000, ff800000,  }

VCVT FP16 (check fp32-fp16 inf/nan) output:
VCVT FP16:29:result_float16x4 [] = { 7e00, 7c00, fc00, 8000,  }

VRECPS/VRECPSQ output:
VRECPS/VRECPSQ:0:result_float32x2 [] = { c2e19eb7, c2e19eb7,  }
VRECPS/VRECPSQ:1:result_float32x4 [] = { c1db851f, c1db851f, c1db851f, c1db851f,  }

VRECPS/VRECPSQ FP special (NAN) and normal values output:
VRECPS/VRECPSQ:2:result_float32x2 [] = { 7fc00000, 7fc00000,  }
VRECPS/VRECPSQ:3:result_float32x4 [] = { 7fc00000, 7fc00000, 7fc00000, 7fc00000,  }

VRECPS/VRECPSQ FP special (infinity, 0) and normal values output:
VRECPS/VRECPSQ:4:result_float32x2 [] = { ff800000, ff800000,  }
VRECPS/VRECPSQ:5:result_float32x4 [] = { 40000000, 40000000, 40000000, 40000000,  }

VRECPS/VRECPSQ FP special (infinity, 0) output:
VRECPS/VRECPSQ:6:result_float32x2 [] = { 40000000, 40000000,  }
VRECPS/VRECPSQ:7:result_float32x4 [] = { 40000000, 40000000, 40000000, 40000000,  }

VRSQRTS/VRSQRTSQ output:
VRSQRTS/VRSQRTSQ:0:result_float32x2 [] = { c2796b84, c2796b84,  }
VRSQRTS/VRSQRTSQ:1:result_float32x4 [] = { c0e4a3d8, c0e4a3d8, c0e4a3d8, c0e4a3d8,  }

VRSQRTS/VRSQRTSQ FP special (NAN) and normal values output:
VRSQRTS/VRSQRTSQ:2:result_float32x2 [] = { 7fc00000, 7fc00000,  }
VRSQRTS/VRSQRTSQ:3:result_float32x4 [] = { 7fc00000, 7fc00000, 7fc00000, 7fc00000,  }

VRSQRTS/VRSQRTSQ FP special (infinity, 0) and normal values output:
VRSQRTS/VRSQRTSQ:4:result_float32x2 [] = { ff800000, ff800000,  }
VRSQRTS/VRSQRTSQ:5:result_float32x4 [] = { 3fc00000, 3fc00000, 3fc00000, 3fc00000,  }

VRSQRTS/VRSQRTSQ FP special (infinity, 0) output:
VRSQRTS/VRSQRTSQ:6:result_float32x2 [] = { 3fc00000, 3fc00000,  }
VRSQRTS/VRSQRTSQ:7:result_float32x4 [] = { 3fc00000, 3fc00000, 3fc00000, 3fc00000,  }


Integer (non-NEON) intrinsics
__clz(0xffffffff) = 0
__clz(0x7fffffff) = 1
__clz(0x3fffffff) = 2
__clz(0x1fffffff) = 3
__clz(0xfffffff) = 4
__clz(0x7ffffff) = 5
__clz(0x3ffffff) = 6
__clz(0x1ffffff) = 7
__clz(0xffffff) = 8
__clz(0x7fffff) = 9
__clz(0x3fffff) = 10
__clz(0x1fffff) = 11
__clz(0xfffff) = 12
__clz(0x7ffff) = 13
__clz(0x3ffff) = 14
__clz(0x1ffff) = 15
__clz(0xffff) = 16
__clz(0x7fff) = 17
__clz(0x3fff) = 18
__clz(0x1fff) = 19
__clz(0xfff) = 20
__clz(0x7ff) = 21
__clz(0x3ff) = 22
__clz(0x1ff) = 23
__clz(0xff) = 24
__clz(0x7f) = 25
__clz(0x3f) = 26
__clz(0x1f) = 27
__clz(0xf) = 28
__clz(0x7) = 29
__clz(0x3) = 30
__clz(0x1) = 31
__clz(0) = 32
__qadd(0x1, 0x2) = 0x3 sat 0
__qadd(0xffffffff, 0xfffffffe) = 0xfffffffd sat 0
__qadd(0xffffffff, 0x2) = 0x1 sat 0
__qadd(0x7000, 0x7000) = 0xe000 sat 0
__qadd(0x8fff, 0x8fff) = 0x11ffe sat 0
__qadd(0x70000000, 0x70000000) = 0x7fffffff sat 1
__qadd(0x8fffffff, 0x8fffffff) = 0x80000000 sat 1
__qdbl(0x1) = 0x2 sat 0
__qdbl(0x70000000) = 0x7fffffff sat 1
__qdbl(0x8fffffff) = 0x80000000 sat 1
__qdbl(0xefffffff) = 0xdffffffe sat 0
__qsub(0x1, 0x2) = 0xffffffff sat 0
__qsub(0xffffffff, 0xfffffffe) = 0x1 sat 0
__qsub(0xffffffff, 0x2) = 0xfffffffd sat 0
__qsub(0x7000, 0xffff9000) = 0xe000 sat 0
__qsub(0x8fff, 0xffff7001) = 0x11ffe sat 0
__qsub(0x70000000, 0x90000000) = 0x7fffffff sat 1
__qsub(0x8fffffff, 0x70000001) = 0x80000000 sat 1
__qsub(0, 0x80000000) = 0x7fffffff sat 1
__rbit(0x12345678) = 0x1e6a2c48
__rev(0x12345678) = 0x78563412
__ssat(0x12345678, 30) = 0x12345678 sat 0
__ssat(0x12345678, 19) = 0x3ffff sat 1
__ssat(0x87654321, 29) = 0xf0000000 sat 1
__ssat(0x87654321, 12) = 0xfffff800 sat 1
__ssat(0x87654321, 32) = 0x87654321 sat 0
__ssat(0x87654321, 1) = 0xffffffff sat 1
__usat(0x12345678, 30) = 0x12345678 sat 0
__usat(0x12345678, 19) = 0x7ffff sat 1
__usat(0x87654321, 29) = 0 sat 1
__usat(0x87654321, 12) = 0 sat 1
__usat(0x87654321, 31) = 0 sat 1
__usat(0x87654321, 0) = 0 sat 1


DSP (non-NEON) intrinsics
qadd(0x1, 0x2) = 0x3 sat 0
qadd(0xffffffff, 0xfffffffe) = 0xfffffffd sat 0
qadd(0xffffffff, 0x2) = 0x1 sat 0
qadd(0x7000, 0x7000) = 0xe000 sat 0
qadd(0x8fff, 0x8fff) = 0x11ffe sat 0
qadd(0x70000000, 0x70000000) = 0x7fffffff sat 1
qadd(0x8fffffff, 0x8fffffff) = 0x80000000 sat 1
qsub(0x1, 0x2) = 0xffffffff sat 0
qsub(0xffffffff, 0xfffffffe) = 0x1 sat 0
qsub(0xffffffff, 0x2) = 0xfffffffd sat 0
qsub(0x7000, 0xffff9000) = 0xe000 sat 0
qsub(0x8fff, 0xffff7001) = 0x11ffe sat 0
qsub(0x70000000, 0x90000000) = 0x7fffffff sat 1
qsub(0x8fffffff, 0x70000001) = 0x80000000 sat 1
qsub(0, 0x80000000) = 0x7fffffff sat 1
qdadd(0x1, 0x2) = 0x5 sat 0
qdadd(0xffffffff, 0xfffffffe) = 0xfffffffb sat 0
qdadd(0xffffffff, 0x2) = 0x3 sat 0
qdadd(0x7000, 0x7000) = 0x15000 sat 0
qdadd(0x8fff, 0x8fff) = 0x1affd sat 0
qdadd(0x70000000, 0x70000000) = 0x7fffffff sat 1
qdadd(0, 0x70000000) = 0x7fffffff sat 1
qdadd(0x8fffffff, 0x8fffffff) = 0x80000000 sat 1
qdadd(0, 0x8fffffff) = 0x80000000 sat 1
qdsub(0x1, 0x2) = 0xfffffffd sat 0
qdsub(0xffffffff, 0xfffffffe) = 0x3 sat 0
qdsub(0xffffffff, 0x2) = 0xfffffffb sat 0
qdsub(0x7000, 0xffff9000) = 0x15000 sat 0
qdsub(0x8fff, 0xffff7001) = 0x1affd sat 0
qdsub(0x70000000, 0x90000000) = 0x7fffffff sat 1
qdsub(0, 0x90000000) = 0x7fffffff sat 1
qdsub(0x8fffffff, 0x70000001) = 0x80000000 sat 1
qdsub(0, 0x70000001) = 0x80000001 sat 1
smulbb(0x12345678, 0x12345678) = 0x1d34d840
smulbt(0x12345678, 0x12345678) = 0x6260060
smultb(0x12345678, 0x12345678) = 0x6260060
smultt(0x12345678, 0x12345678) = 0x14b5a90
smulbb(0xf123f456, 0xf123f456) = 0x880ce4
smulbt(0xf123f456, 0xf123f456) = 0xad5dc2
smultb(0xf123f456, 0xf123f456) = 0xad5dc2
smultt(0xf123f456, 0xf123f456) = 0xdceac9
smlabb(0x12345678, 0x12345678, 0x1020304) = 0x1e36db44
smlabt(0x12345678, 0x12345678, 0x1020304) = 0x7280364
smlatb(0x12345678, 0x12345678, 0x1020304) = 0x7280364
smlatt(0x12345678, 0x12345678, 0x1020304) = 0x24d5d94
smlabb(0xf123f456, 0xf123f456, 0x1020304) = 0x18a0fe8
smlabt(0xf123f456, 0xf123f456, 0x1020304) = 0x1af60c6
smlatb(0xf123f456, 0xf123f456, 0x1020304) = 0x1af60c6
smlatt(0xf123f456, 0xf123f456, 0x1020304) = 0x1deedcd
smlalbb(&0x9abcdef0, &0x12345678, 0x12345678, 0x12345678) = 0x123456780xb7f1b730
smlalbt(&0x9abcdef0, &0x12345678, 0x12345678, 0x12345678) = 0x123456780xa0e2df50
smlaltb(&0x9abcdef0, &0x12345678, 0x12345678, 0x12345678) = 0x123456780xa0e2df50
smlaltt(&0x9abcdef0, &0x12345678, 0x12345678, 0x12345678) = 0x123456780x9c083980
smlalbb(&0x9abcdef0, &0x12345678, 0xf123f456, 0xf123f456) = 0x123456780x9b44ebd4
smlalbt(&0x9abcdef0, &0x12345678, 0xf123f456, 0xf123f456) = 0x123456780x9b6a3cb2
smlaltb(&0x9abcdef0, &0x12345678, 0xf123f456, 0xf123f456) = 0x123456780x9b6a3cb2
smlaltt(&0x9abcdef0, &0x12345678, 0xf123f456, 0xf123f456) = 0x123456780x9b99c9b9
smlalbb(&0xffffffff, &0x12345678, 0x7fff7fff, 0x7fff7fff) = 0x123456790x3fff0000
smlalbt(&0xffffffff, &0x12345678, 0x7fff7fff, 0x7fff7fff) = 0x123456790x3fff0000
smlaltb(&0xffffffff, &0x12345678, 0x7fff7fff, 0x7fff7fff) = 0x123456790x3fff0000
smlaltt(&0xffffffff, &0x12345678, 0x7fff7fff, 0x7fff7fff) = 0x123456790x3fff0000
smulwb(0x12345678, 0x12345678) = 0x6261d94
smulwt(0x12345678, 0x12345678) = 0x14b60b6
smulwb(0xf123f456, 0xf123f456) = 0xad52a0
smulwt(0xf123f456, 0xf123f456) = 0xdcdc99
smlawb(0x12345678, 0x12345678, 0x1020304) = 0x7282098
smlawt(0x12345678, 0x12345678, 0x1020304) = 0x24d63ba
smlawb(0xf123f456, 0xf123f456, 0x1020304) = 0x1af55a4
smlawt(0xf123f456, 0xf123f456, 0X1020304) = 0x1dedf9d


DSP FNS (non-NEON/ITU) intrinsics with input Overflow=0 and input Carry=0
Checking saturate with input Overflow=0 and input Carry=0
saturate(0x1) = 0x1 overflow 0 carry 0
saturate(0xffffffff) = 0xffffffff overflow 0 carry 0
saturate(0x8000) = 0x7fff overflow 1 carry 0
saturate(0xffff8000) = 0xffff8000 overflow 0 carry 0
saturate(0xffff7fff) = 0xffff8000 overflow 1 carry 0
add(0x1, 0x1) = 0x2 overflow 0 carry 0
add(0xffffffff, 0xffffffff) = 0xfffffffe overflow 0 carry 0
add(0x4e20, 0x4e20) = 0x7fff overflow 1 carry 0
add(0xffffb1e0, 0xffffb1e0) = 0xffff8000 overflow 1 carry 0
sub(0x1, 0x1) = 0 overflow 0 carry 0
sub(0xffffffff, 0xffffffff) = 0 overflow 0 carry 0
sub(0x4e20, 0x4e20) = 0 overflow 0 carry 0
sub(0xffffb1e0, 0xffffb1e0) = 0 overflow 0 carry 0
sub(0, 0xffff8000) = 0x7fff overflow 1 carry 0
abs_s(0x1) = 0x1 overflow 0 carry 0
abs_s(0xffffffff) = 0x1 overflow 0 carry 0
abs_s(0xffff8000) = 0x7fff overflow 0 carry 0
shl(0x1, 1) = 0x2 overflow 0 carry 0
shl(0xa, 1) = 0x14 overflow 0 carry 0
shl(0xfff, 10) = 0x7fff overflow 1 carry 0
shl(0xfff, 20) = 0x7fff overflow 1 carry 0
shl(0x1, -1) = 0 overflow 0 carry 0
shl(0x14, -1) = 0xa overflow 0 carry 0
shl(0xfff, -10) = 0x3 overflow 0 carry 0
shl(0xfff, -64) = 0 overflow 0 carry 0
shr(0x1, -1) = 0x2 overflow 0 carry 0
shr(0xa, -1) = 0x14 overflow 0 carry 0
shr(0xfff, -10) = 0x7fff overflow 1 carry 0
shr(0xfff, -20) = 0x7fff overflow 1 carry 0
shr(0x1, 1) = 0 overflow 0 carry 0
shr(0x14, 1) = 0xa overflow 0 carry 0
shr(0xfff, 10) = 0x3 overflow 0 carry 0
shr(0xfff, 64) = 0 overflow 0 carry 0
mult(0x2, 0x2) = 0 overflow 0 carry 0
mult(0xffffffff, 0xffffffff) = 0 overflow 0 carry 0
mult(0xffff8000, 0xffff8000) = 0x7fff overflow 1 carry 0
L_mult(0x2, 0x2) = 0x8 overflow 0 carry 0
L_mult(0xffffffff, 0xffffffff) = 0x2 overflow 0 carry 0
L_mult(0xffff8000, 0xffff8000) = 0x7fffffff overflow 1 carry 0
negate(0x1) = 0xffffffff overflow 0 carry 0
negate(0xffffffff) = 0x1 overflow 0 carry 0
negate(0xffff8000) = 0x7fff overflow 0 carry 0
extract_h(0x1) = 0 overflow 0 carry 0
extract_h(0xffffffff) = 0xffffffff overflow 0 carry 0
extract_h(0xffff8000) = 0xffffffff overflow 0 carry 0
extract_h(0x12345678) = 0x1234 overflow 0 carry 0
extract_l(0x1) = 0x1 overflow 0 carry 0
extract_l(0xffffffff) = 0xffffffff overflow 0 carry 0
extract_l(0xffff8000) = 0xffff8000 overflow 0 carry 0
extract_l(0x43218765) = 0xffff8765 overflow 0 carry 0
round(0x1) = 0 overflow 0 carry 0
round(0xffffffff) = 0 overflow 0 carry 0
round(0xffff8000) = 0 overflow 0 carry 0
round(0x43218765) = 0x4322 overflow 0 carry 0
round(0x87654321) = 0xffff8765 overflow 0 carry 0
L_mac(0x1234, 0x2, 0x2) = 0x123c overflow 0 carry 0
L_mac(0x1234, 0xffffffff, 0xffffffff) = 0x1236 overflow 0 carry 0
L_mac(0x1234, 0xffff8000, 0xffff8000) = 0x7fffffff overflow 1 carry 0
L_mac(0xffffffff, 0xffff8000, 0xffff8000) = 0x7ffffffe overflow 1 carry 0
L_msu(0x1234, 0x2, 0x2) = 0x122c overflow 0 carry 0
L_msu(0x1234, 0xffffffff, 0xffffffff) = 0x1232 overflow 0 carry 0
L_msu(0x1234, 0xffff8000, 0xffff8000) = 0x80001235 overflow 1 carry 0
L_msu(0x1, 0xffff8000, 0xffff8000) = 0x80000002 overflow 1 carry 0
L_add(0x1, 0x2) = 0x3 overflow 0 carry 0
L_add(0xffffffff, 0xfffffffe) = 0xfffffffd overflow 0 carry 0
L_add(0xffffffff, 0x2) = 0x1 overflow 0 carry 0
L_add(0x7000, 0x7000) = 0xe000 overflow 0 carry 0
L_add(0x8fff, 0x8fff) = 0x11ffe overflow 0 carry 0
L_add(0x70000000, 0x70000000) = 0x7fffffff overflow 1 carry 0
L_add(0x8fffffff, 0x8fffffff) = 0x80000000 overflow 1 carry 0
L_sub(0x1, 0x2) = 0xffffffff overflow 0 carry 0
L_sub(0xffffffff, 0xfffffffe) = 0x1 overflow 0 carry 0
L_sub(0xffffffff, 0x2) = 0xfffffffd overflow 0 carry 0
L_sub(0x7000, 0xffff9000) = 0xe000 overflow 0 carry 0
L_sub(0x8fff, 0xffff7001) = 0x11ffe overflow 0 carry 0
L_sub(0x70000000, 0x90000000) = 0x7fffffff overflow 1 carry 0
L_sub(0x8fffffff, 0x70000001) = 0x80000000 overflow 1 carry 0
L_sub(0, 0x80000000) = 0x7fffffff overflow 1 carry 0
Checking L_add_c with input Overflow=0 and input Carry=0
L_add_c(0x1, 0x2) = 0x3 overflow 0 carry 0
L_add_c(0xffffffff, 0xfffffffe) = 0xfffffffd overflow 0 carry 1
L_add_c(0xffffffff, 0x2) = 0x1 overflow 0 carry 1
L_add_c(0x7000, 0x7000) = 0xe000 overflow 0 carry 0
L_add_c(0x8fff, 0x8fff) = 0x11ffe overflow 0 carry 0
L_add_c(0x70000000, 0x70000000) = 0xe0000000 overflow 1 carry 0
L_add_c(0x8fffffff, 0x8fffffff) = 0x1ffffffe overflow 1 carry 1
L_add_c(0x8fffffff, 0xffffffff) = 0x8ffffffe overflow 0 carry 1
L_sub_c(0x1, 0x2) = 0xfffffffe overflow 0 carry 0
L_sub_c(0xffffffff, 0xfffffffe) = 0 overflow 0 carry 1
L_sub_c(0xffffffff, 0x2) = 0xfffffffc overflow 0 carry 1
L_sub_c(0x7000, 0x7000) = 0xffffffff overflow 0 carry 0
L_sub_c(0x8fff, 0x8fff) = 0xffffffff overflow 0 carry 0
L_sub_c(0x70000000, 0x70000000) = 0xffffffff overflow 0 carry 0
L_sub_c(0x8fffffff, 0x8fffffff) = 0xffffffff overflow 0 carry 0
L_sub_c(0x1, 0x80000000) = 0x80000000 overflow 1 carry 0
L_sub_c(0xffffffff, 0x7fffffff) = 0x7fffffff overflow 1 carry 1
Checking L_macNs with input Overflow=0 and input Carry=0
L_macNs(0x1234, 0x2, 0x2) = 0x123c overflow 0 carry 0
L_macNs(0x1234, 0xffffffff, 0xffffffff) = 0x1236 overflow 0 carry 0
L_macNs(0x1234, 0xffff8000, 0xffff8000) = 0x80001233 overflow 1 carry 0
L_macNs(0xffffffff, 0xffff8000, 0xffff8000) = 0x7ffffffe overflow 1 carry 1
Checking L_msuNs with input Overflow=0 and input Carry=0
L_msuNs(0x1234, 0x2, 0x2) = 0x122b overflow 0 carry 1
L_msuNs(0x1234, 0xffffffff, 0xffffffff) = 0x1231 overflow 0 carry 1
L_msuNs(0x1234, 0xffff8000, 0xffff8000) = 0x80001234 overflow 1 carry 0
L_msuNs(0xffffffff, 0xffff8000, 0xffff8000) = 0x7fffffff overflow 1 carry 1
negate(0x1) = 0xffffffff overflow 0 carry 0
negate(0xffffffff) = 0x1 overflow 0 carry 0
negate(0xffff8000) = 0x7fff overflow 0 carry 0
mult_r(0x2, 0x2) = 0 overflow 0 carry 0
mult_r(0xffffffff, 0xffffffff) = 0 overflow 0 carry 0
mult_r(0xffff8000, 0xffff8000) = 0x7fff overflow 1 carry 0
norm_s(0x1) = 0xe overflow 0 carry 0
norm_s(0xffffffff) = 0xf overflow 0 carry 0
norm_s(0xffff8000) = 0 overflow 0 carry 0
norm_s(0x2ee0) = 0x1 overflow 0 carry 0
norm_l(0x1) = 0x1e overflow 0 carry 0
norm_l(0xffffffff) = 0x1f overflow 0 carry 0
norm_l(0xffff8000) = 0x10 overflow 0 carry 0
norm_l(0x2ee0) = 0x11 overflow 0 carry 0
norm_l(0x123456) = 0xa overflow 0 carry 0
norm_l(0xabcdef) = 0x7 overflow 0 carry 0
L_shl(0x1, 1) = 0x2 overflow 0 carry 0
L_shl(0xa, 1) = 0x14 overflow 0 carry 0
L_shl(0xfff, 10) = 0x3ffc00 overflow 0 carry 0
L_shl(0xfff, 20) = 0x7fffffff overflow 1 carry 0
L_shl(0x12345678, 2) = 0x48d159e0 overflow 0 carry 0
L_shl(0x12345678, 40) = 0x7fffffff overflow 1 carry 0
L_shl(0x1, -1) = 0 overflow 0 carry 0
L_shl(0x14, -1) = 0xa overflow 0 carry 0
L_shl(0xfff, -10) = 0x3 overflow 0 carry 0
L_shl(0xfff, -64) = 0 overflow 0 carry 0
L_shl(0x12345678, -10) = 0x48d15 overflow 0 carry 0
L_shl(0x12345678, -64) = 0 overflow 0 carry 0
L_shr(0x1, -1) = 0x2 overflow 0 carry 0
L_shr(0xa, -1) = 0x14 overflow 0 carry 0
L_shr(0xfff, -10) = 0x3ffc00 overflow 0 carry 0
L_shr(0xfff, -20) = 0x7fffffff overflow 1 carry 0
L_shr(0x12345678, -10) = 0x7fffffff overflow 1 carry 0
L_shr(0x12345678, -40) = 0x7fffffff overflow 1 carry 0
L_shr(0x1, 1) = 0 overflow 0 carry 0
L_shr(0x14, 1) = 0xa overflow 0 carry 0
L_shr(0xfff, 10) = 0x3 overflow 0 carry 0
L_shr(0xfff, 64) = 0 overflow 0 carry 0
L_shr(0x12345678, 10) = 0x48d15 overflow 0 carry 0
L_shr(0x12345678, 64) = 0 overflow 0 carry 0
shr_r(0x1, -1) = 0x2 overflow 0 carry 0
shr_r(0xa, -1) = 0x14 overflow 0 carry 0
shr_r(0xfff, -10) = 0x7fff overflow 1 carry 0
shr_r(0xfff, -20) = 0x7fff overflow 1 carry 0
shr_r(0x1, 1) = 0x1 overflow 0 carry 0
shr_r(0x14, 1) = 0xa overflow 0 carry 0
shr_r(0xfff, 10) = 0x4 overflow 0 carry 0
shr_r(0xfff, 64) = 0 overflow 0 carry 0
mac_r(0x1234, 0x2, 0x2) = 0 overflow 0 carry 0
mac_r(0x1234, 0xffffffff, 0xffffffff) = 0 overflow 0 carry 0
mac_r(0x1234, 0xffff8000, 0xffff8000) = 0x7fff overflow 1 carry 0
mac_r(0xffffffff, 0xffff8000, 0xffff8000) = 0x7fff overflow 1 carry 0
mac_r(0x123456, 0x244, 0x522) = 0x29 overflow 0 carry 0
msu_r(0x1234, 0x2, 0x2) = 0 overflow 0 carry 0
msu_r(0x1234, 0xffffffff, 0xffffffff) = 0 overflow 0 carry 0
msu_r(0x1234, 0xffff8000, 0xffff8000) = 0xffff8000 overflow 1 carry 0
msu_r(0x1, 0xffff8000, 0xffff8000) = 0xffff8000 overflow 1 carry 0
msu_r(0x123456, 0x321, 0x243) = 0x4 overflow 0 carry 0
L_deposit_h(0x1) = 0x10000 overflow 0 carry 0
L_deposit_h(0xffffffff) = 0xffff0000 overflow 0 carry 0
L_deposit_h(0xffff8000) = 0x80000000 overflow 0 carry 0
L_deposit_h(0x1234) = 0x12340000 overflow 0 carry 0
L_deposit_l(0x1) = 0x1 overflow 0 carry 0
L_deposit_l(0xffffffff) = 0xffffffff overflow 0 carry 0
L_deposit_l(0xffff8000) = 0xffff8000 overflow 0 carry 0
L_deposit_l(0x1234) = 0x1234 overflow 0 carry 0
L_shr_r(0x1, -1) = 0x2 overflow 0 carry 0
L_shr_r(0xa, -1) = 0x14 overflow 0 carry 0
L_shr_r(0xfff, -10) = 0x3ffc00 overflow 0 carry 0
L_shr_r(0xfff, -20) = 0x7fffffff overflow 1 carry 0
L_shr_r(0x12345678, -10) = 0x7fffffff overflow 1 carry 0
L_shr_r(0x12345678, -40) = 0x7fffffff overflow 1 carry 0
L_shr_r(0x1, 1) = 0x1 overflow 0 carry 0
L_shr_r(0x14, 1) = 0xa overflow 0 carry 0
L_shr_r(0xfff, 10) = 0x4 overflow 0 carry 0
L_shr_r(0xfff, 64) = 0 overflow 0 carry 0
L_shr_r(0x12345678, 10) = 0x48d16 overflow 0 carry 0
L_shr_r(0x12345678, 64) = 0 overflow 0 carry 0
L_abs(0x1) = 0x1 overflow 0 carry 0
L_abs(0xffffffff) = 0x1 overflow 0 carry 0
L_abs(0x80000000) = 0x7fffffff overflow 1 carry 0
L_sat(0x1) = 0x1 overflow 0 carry 0
L_sat(0xffffffff) = 0xffffffff overflow 0 carry 0
L_sat(0xffff8000) = 0xffff8000 overflow 0 carry 0
L_sat(0x8000) = 0x8000 overflow 0 carry 0
div_s(0x1, 0x1) = 0x7fff overflow 0 carry 0
div_s(0x2710, 0x4e20) = 0x4000 overflow 0 carry 0
div_s(0x2710, 0x4e20) = 0x4000 overflow 0 carry 0


DSP FNS (non-NEON/ITU) intrinsics with input Overflow=0 and input Carry=1
Checking saturate with input Overflow=0 and input Carry=1
saturate(0x1) = 0x1 overflow 0 carry 1
saturate(0xffffffff) = 0xffffffff overflow 0 carry 1
saturate(0x8000) = 0x7fff overflow 1 carry 1
saturate(0xffff8000) = 0xffff8000 overflow 0 carry 1
saturate(0xffff7fff) = 0xffff8000 overflow 1 carry 1
add(0x1, 0x1) = 0x2 overflow 0 carry 1
add(0xffffffff, 0xffffffff) = 0xfffffffe overflow 0 carry 1
add(0x4e20, 0x4e20) = 0x7fff overflow 1 carry 1
add(0xffffb1e0, 0xffffb1e0) = 0xffff8000 overflow 1 carry 1
sub(0x1, 0x1) = 0 overflow 0 carry 1
sub(0xffffffff, 0xffffffff) = 0 overflow 0 carry 1
sub(0x4e20, 0x4e20) = 0 overflow 0 carry 1
sub(0xffffb1e0, 0xffffb1e0) = 0 overflow 0 carry 1
sub(0, 0xffff8000) = 0x7fff overflow 1 carry 1
abs_s(0x1) = 0x1 overflow 0 carry 1
abs_s(0xffffffff) = 0x1 overflow 0 carry 1
abs_s(0xffff8000) = 0x7fff overflow 0 carry 1
shl(0x1, 1) = 0x2 overflow 0 carry 1
shl(0xa, 1) = 0x14 overflow 0 carry 1
shl(0xfff, 10) = 0x7fff overflow 1 carry 1
shl(0xfff, 20) = 0x7fff overflow 1 carry 1
shl(0x1, -1) = 0 overflow 0 carry 1
shl(0x14, -1) = 0xa overflow 0 carry 1
shl(0xfff, -10) = 0x3 overflow 0 carry 1
shl(0xfff, -64) = 0 overflow 0 carry 1
shr(0x1, -1) = 0x2 overflow 0 carry 1
shr(0xa, -1) = 0x14 overflow 0 carry 1
shr(0xfff, -10) = 0x7fff overflow 1 carry 1
shr(0xfff, -20) = 0x7fff overflow 1 carry 1
shr(0x1, 1) = 0 overflow 0 carry 1
shr(0x14, 1) = 0xa overflow 0 carry 1
shr(0xfff, 10) = 0x3 overflow 0 carry 1
shr(0xfff, 64) = 0 overflow 0 carry 1
mult(0x2, 0x2) = 0 overflow 0 carry 1
mult(0xffffffff, 0xffffffff) = 0 overflow 0 carry 1
mult(0xffff8000, 0xffff8000) = 0x7fff overflow 1 carry 1
L_mult(0x2, 0x2) = 0x8 overflow 0 carry 1
L_mult(0xffffffff, 0xffffffff) = 0x2 overflow 0 carry 1
L_mult(0xffff8000, 0xffff8000) = 0x7fffffff overflow 1 carry 1
negate(0x1) = 0xffffffff overflow 0 carry 1
negate(0xffffffff) = 0x1 overflow 0 carry 1
negate(0xffff8000) = 0x7fff overflow 0 carry 1
extract_h(0x1) = 0 overflow 0 carry 1
extract_h(0xffffffff) = 0xffffffff overflow 0 carry 1
extract_h(0xffff8000) = 0xffffffff overflow 0 carry 1
extract_h(0x12345678) = 0x1234 overflow 0 carry 1
extract_l(0x1) = 0x1 overflow 0 carry 1
extract_l(0xffffffff) = 0xffffffff overflow 0 carry 1
extract_l(0xffff8000) = 0xffff8000 overflow 0 carry 1
extract_l(0x43218765) = 0xffff8765 overflow 0 carry 1
round(0x1) = 0 overflow 0 carry 1
round(0xffffffff) = 0 overflow 0 carry 1
round(0xffff8000) = 0 overflow 0 carry 1
round(0x43218765) = 0x4322 overflow 0 carry 1
round(0x87654321) = 0xffff8765 overflow 0 carry 1
L_mac(0x1234, 0x2, 0x2) = 0x123c overflow 0 carry 1
L_mac(0x1234, 0xffffffff, 0xffffffff) = 0x1236 overflow 0 carry 1
L_mac(0x1234, 0xffff8000, 0xffff8000) = 0x7fffffff overflow 1 carry 1
L_mac(0xffffffff, 0xffff8000, 0xffff8000) = 0x7ffffffe overflow 1 carry 1
L_msu(0x1234, 0x2, 0x2) = 0x122c overflow 0 carry 1
L_msu(0x1234, 0xffffffff, 0xffffffff) = 0x1232 overflow 0 carry 1
L_msu(0x1234, 0xffff8000, 0xffff8000) = 0x80001235 overflow 1 carry 1
L_msu(0x1, 0xffff8000, 0xffff8000) = 0x80000002 overflow 1 carry 1
L_add(0x1, 0x2) = 0x3 overflow 0 carry 1
L_add(0xffffffff, 0xfffffffe) = 0xfffffffd overflow 0 carry 1
L_add(0xffffffff, 0x2) = 0x1 overflow 0 carry 1
L_add(0x7000, 0x7000) = 0xe000 overflow 0 carry 1
L_add(0x8fff, 0x8fff) = 0x11ffe overflow 0 carry 1
L_add(0x70000000, 0x70000000) = 0x7fffffff overflow 1 carry 1
L_add(0x8fffffff, 0x8fffffff) = 0x80000000 overflow 1 carry 1
L_sub(0x1, 0x2) = 0xffffffff overflow 0 carry 1
L_sub(0xffffffff, 0xfffffffe) = 0x1 overflow 0 carry 1
L_sub(0xffffffff, 0x2) = 0xfffffffd overflow 0 carry 1
L_sub(0x7000, 0xffff9000) = 0xe000 overflow 0 carry 1
L_sub(0x8fff, 0xffff7001) = 0x11ffe overflow 0 carry 1
L_sub(0x70000000, 0x90000000) = 0x7fffffff overflow 1 carry 1
L_sub(0x8fffffff, 0x70000001) = 0x80000000 overflow 1 carry 1
L_sub(0, 0x80000000) = 0x7fffffff overflow 1 carry 1
Checking L_add_c with input Overflow=0 and input Carry=1
L_add_c(0x1, 0x2) = 0x4 overflow 0 carry 0
L_add_c(0xffffffff, 0xfffffffe) = 0xfffffffe overflow 0 carry 1
L_add_c(0xffffffff, 0x2) = 0x2 overflow 0 carry 1
L_add_c(0x7000, 0x7000) = 0xe001 overflow 0 carry 0
L_add_c(0x8fff, 0x8fff) = 0x11fff overflow 0 carry 0
L_add_c(0x70000000, 0x70000000) = 0xe0000001 overflow 1 carry 0
L_add_c(0x8fffffff, 0x8fffffff) = 0x1fffffff overflow 1 carry 1
L_add_c(0x8fffffff, 0xffffffff) = 0x8fffffff overflow 0 carry 1
L_sub_c(0x1, 0x2) = 0xffffffff overflow 0 carry 0
L_sub_c(0xffffffff, 0xfffffffe) = 0x1 overflow 0 carry 1
L_sub_c(0xffffffff, 0x2) = 0xfffffffd overflow 0 carry 1
L_sub_c(0x7000, 0x7000) = 0 overflow 0 carry 1
L_sub_c(0x8fff, 0x8fff) = 0 overflow 0 carry 1
L_sub_c(0x70000000, 0x70000000) = 0 overflow 0 carry 1
L_sub_c(0x8fffffff, 0x8fffffff) = 0 overflow 0 carry 1
L_sub_c(0x1, 0x80000000) = 0x80000001 overflow 1 carry 0
L_sub_c(0xffffffff, 0x7fffffff) = 0x80000000 overflow 0 carry 1
Checking L_macNs with input Overflow=0 and input Carry=1
L_macNs(0x1234, 0x2, 0x2) = 0x123d overflow 0 carry 0
L_macNs(0x1234, 0xffffffff, 0xffffffff) = 0x1237 overflow 0 carry 0
L_macNs(0x1234, 0xffff8000, 0xffff8000) = 0x80001234 overflow 1 carry 0
L_macNs(0xffffffff, 0xffff8000, 0xffff8000) = 0x7fffffff overflow 1 carry 1
Checking L_msuNs with input Overflow=0 and input Carry=1
L_msuNs(0x1234, 0x2, 0x2) = 0x122c overflow 0 carry 1
L_msuNs(0x1234, 0xffffffff, 0xffffffff) = 0x1232 overflow 0 carry 1
L_msuNs(0x1234, 0xffff8000, 0xffff8000) = 0x80001235 overflow 1 carry 0
L_msuNs(0xffffffff, 0xffff8000, 0xffff8000) = 0x80000000 overflow 1 carry 1
negate(0x1) = 0xffffffff overflow 0 carry 1
negate(0xffffffff) = 0x1 overflow 0 carry 1
negate(0xffff8000) = 0x7fff overflow 0 carry 1
mult_r(0x2, 0x2) = 0 overflow 0 carry 1
mult_r(0xffffffff, 0xffffffff) = 0 overflow 0 carry 1
mult_r(0xffff8000, 0xffff8000) = 0x7fff overflow 1 carry 1
norm_s(0x1) = 0xe overflow 0 carry 1
norm_s(0xffffffff) = 0xf overflow 0 carry 1
norm_s(0xffff8000) = 0 overflow 0 carry 1
norm_s(0x2ee0) = 0x1 overflow 0 carry 1
norm_l(0x1) = 0x1e overflow 0 carry 1
norm_l(0xffffffff) = 0x1f overflow 0 carry 1
norm_l(0xffff8000) = 0x10 overflow 0 carry 1
norm_l(0x2ee0) = 0x11 overflow 0 carry 1
norm_l(0x123456) = 0xa overflow 0 carry 1
norm_l(0xabcdef) = 0x7 overflow 0 carry 1
L_shl(0x1, 1) = 0x2 overflow 0 carry 1
L_shl(0xa, 1) = 0x14 overflow 0 carry 1
L_shl(0xfff, 10) = 0x3ffc00 overflow 0 carry 1
L_shl(0xfff, 20) = 0x7fffffff overflow 1 carry 1
L_shl(0x12345678, 2) = 0x48d159e0 overflow 0 carry 1
L_shl(0x12345678, 40) = 0x7fffffff overflow 1 carry 1
L_shl(0x1, -1) = 0 overflow 0 carry 1
L_shl(0x14, -1) = 0xa overflow 0 carry 1
L_shl(0xfff, -10) = 0x3 overflow 0 carry 1
L_shl(0xfff, -64) = 0 overflow 0 carry 1
L_shl(0x12345678, -10) = 0x48d15 overflow 0 carry 1
L_shl(0x12345678, -64) = 0 overflow 0 carry 1
L_shr(0x1, -1) = 0x2 overflow 0 carry 1
L_shr(0xa, -1) = 0x14 overflow 0 carry 1
L_shr(0xfff, -10) = 0x3ffc00 overflow 0 carry 1
L_shr(0xfff, -20) = 0x7fffffff overflow 1 carry 1
L_shr(0x12345678, -10) = 0x7fffffff overflow 1 carry 1
L_shr(0x12345678, -40) = 0x7fffffff overflow 1 carry 1
L_shr(0x1, 1) = 0 overflow 0 carry 1
L_shr(0x14, 1) = 0xa overflow 0 carry 1
L_shr(0xfff, 10) = 0x3 overflow 0 carry 1
L_shr(0xfff, 64) = 0 overflow 0 carry 1
L_shr(0x12345678, 10) = 0x48d15 overflow 0 carry 1
L_shr(0x12345678, 64) = 0 overflow 0 carry 1
shr_r(0x1, -1) = 0x2 overflow 0 carry 1
shr_r(0xa, -1) = 0x14 overflow 0 carry 1
shr_r(0xfff, -10) = 0x7fff overflow 1 carry 1
shr_r(0xfff, -20) = 0x7fff overflow 1 carry 1
shr_r(0x1, 1) = 0x1 overflow 0 carry 1
shr_r(0x14, 1) = 0xa overflow 0 carry 1
shr_r(0xfff, 10) = 0x4 overflow 0 carry 1
shr_r(0xfff, 64) = 0 overflow 0 carry 1
mac_r(0x1234, 0x2, 0x2) = 0 overflow 0 carry 1
mac_r(0x1234, 0xffffffff, 0xffffffff) = 0 overflow 0 carry 1
mac_r(0x1234, 0xffff8000, 0xffff8000) = 0x7fff overflow 1 carry 1
mac_r(0xffffffff, 0xffff8000, 0xffff8000) = 0x7fff overflow 1 carry 1
mac_r(0x123456, 0x244, 0x522) = 0x29 overflow 0 carry 1
msu_r(0x1234, 0x2, 0x2) = 0 overflow 0 carry 1
msu_r(0x1234, 0xffffffff, 0xffffffff) = 0 overflow 0 carry 1
msu_r(0x1234, 0xffff8000, 0xffff8000) = 0xffff8000 overflow 1 carry 1
msu_r(0x1, 0xffff8000, 0xffff8000) = 0xffff8000 overflow 1 carry 1
msu_r(0x123456, 0x321, 0x243) = 0x4 overflow 0 carry 1
L_deposit_h(0x1) = 0x10000 overflow 0 carry 1
L_deposit_h(0xffffffff) = 0xffff0000 overflow 0 carry 1
L_deposit_h(0xffff8000) = 0x80000000 overflow 0 carry 1
L_deposit_h(0x1234) = 0x12340000 overflow 0 carry 1
L_deposit_l(0x1) = 0x1 overflow 0 carry 1
L_deposit_l(0xffffffff) = 0xffffffff overflow 0 carry 1
L_deposit_l(0xffff8000) = 0xffff8000 overflow 0 carry 1
L_deposit_l(0x1234) = 0x1234 overflow 0 carry 1
L_shr_r(0x1, -1) = 0x2 overflow 0 carry 1
L_shr_r(0xa, -1) = 0x14 overflow 0 carry 1
L_shr_r(0xfff, -10) = 0x3ffc00 overflow 0 carry 1
L_shr_r(0xfff, -20) = 0x7fffffff overflow 1 carry 1
L_shr_r(0x12345678, -10) = 0x7fffffff overflow 1 carry 1
L_shr_r(0x12345678, -40) = 0x7fffffff overflow 1 carry 1
L_shr_r(0x1, 1) = 0x1 overflow 0 carry 1
L_shr_r(0x14, 1) = 0xa overflow 0 carry 1
L_shr_r(0xfff, 10) = 0x4 overflow 0 carry 1
L_shr_r(0xfff, 64) = 0 overflow 0 carry 1
L_shr_r(0x12345678, 10) = 0x48d16 overflow 0 carry 1
L_shr_r(0x12345678, 64) = 0 overflow 0 carry 1
L_abs(0x1) = 0x1 overflow 0 carry 1
L_abs(0xffffffff) = 0x1 overflow 0 carry 1
L_abs(0x80000000) = 0x7fffffff overflow 1 carry 1
L_sat(0x1) = 0x1 overflow 0 carry 1
L_sat(0xffffffff) = 0xffffffff overflow 0 carry 1
L_sat(0xffff8000) = 0xffff8000 overflow 0 carry 1
L_sat(0x8000) = 0x8000 overflow 0 carry 1
div_s(0x1, 0x1) = 0x7fff overflow 0 carry 1
div_s(0x2710, 0x4e20) = 0x4000 overflow 0 carry 1
div_s(0x2710, 0x4e20) = 0x4000 overflow 0 carry 1


DSP FNS (non-NEON/ITU) intrinsics with input Overflow=1 and input Carry=0
Checking saturate with input Overflow=1 and input Carry=0
saturate(0x1) = 0x1 overflow 1 carry 0
saturate(0xffffffff) = 0xffffffff overflow 1 carry 0
saturate(0x8000) = 0x7fff overflow 1 carry 0
saturate(0xffff8000) = 0xffff8000 overflow 1 carry 0
saturate(0xffff7fff) = 0xffff8000 overflow 1 carry 0
add(0x1, 0x1) = 0x2 overflow 1 carry 0
add(0xffffffff, 0xffffffff) = 0xfffffffe overflow 1 carry 0
add(0x4e20, 0x4e20) = 0x7fff overflow 1 carry 0
add(0xffffb1e0, 0xffffb1e0) = 0xffff8000 overflow 1 carry 0
sub(0x1, 0x1) = 0 overflow 1 carry 0
sub(0xffffffff, 0xffffffff) = 0 overflow 1 carry 0
sub(0x4e20, 0x4e20) = 0 overflow 1 carry 0
sub(0xffffb1e0, 0xffffb1e0) = 0 overflow 1 carry 0
sub(0, 0xffff8000) = 0x7fff overflow 1 carry 0
abs_s(0x1) = 0x1 overflow 1 carry 0
abs_s(0xffffffff) = 0x1 overflow 1 carry 0
abs_s(0xffff8000) = 0x7fff overflow 1 carry 0
shl(0x1, 1) = 0x2 overflow 1 carry 0
shl(0xa, 1) = 0x14 overflow 1 carry 0
shl(0xfff, 10) = 0x7fff overflow 1 carry 0
shl(0xfff, 20) = 0x7fff overflow 1 carry 0
shl(0x1, -1) = 0 overflow 1 carry 0
shl(0x14, -1) = 0xa overflow 1 carry 0
shl(0xfff, -10) = 0x3 overflow 1 carry 0
shl(0xfff, -64) = 0 overflow 1 carry 0
shr(0x1, -1) = 0x2 overflow 1 carry 0
shr(0xa, -1) = 0x14 overflow 1 carry 0
shr(0xfff, -10) = 0x7fff overflow 1 carry 0
shr(0xfff, -20) = 0x7fff overflow 1 carry 0
shr(0x1, 1) = 0 overflow 1 carry 0
shr(0x14, 1) = 0xa overflow 1 carry 0
shr(0xfff, 10) = 0x3 overflow 1 carry 0
shr(0xfff, 64) = 0 overflow 1 carry 0
mult(0x2, 0x2) = 0 overflow 1 carry 0
mult(0xffffffff, 0xffffffff) = 0 overflow 1 carry 0
mult(0xffff8000, 0xffff8000) = 0x7fff overflow 1 carry 0
L_mult(0x2, 0x2) = 0x8 overflow 1 carry 0
L_mult(0xffffffff, 0xffffffff) = 0x2 overflow 1 carry 0
L_mult(0xffff8000, 0xffff8000) = 0x7fffffff overflow 1 carry 0
negate(0x1) = 0xffffffff overflow 1 carry 0
negate(0xffffffff) = 0x1 overflow 1 carry 0
negate(0xffff8000) = 0x7fff overflow 1 carry 0
extract_h(0x1) = 0 overflow 1 carry 0
extract_h(0xffffffff) = 0xffffffff overflow 1 carry 0
extract_h(0xffff8000) = 0xffffffff overflow 1 carry 0
extract_h(0x12345678) = 0x1234 overflow 1 carry 0
extract_l(0x1) = 0x1 overflow 1 carry 0
extract_l(0xffffffff) = 0xffffffff overflow 1 carry 0
extract_l(0xffff8000) = 0xffff8000 overflow 1 carry 0
extract_l(0x43218765) = 0xffff8765 overflow 1 carry 0
round(0x1) = 0 overflow 1 carry 0
round(0xffffffff) = 0 overflow 1 carry 0
round(0xffff8000) = 0 overflow 1 carry 0
round(0x43218765) = 0x4322 overflow 1 carry 0
round(0x87654321) = 0xffff8765 overflow 1 carry 0
L_mac(0x1234, 0x2, 0x2) = 0x123c overflow 1 carry 0
L_mac(0x1234, 0xffffffff, 0xffffffff) = 0x1236 overflow 1 carry 0
L_mac(0x1234, 0xffff8000, 0xffff8000) = 0x7fffffff overflow 1 carry 0
L_mac(0xffffffff, 0xffff8000, 0xffff8000) = 0x7ffffffe overflow 1 carry 0
L_msu(0x1234, 0x2, 0x2) = 0x122c overflow 1 carry 0
L_msu(0x1234, 0xffffffff, 0xffffffff) = 0x1232 overflow 1 carry 0
L_msu(0x1234, 0xffff8000, 0xffff8000) = 0x80001235 overflow 1 carry 0
L_msu(0x1, 0xffff8000, 0xffff8000) = 0x80000002 overflow 1 carry 0
L_add(0x1, 0x2) = 0x3 overflow 1 carry 0
L_add(0xffffffff, 0xfffffffe) = 0xfffffffd overflow 1 carry 0
L_add(0xffffffff, 0x2) = 0x1 overflow 1 carry 0
L_add(0x7000, 0x7000) = 0xe000 overflow 1 carry 0
L_add(0x8fff, 0x8fff) = 0x11ffe overflow 1 carry 0
L_add(0x70000000, 0x70000000) = 0x7fffffff overflow 1 carry 0
L_add(0x8fffffff, 0x8fffffff) = 0x80000000 overflow 1 carry 0
L_sub(0x1, 0x2) = 0xffffffff overflow 1 carry 0
L_sub(0xffffffff, 0xfffffffe) = 0x1 overflow 1 carry 0
L_sub(0xffffffff, 0x2) = 0xfffffffd overflow 1 carry 0
L_sub(0x7000, 0xffff9000) = 0xe000 overflow 1 carry 0
L_sub(0x8fff, 0xffff7001) = 0x11ffe overflow 1 carry 0
L_sub(0x70000000, 0x90000000) = 0x7fffffff overflow 1 carry 0
L_sub(0x8fffffff, 0x70000001) = 0x80000000 overflow 1 carry 0
L_sub(0, 0x80000000) = 0x7fffffff overflow 1 carry 0
Checking L_add_c with input Overflow=1 and input Carry=0
L_add_c(0x1, 0x2) = 0x3 overflow 1 carry 0
L_add_c(0xffffffff, 0xfffffffe) = 0xfffffffd overflow 1 carry 1
L_add_c(0xffffffff, 0x2) = 0x1 overflow 1 carry 1
L_add_c(0x7000, 0x7000) = 0xe000 overflow 1 carry 0
L_add_c(0x8fff, 0x8fff) = 0x11ffe overflow 1 carry 0
L_add_c(0x70000000, 0x70000000) = 0xe0000000 overflow 1 carry 0
L_add_c(0x8fffffff, 0x8fffffff) = 0x1ffffffe overflow 1 carry 1
L_add_c(0x8fffffff, 0xffffffff) = 0x8ffffffe overflow 1 carry 1
L_sub_c(0x1, 0x2) = 0xfffffffe overflow 1 carry 0
L_sub_c(0xffffffff, 0xfffffffe) = 0 overflow 1 carry 1
L_sub_c(0xffffffff, 0x2) = 0xfffffffc overflow 1 carry 1
L_sub_c(0x7000, 0x7000) = 0xffffffff overflow 1 carry 0
L_sub_c(0x8fff, 0x8fff) = 0xffffffff overflow 1 carry 0
L_sub_c(0x70000000, 0x70000000) = 0xffffffff overflow 1 carry 0
L_sub_c(0x8fffffff, 0x8fffffff) = 0xffffffff overflow 1 carry 0
L_sub_c(0x1, 0x80000000) = 0x80000000 overflow 1 carry 0
L_sub_c(0xffffffff, 0x7fffffff) = 0x7fffffff overflow 1 carry 1
Checking L_macNs with input Overflow=1 and input Carry=0
L_macNs(0x1234, 0x2, 0x2) = 0x123c overflow 0 carry 0
L_macNs(0x1234, 0xffffffff, 0xffffffff) = 0x1236 overflow 0 carry 0
L_macNs(0x1234, 0xffff8000, 0xffff8000) = 0x80001233 overflow 1 carry 0
L_macNs(0xffffffff, 0xffff8000, 0xffff8000) = 0x7ffffffe overflow 1 carry 1
Checking L_msuNs with input Overflow=1 and input Carry=0
L_msuNs(0x1234, 0x2, 0x2) = 0x122b overflow 0 carry 1
L_msuNs(0x1234, 0xffffffff, 0xffffffff) = 0x1231 overflow 0 carry 1
L_msuNs(0x1234, 0xffff8000, 0xffff8000) = 0x80001234 overflow 1 carry 0
L_msuNs(0xffffffff, 0xffff8000, 0xffff8000) = 0x7fffffff overflow 1 carry 1
negate(0x1) = 0xffffffff overflow 1 carry 0
negate(0xffffffff) = 0x1 overflow 1 carry 0
negate(0xffff8000) = 0x7fff overflow 1 carry 0
mult_r(0x2, 0x2) = 0 overflow 1 carry 0
mult_r(0xffffffff, 0xffffffff) = 0 overflow 1 carry 0
mult_r(0xffff8000, 0xffff8000) = 0x7fff overflow 1 carry 0
norm_s(0x1) = 0xe overflow 1 carry 0
norm_s(0xffffffff) = 0xf overflow 1 carry 0
norm_s(0xffff8000) = 0 overflow 1 carry 0
norm_s(0x2ee0) = 0x1 overflow 1 carry 0
norm_l(0x1) = 0x1e overflow 1 carry 0
norm_l(0xffffffff) = 0x1f overflow 1 carry 0
norm_l(0xffff8000) = 0x10 overflow 1 carry 0
norm_l(0x2ee0) = 0x11 overflow 1 carry 0
norm_l(0x123456) = 0xa overflow 1 carry 0
norm_l(0xabcdef) = 0x7 overflow 1 carry 0
L_shl(0x1, 1) = 0x2 overflow 1 carry 0
L_shl(0xa, 1) = 0x14 overflow 1 carry 0
L_shl(0xfff, 10) = 0x3ffc00 overflow 1 carry 0
L_shl(0xfff, 20) = 0x7fffffff overflow 1 carry 0
L_shl(0x12345678, 2) = 0x48d159e0 overflow 1 carry 0
L_shl(0x12345678, 40) = 0x7fffffff overflow 1 carry 0
L_shl(0x1, -1) = 0 overflow 1 carry 0
L_shl(0x14, -1) = 0xa overflow 1 carry 0
L_shl(0xfff, -10) = 0x3 overflow 1 carry 0
L_shl(0xfff, -64) = 0 overflow 1 carry 0
L_shl(0x12345678, -10) = 0x48d15 overflow 1 carry 0
L_shl(0x12345678, -64) = 0 overflow 1 carry 0
L_shr(0x1, -1) = 0x2 overflow 1 carry 0
L_shr(0xa, -1) = 0x14 overflow 1 carry 0
L_shr(0xfff, -10) = 0x3ffc00 overflow 1 carry 0
L_shr(0xfff, -20) = 0x7fffffff overflow 1 carry 0
L_shr(0x12345678, -10) = 0x7fffffff overflow 1 carry 0
L_shr(0x12345678, -40) = 0x7fffffff overflow 1 carry 0
L_shr(0x1, 1) = 0 overflow 1 carry 0
L_shr(0x14, 1) = 0xa overflow 1 carry 0
L_shr(0xfff, 10) = 0x3 overflow 1 carry 0
L_shr(0xfff, 64) = 0 overflow 1 carry 0
L_shr(0x12345678, 10) = 0x48d15 overflow 1 carry 0
L_shr(0x12345678, 64) = 0 overflow 1 carry 0
shr_r(0x1, -1) = 0x2 overflow 1 carry 0
shr_r(0xa, -1) = 0x14 overflow 1 carry 0
shr_r(0xfff, -10) = 0x7fff overflow 1 carry 0
shr_r(0xfff, -20) = 0x7fff overflow 1 carry 0
shr_r(0x1, 1) = 0x1 overflow 1 carry 0
shr_r(0x14, 1) = 0xa overflow 1 carry 0
shr_r(0xfff, 10) = 0x4 overflow 1 carry 0
shr_r(0xfff, 64) = 0 overflow 1 carry 0
mac_r(0x1234, 0x2, 0x2) = 0 overflow 1 carry 0
mac_r(0x1234, 0xffffffff, 0xffffffff) = 0 overflow 1 carry 0
mac_r(0x1234, 0xffff8000, 0xffff8000) = 0x7fff overflow 1 carry 0
mac_r(0xffffffff, 0xffff8000, 0xffff8000) = 0x7fff overflow 1 carry 0
mac_r(0x123456, 0x244, 0x522) = 0x29 overflow 1 carry 0
msu_r(0x1234, 0x2, 0x2) = 0 overflow 1 carry 0
msu_r(0x1234, 0xffffffff, 0xffffffff) = 0 overflow 1 carry 0
msu_r(0x1234, 0xffff8000, 0xffff8000) = 0xffff8000 overflow 1 carry 0
msu_r(0x1, 0xffff8000, 0xffff8000) = 0xffff8000 overflow 1 carry 0
msu_r(0x123456, 0x321, 0x243) = 0x4 overflow 1 carry 0
L_deposit_h(0x1) = 0x10000 overflow 1 carry 0
L_deposit_h(0xffffffff) = 0xffff0000 overflow 1 carry 0
L_deposit_h(0xffff8000) = 0x80000000 overflow 1 carry 0
L_deposit_h(0x1234) = 0x12340000 overflow 1 carry 0
L_deposit_l(0x1) = 0x1 overflow 1 carry 0
L_deposit_l(0xffffffff) = 0xffffffff overflow 1 carry 0
L_deposit_l(0xffff8000) = 0xffff8000 overflow 1 carry 0
L_deposit_l(0x1234) = 0x1234 overflow 1 carry 0
L_shr_r(0x1, -1) = 0x2 overflow 1 carry 0
L_shr_r(0xa, -1) = 0x14 overflow 1 carry 0
L_shr_r(0xfff, -10) = 0x3ffc00 overflow 1 carry 0
L_shr_r(0xfff, -20) = 0x7fffffff overflow 1 carry 0
L_shr_r(0x12345678, -10) = 0x7fffffff overflow 1 carry 0
L_shr_r(0x12345678, -40) = 0x7fffffff overflow 1 carry 0
L_shr_r(0x1, 1) = 0x1 overflow 1 carry 0
L_shr_r(0x14, 1) = 0xa overflow 1 carry 0
L_shr_r(0xfff, 10) = 0x4 overflow 1 carry 0
L_shr_r(0xfff, 64) = 0 overflow 1 carry 0
L_shr_r(0x12345678, 10) = 0x48d16 overflow 1 carry 0
L_shr_r(0x12345678, 64) = 0 overflow 1 carry 0
L_abs(0x1) = 0x1 overflow 1 carry 0
L_abs(0xffffffff) = 0x1 overflow 1 carry 0
L_abs(0x80000000) = 0x7fffffff overflow 1 carry 0
L_sat(0x1) = 0x7fffffff overflow 0 carry 0
L_sat(0xffffffff) = 0x7fffffff overflow 0 carry 0
L_sat(0xffff8000) = 0x7fffffff overflow 0 carry 0
L_sat(0x8000) = 0x7fffffff overflow 0 carry 0
div_s(0x1, 0x1) = 0x7fff overflow 1 carry 0
div_s(0x2710, 0x4e20) = 0x4000 overflow 1 carry 0
div_s(0x2710, 0x4e20) = 0x4000 overflow 1 carry 0


DSP FNS (non-NEON/ITU) intrinsics with input Overflow=1 and input Carry=1
Checking saturate with input Overflow=1 and input Carry=1
saturate(0x1) = 0x1 overflow 1 carry 1
saturate(0xffffffff) = 0xffffffff overflow 1 carry 1
saturate(0x8000) = 0x7fff overflow 1 carry 1
saturate(0xffff8000) = 0xffff8000 overflow 1 carry 1
saturate(0xffff7fff) = 0xffff8000 overflow 1 carry 1
add(0x1, 0x1) = 0x2 overflow 1 carry 1
add(0xffffffff, 0xffffffff) = 0xfffffffe overflow 1 carry 1
add(0x4e20, 0x4e20) = 0x7fff overflow 1 carry 1
add(0xffffb1e0, 0xffffb1e0) = 0xffff8000 overflow 1 carry 1
sub(0x1, 0x1) = 0 overflow 1 carry 1
sub(0xffffffff, 0xffffffff) = 0 overflow 1 carry 1
sub(0x4e20, 0x4e20) = 0 overflow 1 carry 1
sub(0xffffb1e0, 0xffffb1e0) = 0 overflow 1 carry 1
sub(0, 0xffff8000) = 0x7fff overflow 1 carry 1
abs_s(0x1) = 0x1 overflow 1 carry 1
abs_s(0xffffffff) = 0x1 overflow 1 carry 1
abs_s(0xffff8000) = 0x7fff overflow 1 carry 1
shl(0x1, 1) = 0x2 overflow 1 carry 1
shl(0xa, 1) = 0x14 overflow 1 carry 1
shl(0xfff, 10) = 0x7fff overflow 1 carry 1
shl(0xfff, 20) = 0x7fff overflow 1 carry 1
shl(0x1, -1) = 0 overflow 1 carry 1
shl(0x14, -1) = 0xa overflow 1 carry 1
shl(0xfff, -10) = 0x3 overflow 1 carry 1
shl(0xfff, -64) = 0 overflow 1 carry 1
shr(0x1, -1) = 0x2 overflow 1 carry 1
shr(0xa, -1) = 0x14 overflow 1 carry 1
shr(0xfff, -10) = 0x7fff overflow 1 carry 1
shr(0xfff, -20) = 0x7fff overflow 1 carry 1
shr(0x1, 1) = 0 overflow 1 carry 1
shr(0x14, 1) = 0xa overflow 1 carry 1
shr(0xfff, 10) = 0x3 overflow 1 carry 1
shr(0xfff, 64) = 0 overflow 1 carry 1
mult(0x2, 0x2) = 0 overflow 1 carry 1
mult(0xffffffff, 0xffffffff) = 0 overflow 1 carry 1
mult(0xffff8000, 0xffff8000) = 0x7fff overflow 1 carry 1
L_mult(0x2, 0x2) = 0x8 overflow 1 carry 1
L_mult(0xffffffff, 0xffffffff) = 0x2 overflow 1 carry 1
L_mult(0xffff8000, 0xffff8000) = 0x7fffffff overflow 1 carry 1
negate(0x1) = 0xffffffff overflow 1 carry 1
negate(0xffffffff) = 0x1 overflow 1 carry 1
negate(0xffff8000) = 0x7fff overflow 1 carry 1
extract_h(0x1) = 0 overflow 1 carry 1
extract_h(0xffffffff) = 0xffffffff overflow 1 carry 1
extract_h(0xffff8000) = 0xffffffff overflow 1 carry 1
extract_h(0x12345678) = 0x1234 overflow 1 carry 1
extract_l(0x1) = 0x1 overflow 1 carry 1
extract_l(0xffffffff) = 0xffffffff overflow 1 carry 1
extract_l(0xffff8000) = 0xffff8000 overflow 1 carry 1
extract_l(0x43218765) = 0xffff8765 overflow 1 carry 1
round(0x1) = 0 overflow 1 carry 1
round(0xffffffff) = 0 overflow 1 carry 1
round(0xffff8000) = 0 overflow 1 carry 1
round(0x43218765) = 0x4322 overflow 1 carry 1
round(0x87654321) = 0xffff8765 overflow 1 carry 1
L_mac(0x1234, 0x2, 0x2) = 0x123c overflow 1 carry 1
L_mac(0x1234, 0xffffffff, 0xffffffff) = 0x1236 overflow 1 carry 1
L_mac(0x1234, 0xffff8000, 0xffff8000) = 0x7fffffff overflow 1 carry 1
L_mac(0xffffffff, 0xffff8000, 0xffff8000) = 0x7ffffffe overflow 1 carry 1
L_msu(0x1234, 0x2, 0x2) = 0x122c overflow 1 carry 1
L_msu(0x1234, 0xffffffff, 0xffffffff) = 0x1232 overflow 1 carry 1
L_msu(0x1234, 0xffff8000, 0xffff8000) = 0x80001235 overflow 1 carry 1
L_msu(0x1, 0xffff8000, 0xffff8000) = 0x80000002 overflow 1 carry 1
L_add(0x1, 0x2) = 0x3 overflow 1 carry 1
L_add(0xffffffff, 0xfffffffe) = 0xfffffffd overflow 1 carry 1
L_add(0xffffffff, 0x2) = 0x1 overflow 1 carry 1
L_add(0x7000, 0x7000) = 0xe000 overflow 1 carry 1
L_add(0x8fff, 0x8fff) = 0x11ffe overflow 1 carry 1
L_add(0x70000000, 0x70000000) = 0x7fffffff overflow 1 carry 1
L_add(0x8fffffff, 0x8fffffff) = 0x80000000 overflow 1 carry 1
L_sub(0x1, 0x2) = 0xffffffff overflow 1 carry 1
L_sub(0xffffffff, 0xfffffffe) = 0x1 overflow 1 carry 1
L_sub(0xffffffff, 0x2) = 0xfffffffd overflow 1 carry 1
L_sub(0x7000, 0xffff9000) = 0xe000 overflow 1 carry 1
L_sub(0x8fff, 0xffff7001) = 0x11ffe overflow 1 carry 1
L_sub(0x70000000, 0x90000000) = 0x7fffffff overflow 1 carry 1
L_sub(0x8fffffff, 0x70000001) = 0x80000000 overflow 1 carry 1
L_sub(0, 0x80000000) = 0x7fffffff overflow 1 carry 1
Checking L_add_c with input Overflow=1 and input Carry=1
L_add_c(0x1, 0x2) = 0x4 overflow 1 carry 0
L_add_c(0xffffffff, 0xfffffffe) = 0xfffffffe overflow 1 carry 1
L_add_c(0xffffffff, 0x2) = 0x2 overflow 1 carry 1
L_add_c(0x7000, 0x7000) = 0xe001 overflow 1 carry 0
L_add_c(0x8fff, 0x8fff) = 0x11fff overflow 1 carry 0
L_add_c(0x70000000, 0x70000000) = 0xe0000001 overflow 1 carry 0
L_add_c(0x8fffffff, 0x8fffffff) = 0x1fffffff overflow 1 carry 1
L_add_c(0x8fffffff, 0xffffffff) = 0x8fffffff overflow 1 carry 1
L_sub_c(0x1, 0x2) = 0xffffffff overflow 1 carry 0
L_sub_c(0xffffffff, 0xfffffffe) = 0x1 overflow 1 carry 1
L_sub_c(0xffffffff, 0x2) = 0xfffffffd overflow 1 carry 1
L_sub_c(0x7000, 0x7000) = 0 overflow 1 carry 1
L_sub_c(0x8fff, 0x8fff) = 0 overflow 1 carry 1
L_sub_c(0x70000000, 0x70000000) = 0 overflow 1 carry 1
L_sub_c(0x8fffffff, 0x8fffffff) = 0 overflow 1 carry 1
L_sub_c(0x1, 0x80000000) = 0x80000001 overflow 1 carry 0
L_sub_c(0xffffffff, 0x7fffffff) = 0x80000000 overflow 1 carry 1
Checking L_macNs with input Overflow=1 and input Carry=1
L_macNs(0x1234, 0x2, 0x2) = 0x123d overflow 0 carry 0
L_macNs(0x1234, 0xffffffff, 0xffffffff) = 0x1237 overflow 0 carry 0
L_macNs(0x1234, 0xffff8000, 0xffff8000) = 0x80001234 overflow 1 carry 0
L_macNs(0xffffffff, 0xffff8000, 0xffff8000) = 0x7fffffff overflow 1 carry 1
Checking L_msuNs with input Overflow=1 and input Carry=1
L_msuNs(0x1234, 0x2, 0x2) = 0x122c overflow 0 carry 1
L_msuNs(0x1234, 0xffffffff, 0xffffffff) = 0x1232 overflow 0 carry 1
L_msuNs(0x1234, 0xffff8000, 0xffff8000) = 0x80001235 overflow 1 carry 0
L_msuNs(0xffffffff, 0xffff8000, 0xffff8000) = 0x80000000 overflow 1 carry 1
negate(0x1) = 0xffffffff overflow 1 carry 1
negate(0xffffffff) = 0x1 overflow 1 carry 1
negate(0xffff8000) = 0x7fff overflow 1 carry 1
mult_r(0x2, 0x2) = 0 overflow 1 carry 1
mult_r(0xffffffff, 0xffffffff) = 0 overflow 1 carry 1
mult_r(0xffff8000, 0xffff8000) = 0x7fff overflow 1 carry 1
norm_s(0x1) = 0xe overflow 1 carry 1
norm_s(0xffffffff) = 0xf overflow 1 carry 1
norm_s(0xffff8000) = 0 overflow 1 carry 1
norm_s(0x2ee0) = 0x1 overflow 1 carry 1
norm_l(0x1) = 0x1e overflow 1 carry 1
norm_l(0xffffffff) = 0x1f overflow 1 carry 1
norm_l(0xffff8000) = 0x10 overflow 1 carry 1
norm_l(0x2ee0) = 0x11 overflow 1 carry 1
norm_l(0x123456) = 0xa overflow 1 carry 1
norm_l(0xabcdef) = 0x7 overflow 1 carry 1
L_shl(0x1, 1) = 0x2 overflow 1 carry 1
L_shl(0xa, 1) = 0x14 overflow 1 carry 1
L_shl(0xfff, 10) = 0x3ffc00 overflow 1 carry 1
L_shl(0xfff, 20) = 0x7fffffff overflow 1 carry 1
L_shl(0x12345678, 2) = 0x48d159e0 overflow 1 carry 1
L_shl(0x12345678, 40) = 0x7fffffff overflow 1 carry 1
L_shl(0x1, -1) = 0 overflow 1 carry 1
L_shl(0x14, -1) = 0xa overflow 1 carry 1
L_shl(0xfff, -10) = 0x3 overflow 1 carry 1
L_shl(0xfff, -64) = 0 overflow 1 carry 1
L_shl(0x12345678, -10) = 0x48d15 overflow 1 carry 1
L_shl(0x12345678, -64) = 0 overflow 1 carry 1
L_shr(0x1, -1) = 0x2 overflow 1 carry 1
L_shr(0xa, -1) = 0x14 overflow 1 carry 1
L_shr(0xfff, -10) = 0x3ffc00 overflow 1 carry 1
L_shr(0xfff, -20) = 0x7fffffff overflow 1 carry 1
L_shr(0x12345678, -10) = 0x7fffffff overflow 1 carry 1
L_shr(0x12345678, -40) = 0x7fffffff overflow 1 carry 1
L_shr(0x1, 1) = 0 overflow 1 carry 1
L_shr(0x14, 1) = 0xa overflow 1 carry 1
L_shr(0xfff, 10) = 0x3 overflow 1 carry 1
L_shr(0xfff, 64) = 0 overflow 1 carry 1
L_shr(0x12345678, 10) = 0x48d15 overflow 1 carry 1
L_shr(0x12345678, 64) = 0 overflow 1 carry 1
shr_r(0x1, -1) = 0x2 overflow 1 carry 1
shr_r(0xa, -1) = 0x14 overflow 1 carry 1
shr_r(0xfff, -10) = 0x7fff overflow 1 carry 1
shr_r(0xfff, -20) = 0x7fff overflow 1 carry 1
shr_r(0x1, 1) = 0x1 overflow 1 carry 1
shr_r(0x14, 1) = 0xa overflow 1 carry 1
shr_r(0xfff, 10) = 0x4 overflow 1 carry 1
shr_r(0xfff, 64) = 0 overflow 1 carry 1
mac_r(0x1234, 0x2, 0x2) = 0 overflow 1 carry 1
mac_r(0x1234, 0xffffffff, 0xffffffff) = 0 overflow 1 carry 1
mac_r(0x1234, 0xffff8000, 0xffff8000) = 0x7fff overflow 1 carry 1
mac_r(0xffffffff, 0xffff8000, 0xffff8000) = 0x7fff overflow 1 carry 1
mac_r(0x123456, 0x244, 0x522) = 0x29 overflow 1 carry 1
msu_r(0x1234, 0x2, 0x2) = 0 overflow 1 carry 1
msu_r(0x1234, 0xffffffff, 0xffffffff) = 0 overflow 1 carry 1
msu_r(0x1234, 0xffff8000, 0xffff8000) = 0xffff8000 overflow 1 carry 1
msu_r(0x1, 0xffff8000, 0xffff8000) = 0xffff8000 overflow 1 carry 1
msu_r(0x123456, 0x321, 0x243) = 0x4 overflow 1 carry 1
L_deposit_h(0x1) = 0x10000 overflow 1 carry 1
L_deposit_h(0xffffffff) = 0xffff0000 overflow 1 carry 1
L_deposit_h(0xffff8000) = 0x80000000 overflow 1 carry 1
L_deposit_h(0x1234) = 0x12340000 overflow 1 carry 1
L_deposit_l(0x1) = 0x1 overflow 1 carry 1
L_deposit_l(0xffffffff) = 0xffffffff overflow 1 carry 1
L_deposit_l(0xffff8000) = 0xffff8000 overflow 1 carry 1
L_deposit_l(0x1234) = 0x1234 overflow 1 carry 1
L_shr_r(0x1, -1) = 0x2 overflow 1 carry 1
L_shr_r(0xa, -1) = 0x14 overflow 1 carry 1
L_shr_r(0xfff, -10) = 0x3ffc00 overflow 1 carry 1
L_shr_r(0xfff, -20) = 0x7fffffff overflow 1 carry 1
L_shr_r(0x12345678, -10) = 0x7fffffff overflow 1 carry 1
L_shr_r(0x12345678, -40) = 0x7fffffff overflow 1 carry 1
L_shr_r(0x1, 1) = 0x1 overflow 1 carry 1
L_shr_r(0x14, 1) = 0xa overflow 1 carry 1
L_shr_r(0xfff, 10) = 0x4 overflow 1 carry 1
L_shr_r(0xfff, 64) = 0 overflow 1 carry 1
L_shr_r(0x12345678, 10) = 0x48d16 overflow 1 carry 1
L_shr_r(0x12345678, 64) = 0 overflow 1 carry 1
L_abs(0x1) = 0x1 overflow 1 carry 1
L_abs(0xffffffff) = 0x1 overflow 1 carry 1
L_abs(0x80000000) = 0x7fffffff overflow 1 carry 1
L_sat(0x1) = 0x80000000 overflow 0 carry 0
L_sat(0xffffffff) = 0x80000000 overflow 0 carry 0
L_sat(0xffff8000) = 0x80000000 overflow 0 carry 0
L_sat(0x8000) = 0x80000000 overflow 0 carry 0
div_s(0x1, 0x1) = 0x7fff overflow 1 carry 1
div_s(0x2710, 0x4e20) = 0x4000 overflow 1 carry 1
div_s(0x2710, 0x4e20) = 0x4000 overflow 1 carry 1
