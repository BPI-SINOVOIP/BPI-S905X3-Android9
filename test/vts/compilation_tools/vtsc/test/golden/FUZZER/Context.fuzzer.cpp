// This file was auto-generated by VTS compiler.

#include <iostream>

#include "FuncFuzzerUtils.h"
#include <android/hardware/renderscript/1.0/IContext.h>

using std::cerr;
using std::endl;
using std::string;

using namespace ::android::hardware::renderscript::V1_0;
using namespace ::android::hardware;

namespace android {
namespace vts {

static string target_func;

extern "C" int LLVMFuzzerInitialize(int *argc, char ***argv) {
    FuncFuzzerParams params{ExtractFuncFuzzerParams(*argc, *argv)};
    target_func = params.target_func_;
    return 0;
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
    static ::android::sp<IContext> renderscript = IContext::getService(true);
    if (renderscript == nullptr) {
        cerr << "IContext::getService() failed" << endl;
        exit(1);
    }

    if (target_func == "allocationAdapterCreate") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint64_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint64_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        renderscript->allocationAdapterCreate(arg0, arg1);
        return 0;
    } else if (target_func == "allocationAdapterOffset") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(::android::hardware::hidl_vec<uint32_t>);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        ::android::hardware::hidl_vec<uint32_t> arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        renderscript->allocationAdapterOffset(arg0, arg1);
        return 0;
    } else if (target_func == "allocationGetType") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        renderscript->allocationGetType(arg0);
        return 0;
    } else if (target_func == "allocationCreateTyped") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(::android::hardware::renderscript::V1_0::AllocationMipmapControl);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        ::android::hardware::renderscript::V1_0::AllocationMipmapControl arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(int32_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        int32_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(void*);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        void* arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        renderscript->allocationCreateTyped(arg0, arg1, arg2, arg3);
        return 0;
    } else if (target_func == "allocationCreateFromBitmap") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(::android::hardware::renderscript::V1_0::AllocationMipmapControl);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        ::android::hardware::renderscript::V1_0::AllocationMipmapControl arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(::android::hardware::hidl_vec<uint8_t>);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        ::android::hardware::hidl_vec<uint8_t> arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(int32_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        int32_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        renderscript->allocationCreateFromBitmap(arg0, arg1, arg2, arg3);
        return 0;
    } else if (target_func == "allocationCubeCreateFromBitmap") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(::android::hardware::renderscript::V1_0::AllocationMipmapControl);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        ::android::hardware::renderscript::V1_0::AllocationMipmapControl arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(::android::hardware::hidl_vec<uint8_t>);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        ::android::hardware::hidl_vec<uint8_t> arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(int32_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        int32_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        renderscript->allocationCubeCreateFromBitmap(arg0, arg1, arg2, arg3);
        return 0;
    } else if (target_func == "allocationGetNativeWindow") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        renderscript->allocationGetNativeWindow(arg0);
        return 0;
    } else if (target_func == "allocationSetNativeWindow") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint64_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint64_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        renderscript->allocationSetNativeWindow(arg0, arg1);
        return 0;
    } else if (target_func == "allocationSetupBufferQueue") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        renderscript->allocationSetupBufferQueue(arg0, arg1);
        return 0;
    } else if (target_func == "allocationShareBufferQueue") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint64_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint64_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        renderscript->allocationShareBufferQueue(arg0, arg1);
        return 0;
    } else if (target_func == "allocationCopyToBitmap") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(void*);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        void* arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(uint64_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        uint64_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        renderscript->allocationCopyToBitmap(arg0, arg1, arg2);
        return 0;
    } else if (target_func == "allocation1DWrite") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(uint32_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        uint32_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(uint32_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        uint32_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        size_t type_size4 = sizeof(::android::hardware::hidl_vec<uint8_t>);
        if (size < type_size4) { return 0; }
        size -= type_size4;
        ::android::hardware::hidl_vec<uint8_t> arg4;
        memcpy(&arg4, data, type_size4);
        data += type_size4;

        renderscript->allocation1DWrite(arg0, arg1, arg2, arg3, arg4);
        return 0;
    } else if (target_func == "allocationElementWrite") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(uint32_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        uint32_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(uint32_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        uint32_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        size_t type_size4 = sizeof(uint32_t);
        if (size < type_size4) { return 0; }
        size -= type_size4;
        uint32_t arg4;
        memcpy(&arg4, data, type_size4);
        data += type_size4;

        size_t type_size5 = sizeof(::android::hardware::hidl_vec<uint8_t>);
        if (size < type_size5) { return 0; }
        size -= type_size5;
        ::android::hardware::hidl_vec<uint8_t> arg5;
        memcpy(&arg5, data, type_size5);
        data += type_size5;

        size_t type_size6 = sizeof(uint64_t);
        if (size < type_size6) { return 0; }
        size -= type_size6;
        uint64_t arg6;
        memcpy(&arg6, data, type_size6);
        data += type_size6;

        renderscript->allocationElementWrite(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        return 0;
    } else if (target_func == "allocation2DWrite") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(uint32_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        uint32_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(uint32_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        uint32_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        size_t type_size4 = sizeof(::android::hardware::renderscript::V1_0::AllocationCubemapFace);
        if (size < type_size4) { return 0; }
        size -= type_size4;
        ::android::hardware::renderscript::V1_0::AllocationCubemapFace arg4;
        memcpy(&arg4, data, type_size4);
        data += type_size4;

        size_t type_size5 = sizeof(uint32_t);
        if (size < type_size5) { return 0; }
        size -= type_size5;
        uint32_t arg5;
        memcpy(&arg5, data, type_size5);
        data += type_size5;

        size_t type_size6 = sizeof(uint32_t);
        if (size < type_size6) { return 0; }
        size -= type_size6;
        uint32_t arg6;
        memcpy(&arg6, data, type_size6);
        data += type_size6;

        size_t type_size7 = sizeof(::android::hardware::hidl_vec<uint8_t>);
        if (size < type_size7) { return 0; }
        size -= type_size7;
        ::android::hardware::hidl_vec<uint8_t> arg7;
        memcpy(&arg7, data, type_size7);
        data += type_size7;

        size_t type_size8 = sizeof(uint64_t);
        if (size < type_size8) { return 0; }
        size -= type_size8;
        uint64_t arg8;
        memcpy(&arg8, data, type_size8);
        data += type_size8;

        renderscript->allocation2DWrite(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        return 0;
    } else if (target_func == "allocation3DWrite") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(uint32_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        uint32_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(uint32_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        uint32_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        size_t type_size4 = sizeof(uint32_t);
        if (size < type_size4) { return 0; }
        size -= type_size4;
        uint32_t arg4;
        memcpy(&arg4, data, type_size4);
        data += type_size4;

        size_t type_size5 = sizeof(uint32_t);
        if (size < type_size5) { return 0; }
        size -= type_size5;
        uint32_t arg5;
        memcpy(&arg5, data, type_size5);
        data += type_size5;

        size_t type_size6 = sizeof(uint32_t);
        if (size < type_size6) { return 0; }
        size -= type_size6;
        uint32_t arg6;
        memcpy(&arg6, data, type_size6);
        data += type_size6;

        size_t type_size7 = sizeof(uint32_t);
        if (size < type_size7) { return 0; }
        size -= type_size7;
        uint32_t arg7;
        memcpy(&arg7, data, type_size7);
        data += type_size7;

        size_t type_size8 = sizeof(::android::hardware::hidl_vec<uint8_t>);
        if (size < type_size8) { return 0; }
        size -= type_size8;
        ::android::hardware::hidl_vec<uint8_t> arg8;
        memcpy(&arg8, data, type_size8);
        data += type_size8;

        size_t type_size9 = sizeof(uint64_t);
        if (size < type_size9) { return 0; }
        size -= type_size9;
        uint64_t arg9;
        memcpy(&arg9, data, type_size9);
        data += type_size9;

        renderscript->allocation3DWrite(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        return 0;
    } else if (target_func == "allocationGenerateMipmaps") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        renderscript->allocationGenerateMipmaps(arg0);
        return 0;
    } else if (target_func == "allocationRead") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(void*);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        void* arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(uint64_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        uint64_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        renderscript->allocationRead(arg0, arg1, arg2);
        return 0;
    } else if (target_func == "allocation1DRead") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(uint32_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        uint32_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(uint32_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        uint32_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        size_t type_size4 = sizeof(void*);
        if (size < type_size4) { return 0; }
        size -= type_size4;
        void* arg4;
        memcpy(&arg4, data, type_size4);
        data += type_size4;

        size_t type_size5 = sizeof(uint64_t);
        if (size < type_size5) { return 0; }
        size -= type_size5;
        uint64_t arg5;
        memcpy(&arg5, data, type_size5);
        data += type_size5;

        renderscript->allocation1DRead(arg0, arg1, arg2, arg3, arg4, arg5);
        return 0;
    } else if (target_func == "allocationElementRead") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(uint32_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        uint32_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(uint32_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        uint32_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        size_t type_size4 = sizeof(uint32_t);
        if (size < type_size4) { return 0; }
        size -= type_size4;
        uint32_t arg4;
        memcpy(&arg4, data, type_size4);
        data += type_size4;

        size_t type_size5 = sizeof(void*);
        if (size < type_size5) { return 0; }
        size -= type_size5;
        void* arg5;
        memcpy(&arg5, data, type_size5);
        data += type_size5;

        size_t type_size6 = sizeof(uint64_t);
        if (size < type_size6) { return 0; }
        size -= type_size6;
        uint64_t arg6;
        memcpy(&arg6, data, type_size6);
        data += type_size6;

        size_t type_size7 = sizeof(uint64_t);
        if (size < type_size7) { return 0; }
        size -= type_size7;
        uint64_t arg7;
        memcpy(&arg7, data, type_size7);
        data += type_size7;

        renderscript->allocationElementRead(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        return 0;
    } else if (target_func == "allocation2DRead") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(uint32_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        uint32_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(uint32_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        uint32_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        size_t type_size4 = sizeof(::android::hardware::renderscript::V1_0::AllocationCubemapFace);
        if (size < type_size4) { return 0; }
        size -= type_size4;
        ::android::hardware::renderscript::V1_0::AllocationCubemapFace arg4;
        memcpy(&arg4, data, type_size4);
        data += type_size4;

        size_t type_size5 = sizeof(uint32_t);
        if (size < type_size5) { return 0; }
        size -= type_size5;
        uint32_t arg5;
        memcpy(&arg5, data, type_size5);
        data += type_size5;

        size_t type_size6 = sizeof(uint32_t);
        if (size < type_size6) { return 0; }
        size -= type_size6;
        uint32_t arg6;
        memcpy(&arg6, data, type_size6);
        data += type_size6;

        size_t type_size7 = sizeof(void*);
        if (size < type_size7) { return 0; }
        size -= type_size7;
        void* arg7;
        memcpy(&arg7, data, type_size7);
        data += type_size7;

        size_t type_size8 = sizeof(uint64_t);
        if (size < type_size8) { return 0; }
        size -= type_size8;
        uint64_t arg8;
        memcpy(&arg8, data, type_size8);
        data += type_size8;

        size_t type_size9 = sizeof(uint64_t);
        if (size < type_size9) { return 0; }
        size -= type_size9;
        uint64_t arg9;
        memcpy(&arg9, data, type_size9);
        data += type_size9;

        renderscript->allocation2DRead(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        return 0;
    } else if (target_func == "allocation3DRead") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(uint32_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        uint32_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(uint32_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        uint32_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        size_t type_size4 = sizeof(uint32_t);
        if (size < type_size4) { return 0; }
        size -= type_size4;
        uint32_t arg4;
        memcpy(&arg4, data, type_size4);
        data += type_size4;

        size_t type_size5 = sizeof(uint32_t);
        if (size < type_size5) { return 0; }
        size -= type_size5;
        uint32_t arg5;
        memcpy(&arg5, data, type_size5);
        data += type_size5;

        size_t type_size6 = sizeof(uint32_t);
        if (size < type_size6) { return 0; }
        size -= type_size6;
        uint32_t arg6;
        memcpy(&arg6, data, type_size6);
        data += type_size6;

        size_t type_size7 = sizeof(uint32_t);
        if (size < type_size7) { return 0; }
        size -= type_size7;
        uint32_t arg7;
        memcpy(&arg7, data, type_size7);
        data += type_size7;

        size_t type_size8 = sizeof(void*);
        if (size < type_size8) { return 0; }
        size -= type_size8;
        void* arg8;
        memcpy(&arg8, data, type_size8);
        data += type_size8;

        size_t type_size9 = sizeof(uint64_t);
        if (size < type_size9) { return 0; }
        size -= type_size9;
        uint64_t arg9;
        memcpy(&arg9, data, type_size9);
        data += type_size9;

        size_t type_size10 = sizeof(uint64_t);
        if (size < type_size10) { return 0; }
        size -= type_size10;
        uint64_t arg10;
        memcpy(&arg10, data, type_size10);
        data += type_size10;

        renderscript->allocation3DRead(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
        return 0;
    } else if (target_func == "allocationSyncAll") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(::android::hardware::renderscript::V1_0::AllocationUsageType);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        ::android::hardware::renderscript::V1_0::AllocationUsageType arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        renderscript->allocationSyncAll(arg0, arg1);
        return 0;
    } else if (target_func == "allocationResize1D") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        renderscript->allocationResize1D(arg0, arg1);
        return 0;
    } else if (target_func == "allocationCopy2DRange") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(uint32_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        uint32_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(uint32_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        uint32_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        size_t type_size4 = sizeof(::android::hardware::renderscript::V1_0::AllocationCubemapFace);
        if (size < type_size4) { return 0; }
        size -= type_size4;
        ::android::hardware::renderscript::V1_0::AllocationCubemapFace arg4;
        memcpy(&arg4, data, type_size4);
        data += type_size4;

        size_t type_size5 = sizeof(uint32_t);
        if (size < type_size5) { return 0; }
        size -= type_size5;
        uint32_t arg5;
        memcpy(&arg5, data, type_size5);
        data += type_size5;

        size_t type_size6 = sizeof(uint32_t);
        if (size < type_size6) { return 0; }
        size -= type_size6;
        uint32_t arg6;
        memcpy(&arg6, data, type_size6);
        data += type_size6;

        size_t type_size7 = sizeof(uint64_t);
        if (size < type_size7) { return 0; }
        size -= type_size7;
        uint64_t arg7;
        memcpy(&arg7, data, type_size7);
        data += type_size7;

        size_t type_size8 = sizeof(uint32_t);
        if (size < type_size8) { return 0; }
        size -= type_size8;
        uint32_t arg8;
        memcpy(&arg8, data, type_size8);
        data += type_size8;

        size_t type_size9 = sizeof(uint32_t);
        if (size < type_size9) { return 0; }
        size -= type_size9;
        uint32_t arg9;
        memcpy(&arg9, data, type_size9);
        data += type_size9;

        size_t type_size10 = sizeof(uint32_t);
        if (size < type_size10) { return 0; }
        size -= type_size10;
        uint32_t arg10;
        memcpy(&arg10, data, type_size10);
        data += type_size10;

        size_t type_size11 = sizeof(::android::hardware::renderscript::V1_0::AllocationCubemapFace);
        if (size < type_size11) { return 0; }
        size -= type_size11;
        ::android::hardware::renderscript::V1_0::AllocationCubemapFace arg11;
        memcpy(&arg11, data, type_size11);
        data += type_size11;

        renderscript->allocationCopy2DRange(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
        return 0;
    } else if (target_func == "allocationCopy3DRange") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(uint32_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        uint32_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(uint32_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        uint32_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        size_t type_size4 = sizeof(uint32_t);
        if (size < type_size4) { return 0; }
        size -= type_size4;
        uint32_t arg4;
        memcpy(&arg4, data, type_size4);
        data += type_size4;

        size_t type_size5 = sizeof(uint32_t);
        if (size < type_size5) { return 0; }
        size -= type_size5;
        uint32_t arg5;
        memcpy(&arg5, data, type_size5);
        data += type_size5;

        size_t type_size6 = sizeof(uint32_t);
        if (size < type_size6) { return 0; }
        size -= type_size6;
        uint32_t arg6;
        memcpy(&arg6, data, type_size6);
        data += type_size6;

        size_t type_size7 = sizeof(uint32_t);
        if (size < type_size7) { return 0; }
        size -= type_size7;
        uint32_t arg7;
        memcpy(&arg7, data, type_size7);
        data += type_size7;

        size_t type_size8 = sizeof(uint64_t);
        if (size < type_size8) { return 0; }
        size -= type_size8;
        uint64_t arg8;
        memcpy(&arg8, data, type_size8);
        data += type_size8;

        size_t type_size9 = sizeof(uint32_t);
        if (size < type_size9) { return 0; }
        size -= type_size9;
        uint32_t arg9;
        memcpy(&arg9, data, type_size9);
        data += type_size9;

        size_t type_size10 = sizeof(uint32_t);
        if (size < type_size10) { return 0; }
        size -= type_size10;
        uint32_t arg10;
        memcpy(&arg10, data, type_size10);
        data += type_size10;

        size_t type_size11 = sizeof(uint32_t);
        if (size < type_size11) { return 0; }
        size -= type_size11;
        uint32_t arg11;
        memcpy(&arg11, data, type_size11);
        data += type_size11;

        size_t type_size12 = sizeof(uint32_t);
        if (size < type_size12) { return 0; }
        size -= type_size12;
        uint32_t arg12;
        memcpy(&arg12, data, type_size12);
        data += type_size12;

        renderscript->allocationCopy3DRange(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
        return 0;
    } else if (target_func == "allocationIoSend") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        renderscript->allocationIoSend(arg0);
        return 0;
    } else if (target_func == "allocationIoReceive") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        renderscript->allocationIoReceive(arg0);
        return 0;
    } else if (target_func == "allocationGetPointer") {
        // No-op. Only need this to make HAL function call.
        auto hidl_cb = [](void* arg0, uint64_t arg1){};

        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(::android::hardware::renderscript::V1_0::AllocationCubemapFace);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        ::android::hardware::renderscript::V1_0::AllocationCubemapFace arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(uint32_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        uint32_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        renderscript->allocationGetPointer(arg0, arg1, arg2, arg3, hidl_cb);
        return 0;
    } else if (target_func == "elementGetNativeMetadata") {
        // No-op. Only need this to make HAL function call.
        auto hidl_cb = [](const ::android::hardware::hidl_vec<uint32_t>& arg0){};

        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        renderscript->elementGetNativeMetadata(arg0, hidl_cb);
        return 0;
    } else if (target_func == "elementGetSubElements") {
        // No-op. Only need this to make HAL function call.
        auto hidl_cb = [](const ::android::hardware::hidl_vec<uint64_t>& arg0, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& arg1, const ::android::hardware::hidl_vec<uint64_t>& arg2){};

        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint64_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint64_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        renderscript->elementGetSubElements(arg0, arg1, hidl_cb);
        return 0;
    } else if (target_func == "elementCreate") {
        size_t type_size0 = sizeof(::android::hardware::renderscript::V1_0::DataType);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        ::android::hardware::renderscript::V1_0::DataType arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(::android::hardware::renderscript::V1_0::DataKind);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        ::android::hardware::renderscript::V1_0::DataKind arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(bool);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        bool arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(uint32_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        uint32_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        renderscript->elementCreate(arg0, arg1, arg2, arg3);
        return 0;
    } else if (target_func == "elementComplexCreate") {
        size_t type_size0 = sizeof(::android::hardware::hidl_vec<uint64_t>);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        ::android::hardware::hidl_vec<uint64_t> arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(::android::hardware::hidl_vec<::android::hardware::hidl_string>);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        ::android::hardware::hidl_vec<::android::hardware::hidl_string> arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(::android::hardware::hidl_vec<uint64_t>);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        ::android::hardware::hidl_vec<uint64_t> arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        renderscript->elementComplexCreate(arg0, arg1, arg2);
        return 0;
    } else if (target_func == "typeGetNativeMetadata") {
        // No-op. Only need this to make HAL function call.
        auto hidl_cb = [](const ::android::hardware::hidl_vec<uint64_t>& arg0){};

        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        renderscript->typeGetNativeMetadata(arg0, hidl_cb);
        return 0;
    } else if (target_func == "typeCreate") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(uint32_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        uint32_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(uint32_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        uint32_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        size_t type_size4 = sizeof(bool);
        if (size < type_size4) { return 0; }
        size -= type_size4;
        bool arg4;
        memcpy(&arg4, data, type_size4);
        data += type_size4;

        size_t type_size5 = sizeof(bool);
        if (size < type_size5) { return 0; }
        size -= type_size5;
        bool arg5;
        memcpy(&arg5, data, type_size5);
        data += type_size5;

        size_t type_size6 = sizeof(::android::hardware::renderscript::V1_0::YuvFormat);
        if (size < type_size6) { return 0; }
        size -= type_size6;
        ::android::hardware::renderscript::V1_0::YuvFormat arg6;
        memcpy(&arg6, data, type_size6);
        data += type_size6;

        renderscript->typeCreate(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        return 0;
    } else if (target_func == "contextDestroy") {
        renderscript->contextDestroy();
        return 0;
    } else if (target_func == "contextGetMessage") {
        // No-op. Only need this to make HAL function call.
        auto hidl_cb = [](::android::hardware::renderscript::V1_0::MessageToClientType arg0, uint64_t arg1){};

        size_t type_size0 = sizeof(void*);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        void* arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint64_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint64_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        renderscript->contextGetMessage(arg0, arg1, hidl_cb);
        return 0;
    } else if (target_func == "contextPeekMessage") {
        // No-op. Only need this to make HAL function call.
        auto hidl_cb = [](::android::hardware::renderscript::V1_0::MessageToClientType arg0, uint64_t arg1, uint32_t arg2){};

        renderscript->contextPeekMessage(hidl_cb);
        return 0;
    } else if (target_func == "contextSendMessage") {
        size_t type_size0 = sizeof(uint32_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint32_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(::android::hardware::hidl_vec<uint8_t>);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        ::android::hardware::hidl_vec<uint8_t> arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        renderscript->contextSendMessage(arg0, arg1);
        return 0;
    } else if (target_func == "contextInitToClient") {
        renderscript->contextInitToClient();
        return 0;
    } else if (target_func == "contextDeinitToClient") {
        renderscript->contextDeinitToClient();
        return 0;
    } else if (target_func == "contextFinish") {
        renderscript->contextFinish();
        return 0;
    } else if (target_func == "contextLog") {
        renderscript->contextLog();
        return 0;
    } else if (target_func == "contextSetCacheDir") {
        size_t type_size0 = sizeof(::android::hardware::hidl_string);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        ::android::hardware::hidl_string arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        renderscript->contextSetCacheDir(arg0);
        return 0;
    } else if (target_func == "contextSetPriority") {
        size_t type_size0 = sizeof(::android::hardware::renderscript::V1_0::ThreadPriorities);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        ::android::hardware::renderscript::V1_0::ThreadPriorities arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        renderscript->contextSetPriority(arg0);
        return 0;
    } else if (target_func == "assignName") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(::android::hardware::hidl_string);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        ::android::hardware::hidl_string arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        renderscript->assignName(arg0, arg1);
        return 0;
    } else if (target_func == "getName") {
        // No-op. Only need this to make HAL function call.
        auto hidl_cb = [](const ::android::hardware::hidl_string& arg0){};

        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        renderscript->getName(arg0, hidl_cb);
        return 0;
    } else if (target_func == "closureCreate") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint64_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint64_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(::android::hardware::hidl_vec<uint64_t>);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        ::android::hardware::hidl_vec<uint64_t> arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(::android::hardware::hidl_vec<int64_t>);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        ::android::hardware::hidl_vec<int64_t> arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        size_t type_size4 = sizeof(::android::hardware::hidl_vec<int32_t>);
        if (size < type_size4) { return 0; }
        size -= type_size4;
        ::android::hardware::hidl_vec<int32_t> arg4;
        memcpy(&arg4, data, type_size4);
        data += type_size4;

        size_t type_size5 = sizeof(::android::hardware::hidl_vec<uint64_t>);
        if (size < type_size5) { return 0; }
        size -= type_size5;
        ::android::hardware::hidl_vec<uint64_t> arg5;
        memcpy(&arg5, data, type_size5);
        data += type_size5;

        size_t type_size6 = sizeof(::android::hardware::hidl_vec<uint64_t>);
        if (size < type_size6) { return 0; }
        size -= type_size6;
        ::android::hardware::hidl_vec<uint64_t> arg6;
        memcpy(&arg6, data, type_size6);
        data += type_size6;

        renderscript->closureCreate(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        return 0;
    } else if (target_func == "invokeClosureCreate") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(::android::hardware::hidl_vec<uint8_t>);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        ::android::hardware::hidl_vec<uint8_t> arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(::android::hardware::hidl_vec<uint64_t>);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        ::android::hardware::hidl_vec<uint64_t> arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(::android::hardware::hidl_vec<int64_t>);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        ::android::hardware::hidl_vec<int64_t> arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        size_t type_size4 = sizeof(::android::hardware::hidl_vec<int32_t>);
        if (size < type_size4) { return 0; }
        size -= type_size4;
        ::android::hardware::hidl_vec<int32_t> arg4;
        memcpy(&arg4, data, type_size4);
        data += type_size4;

        renderscript->invokeClosureCreate(arg0, arg1, arg2, arg3, arg4);
        return 0;
    } else if (target_func == "closureSetArg") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(void*);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        void* arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(int32_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        int32_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        renderscript->closureSetArg(arg0, arg1, arg2, arg3);
        return 0;
    } else if (target_func == "closureSetGlobal") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint64_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint64_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(int64_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        int64_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(int32_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        int32_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        renderscript->closureSetGlobal(arg0, arg1, arg2, arg3);
        return 0;
    } else if (target_func == "scriptKernelIDCreate") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(int32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        int32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(int32_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        int32_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        renderscript->scriptKernelIDCreate(arg0, arg1, arg2);
        return 0;
    } else if (target_func == "scriptInvokeIDCreate") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(int32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        int32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        renderscript->scriptInvokeIDCreate(arg0, arg1);
        return 0;
    } else if (target_func == "scriptFieldIDCreate") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(int32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        int32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        renderscript->scriptFieldIDCreate(arg0, arg1);
        return 0;
    } else if (target_func == "scriptGroupCreate") {
        size_t type_size0 = sizeof(::android::hardware::hidl_vec<uint64_t>);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        ::android::hardware::hidl_vec<uint64_t> arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(::android::hardware::hidl_vec<uint64_t>);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        ::android::hardware::hidl_vec<uint64_t> arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(::android::hardware::hidl_vec<uint64_t>);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        ::android::hardware::hidl_vec<uint64_t> arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(::android::hardware::hidl_vec<uint64_t>);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        ::android::hardware::hidl_vec<uint64_t> arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        size_t type_size4 = sizeof(::android::hardware::hidl_vec<uint64_t>);
        if (size < type_size4) { return 0; }
        size -= type_size4;
        ::android::hardware::hidl_vec<uint64_t> arg4;
        memcpy(&arg4, data, type_size4);
        data += type_size4;

        renderscript->scriptGroupCreate(arg0, arg1, arg2, arg3, arg4);
        return 0;
    } else if (target_func == "scriptGroup2Create") {
        size_t type_size0 = sizeof(::android::hardware::hidl_string);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        ::android::hardware::hidl_string arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(::android::hardware::hidl_string);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        ::android::hardware::hidl_string arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(::android::hardware::hidl_vec<uint64_t>);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        ::android::hardware::hidl_vec<uint64_t> arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        renderscript->scriptGroup2Create(arg0, arg1, arg2);
        return 0;
    } else if (target_func == "scriptGroupSetOutput") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint64_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint64_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(uint64_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        uint64_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        renderscript->scriptGroupSetOutput(arg0, arg1, arg2);
        return 0;
    } else if (target_func == "scriptGroupSetInput") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint64_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint64_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(uint64_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        uint64_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        renderscript->scriptGroupSetInput(arg0, arg1, arg2);
        return 0;
    } else if (target_func == "scriptGroupExecute") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        renderscript->scriptGroupExecute(arg0);
        return 0;
    } else if (target_func == "objDestroy") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        renderscript->objDestroy(arg0);
        return 0;
    } else if (target_func == "samplerCreate") {
        size_t type_size0 = sizeof(::android::hardware::renderscript::V1_0::SamplerValue);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        ::android::hardware::renderscript::V1_0::SamplerValue arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(::android::hardware::renderscript::V1_0::SamplerValue);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        ::android::hardware::renderscript::V1_0::SamplerValue arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(::android::hardware::renderscript::V1_0::SamplerValue);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        ::android::hardware::renderscript::V1_0::SamplerValue arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(::android::hardware::renderscript::V1_0::SamplerValue);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        ::android::hardware::renderscript::V1_0::SamplerValue arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        size_t type_size4 = sizeof(::android::hardware::renderscript::V1_0::SamplerValue);
        if (size < type_size4) { return 0; }
        size -= type_size4;
        ::android::hardware::renderscript::V1_0::SamplerValue arg4;
        memcpy(&arg4, data, type_size4);
        data += type_size4;

        size_t type_size5 = sizeof(float);
        if (size < type_size5) { return 0; }
        size -= type_size5;
        float arg5;
        memcpy(&arg5, data, type_size5);
        data += type_size5;

        renderscript->samplerCreate(arg0, arg1, arg2, arg3, arg4, arg5);
        return 0;
    } else if (target_func == "scriptBindAllocation") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint64_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint64_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(uint32_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        uint32_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        renderscript->scriptBindAllocation(arg0, arg1, arg2);
        return 0;
    } else if (target_func == "scriptSetTimeZone") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(::android::hardware::hidl_string);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        ::android::hardware::hidl_string arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        renderscript->scriptSetTimeZone(arg0, arg1);
        return 0;
    } else if (target_func == "scriptInvoke") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        renderscript->scriptInvoke(arg0, arg1);
        return 0;
    } else if (target_func == "scriptInvokeV") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(::android::hardware::hidl_vec<uint8_t>);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        ::android::hardware::hidl_vec<uint8_t> arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        renderscript->scriptInvokeV(arg0, arg1, arg2);
        return 0;
    } else if (target_func == "scriptForEach") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(::android::hardware::hidl_vec<uint64_t>);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        ::android::hardware::hidl_vec<uint64_t> arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(uint64_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        uint64_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        size_t type_size4 = sizeof(::android::hardware::hidl_vec<uint8_t>);
        if (size < type_size4) { return 0; }
        size -= type_size4;
        ::android::hardware::hidl_vec<uint8_t> arg4;
        memcpy(&arg4, data, type_size4);
        data += type_size4;

        size_t type_size5 = sizeof(void*);
        if (size < type_size5) { return 0; }
        size -= type_size5;
        void* arg5;
        memcpy(&arg5, data, type_size5);
        data += type_size5;

        renderscript->scriptForEach(arg0, arg1, arg2, arg3, arg4, arg5);
        return 0;
    } else if (target_func == "scriptReduce") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(::android::hardware::hidl_vec<uint64_t>);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        ::android::hardware::hidl_vec<uint64_t> arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(uint64_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        uint64_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        size_t type_size4 = sizeof(void*);
        if (size < type_size4) { return 0; }
        size -= type_size4;
        void* arg4;
        memcpy(&arg4, data, type_size4);
        data += type_size4;

        renderscript->scriptReduce(arg0, arg1, arg2, arg3, arg4);
        return 0;
    } else if (target_func == "scriptSetVarI") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(int32_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        int32_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        renderscript->scriptSetVarI(arg0, arg1, arg2);
        return 0;
    } else if (target_func == "scriptSetVarObj") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(uint64_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        uint64_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        renderscript->scriptSetVarObj(arg0, arg1, arg2);
        return 0;
    } else if (target_func == "scriptSetVarJ") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(int64_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        int64_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        renderscript->scriptSetVarJ(arg0, arg1, arg2);
        return 0;
    } else if (target_func == "scriptSetVarF") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(float);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        float arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        renderscript->scriptSetVarF(arg0, arg1, arg2);
        return 0;
    } else if (target_func == "scriptSetVarD") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(double);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        double arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        renderscript->scriptSetVarD(arg0, arg1, arg2);
        return 0;
    } else if (target_func == "scriptSetVarV") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(::android::hardware::hidl_vec<uint8_t>);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        ::android::hardware::hidl_vec<uint8_t> arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        renderscript->scriptSetVarV(arg0, arg1, arg2);
        return 0;
    } else if (target_func == "scriptGetVarV") {
        // No-op. Only need this to make HAL function call.
        auto hidl_cb = [](const ::android::hardware::hidl_vec<uint8_t>& arg0){};

        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(uint64_t);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        uint64_t arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        renderscript->scriptGetVarV(arg0, arg1, arg2, hidl_cb);
        return 0;
    } else if (target_func == "scriptSetVarVE") {
        size_t type_size0 = sizeof(uint64_t);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        uint64_t arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint32_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint32_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(::android::hardware::hidl_vec<uint8_t>);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        ::android::hardware::hidl_vec<uint8_t> arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        size_t type_size3 = sizeof(uint64_t);
        if (size < type_size3) { return 0; }
        size -= type_size3;
        uint64_t arg3;
        memcpy(&arg3, data, type_size3);
        data += type_size3;

        size_t type_size4 = sizeof(::android::hardware::hidl_vec<uint32_t>);
        if (size < type_size4) { return 0; }
        size -= type_size4;
        ::android::hardware::hidl_vec<uint32_t> arg4;
        memcpy(&arg4, data, type_size4);
        data += type_size4;

        renderscript->scriptSetVarVE(arg0, arg1, arg2, arg3, arg4);
        return 0;
    } else if (target_func == "scriptCCreate") {
        size_t type_size0 = sizeof(::android::hardware::hidl_string);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        ::android::hardware::hidl_string arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(::android::hardware::hidl_string);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        ::android::hardware::hidl_string arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        size_t type_size2 = sizeof(::android::hardware::hidl_vec<uint8_t>);
        if (size < type_size2) { return 0; }
        size -= type_size2;
        ::android::hardware::hidl_vec<uint8_t> arg2;
        memcpy(&arg2, data, type_size2);
        data += type_size2;

        renderscript->scriptCCreate(arg0, arg1, arg2);
        return 0;
    } else if (target_func == "scriptIntrinsicCreate") {
        size_t type_size0 = sizeof(::android::hardware::renderscript::V1_0::ScriptIntrinsicID);
        if (size < type_size0) { return 0; }
        size -= type_size0;
        ::android::hardware::renderscript::V1_0::ScriptIntrinsicID arg0;
        memcpy(&arg0, data, type_size0);
        data += type_size0;

        size_t type_size1 = sizeof(uint64_t);
        if (size < type_size1) { return 0; }
        size -= type_size1;
        uint64_t arg1;
        memcpy(&arg1, data, type_size1);
        data += type_size1;

        renderscript->scriptIntrinsicCreate(arg0, arg1);
        return 0;
    } else {
        cerr << "No such function: " << target_func << endl;
        exit(1);
    }
}

}  // namespace vts
}  // namespace android
