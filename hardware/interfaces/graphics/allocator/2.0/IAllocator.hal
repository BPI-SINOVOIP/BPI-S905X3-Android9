/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.hardware.graphics.allocator@2.0;

import android.hardware.graphics.mapper@2.0;

interface IAllocator {
    /**
     * Retrieves implementation-defined debug information, which will be
     * displayed during, for example, `dumpsys SurfaceFlinger`.
     *
     * @return debugInfo is a string of debug information.
     */
    @entry
    @exit
    @callflow(next="*")
    dumpDebugInfo() generates (string debugInfo);

    /**
     * Allocates buffers with the properties specified by the descriptor.
     *
     * @param descriptor specifies the properties of the buffers to allocate.
     * @param count is the number of buffers to allocate.
     * @return error is NONE upon success. Otherwise,
     *         BAD_DESCRIPTOR when the descriptor is invalid.
     *         NO_RESOURCES when the allocation cannot be fulfilled at this
     *                      time.
     *         UNSUPPORTED when any of the property encoded in the descriptor
     *                     is not supported.
     * @return stride is the number of pixels between two consecutive rows of
     *         the buffers, when the concept of consecutive rows is defined.
     *         Otherwise, it has no meaning.
     * @return buffers is an array of raw handles to the newly allocated
     *         buffers.
     */
    @entry
    @exit
    @callflow(next="*")
    allocate(BufferDescriptor descriptor, uint32_t count)
        generates (Error error,
                   uint32_t stride,
                   vec<handle> buffers);
};
