/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Don't edit this file!  It is auto-generated by frameworks/rs/api/generate.sh.

package android.renderscript.cts;

import android.renderscript.Allocation;
import android.renderscript.RSRuntimeException;
import android.renderscript.Element;
import android.renderscript.cts.Target;

import java.util.Arrays;

public class TestMix extends RSBaseCompute {

    private ScriptC_TestMix script;
    private ScriptC_TestMixRelaxed scriptRelaxed;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        script = new ScriptC_TestMix(mRS);
        scriptRelaxed = new ScriptC_TestMixRelaxed(mRS);
    }

    @Override
    protected void tearDown() throws Exception {
        script.destroy();
        scriptRelaxed.destroy();
        super.tearDown();
    }

    public class ArgumentsFloatFloatFloatFloat {
        public float inStart;
        public float inStop;
        public float inFraction;
        public Target.Floaty out;
    }

    private void checkMixFloatFloatFloatFloat() {
        Allocation inStart = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 0x9f4beff6471d6db1l, false);
        Allocation inStop = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 0x6ede0b88b4422e8fl, false);
        Allocation inFraction = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 0x6d2f014ec6a51d9fl, false);
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 1), INPUTSIZE);
            script.set_gAllocInStop(inStop);
            script.set_gAllocInFraction(inFraction);
            script.forEach_testMixFloatFloatFloatFloat(inStart, out);
            verifyResultsMixFloatFloatFloatFloat(inStart, inStop, inFraction, out, false);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixFloatFloatFloatFloat: " + e.toString());
        }
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 1), INPUTSIZE);
            scriptRelaxed.set_gAllocInStop(inStop);
            scriptRelaxed.set_gAllocInFraction(inFraction);
            scriptRelaxed.forEach_testMixFloatFloatFloatFloat(inStart, out);
            verifyResultsMixFloatFloatFloatFloat(inStart, inStop, inFraction, out, true);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixFloatFloatFloatFloat: " + e.toString());
        }
        inStart.destroy();
        inStop.destroy();
        inFraction.destroy();
    }

    private void verifyResultsMixFloatFloatFloatFloat(Allocation inStart, Allocation inStop, Allocation inFraction, Allocation out, boolean relaxed) {
        float[] arrayInStart = new float[INPUTSIZE * 1];
        Arrays.fill(arrayInStart, (float) 42);
        inStart.copyTo(arrayInStart);
        float[] arrayInStop = new float[INPUTSIZE * 1];
        Arrays.fill(arrayInStop, (float) 42);
        inStop.copyTo(arrayInStop);
        float[] arrayInFraction = new float[INPUTSIZE * 1];
        Arrays.fill(arrayInFraction, (float) 42);
        inFraction.copyTo(arrayInFraction);
        float[] arrayOut = new float[INPUTSIZE * 1];
        Arrays.fill(arrayOut, (float) 42);
        out.copyTo(arrayOut);
        StringBuilder message = new StringBuilder();
        boolean errorFound = false;
        for (int i = 0; i < INPUTSIZE; i++) {
            for (int j = 0; j < 1 ; j++) {
                // Extract the inputs.
                ArgumentsFloatFloatFloatFloat args = new ArgumentsFloatFloatFloatFloat();
                args.inStart = arrayInStart[i];
                args.inStop = arrayInStop[i];
                args.inFraction = arrayInFraction[i];
                // Figure out what the outputs should have been.
                Target target = new Target(Target.FunctionType.NORMAL, Target.ReturnType.FLOAT, relaxed);
                CoreMathVerifier.computeMix(args, target);
                // Validate the outputs.
                boolean valid = true;
                if (!args.out.couldBe(arrayOut[i * 1 + j])) {
                    valid = false;
                }
                if (!valid) {
                    if (!errorFound) {
                        errorFound = true;
                        message.append("Input inStart: ");
                        appendVariableToMessage(message, args.inStart);
                        message.append("\n");
                        message.append("Input inStop: ");
                        appendVariableToMessage(message, args.inStop);
                        message.append("\n");
                        message.append("Input inFraction: ");
                        appendVariableToMessage(message, args.inFraction);
                        message.append("\n");
                        message.append("Expected output out: ");
                        appendVariableToMessage(message, args.out);
                        message.append("\n");
                        message.append("Actual   output out: ");
                        appendVariableToMessage(message, arrayOut[i * 1 + j]);
                        if (!args.out.couldBe(arrayOut[i * 1 + j])) {
                            message.append(" FAIL");
                        }
                        message.append("\n");
                        message.append("Errors at");
                    }
                    message.append(" [");
                    message.append(Integer.toString(i));
                    message.append(", ");
                    message.append(Integer.toString(j));
                    message.append("]");
                }
            }
        }
        assertFalse("Incorrect output for checkMixFloatFloatFloatFloat" +
                (relaxed ? "_relaxed" : "") + ":\n" + message.toString(), errorFound);
    }

    private void checkMixFloat2Float2Float2Float2() {
        Allocation inStart = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 0x45502e8f0a2d9ce9l, false);
        Allocation inStop = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 0xba2b8a035395e837l, false);
        Allocation inFraction = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 0xe56bef3c621e0ac7l, false);
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 2), INPUTSIZE);
            script.set_gAllocInStop(inStop);
            script.set_gAllocInFraction(inFraction);
            script.forEach_testMixFloat2Float2Float2Float2(inStart, out);
            verifyResultsMixFloat2Float2Float2Float2(inStart, inStop, inFraction, out, false);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixFloat2Float2Float2Float2: " + e.toString());
        }
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 2), INPUTSIZE);
            scriptRelaxed.set_gAllocInStop(inStop);
            scriptRelaxed.set_gAllocInFraction(inFraction);
            scriptRelaxed.forEach_testMixFloat2Float2Float2Float2(inStart, out);
            verifyResultsMixFloat2Float2Float2Float2(inStart, inStop, inFraction, out, true);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixFloat2Float2Float2Float2: " + e.toString());
        }
        inStart.destroy();
        inStop.destroy();
        inFraction.destroy();
    }

    private void verifyResultsMixFloat2Float2Float2Float2(Allocation inStart, Allocation inStop, Allocation inFraction, Allocation out, boolean relaxed) {
        float[] arrayInStart = new float[INPUTSIZE * 2];
        Arrays.fill(arrayInStart, (float) 42);
        inStart.copyTo(arrayInStart);
        float[] arrayInStop = new float[INPUTSIZE * 2];
        Arrays.fill(arrayInStop, (float) 42);
        inStop.copyTo(arrayInStop);
        float[] arrayInFraction = new float[INPUTSIZE * 2];
        Arrays.fill(arrayInFraction, (float) 42);
        inFraction.copyTo(arrayInFraction);
        float[] arrayOut = new float[INPUTSIZE * 2];
        Arrays.fill(arrayOut, (float) 42);
        out.copyTo(arrayOut);
        StringBuilder message = new StringBuilder();
        boolean errorFound = false;
        for (int i = 0; i < INPUTSIZE; i++) {
            for (int j = 0; j < 2 ; j++) {
                // Extract the inputs.
                ArgumentsFloatFloatFloatFloat args = new ArgumentsFloatFloatFloatFloat();
                args.inStart = arrayInStart[i * 2 + j];
                args.inStop = arrayInStop[i * 2 + j];
                args.inFraction = arrayInFraction[i * 2 + j];
                // Figure out what the outputs should have been.
                Target target = new Target(Target.FunctionType.NORMAL, Target.ReturnType.FLOAT, relaxed);
                CoreMathVerifier.computeMix(args, target);
                // Validate the outputs.
                boolean valid = true;
                if (!args.out.couldBe(arrayOut[i * 2 + j])) {
                    valid = false;
                }
                if (!valid) {
                    if (!errorFound) {
                        errorFound = true;
                        message.append("Input inStart: ");
                        appendVariableToMessage(message, args.inStart);
                        message.append("\n");
                        message.append("Input inStop: ");
                        appendVariableToMessage(message, args.inStop);
                        message.append("\n");
                        message.append("Input inFraction: ");
                        appendVariableToMessage(message, args.inFraction);
                        message.append("\n");
                        message.append("Expected output out: ");
                        appendVariableToMessage(message, args.out);
                        message.append("\n");
                        message.append("Actual   output out: ");
                        appendVariableToMessage(message, arrayOut[i * 2 + j]);
                        if (!args.out.couldBe(arrayOut[i * 2 + j])) {
                            message.append(" FAIL");
                        }
                        message.append("\n");
                        message.append("Errors at");
                    }
                    message.append(" [");
                    message.append(Integer.toString(i));
                    message.append(", ");
                    message.append(Integer.toString(j));
                    message.append("]");
                }
            }
        }
        assertFalse("Incorrect output for checkMixFloat2Float2Float2Float2" +
                (relaxed ? "_relaxed" : "") + ":\n" + message.toString(), errorFound);
    }

    private void checkMixFloat3Float3Float3Float3() {
        Allocation inStart = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, 0xeb4701726b009c5l, false);
        Allocation inStop = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, 0x9b21f6b3249ee4cbl, false);
        Allocation inFraction = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, 0xf15862eab0d4f51bl, false);
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 3), INPUTSIZE);
            script.set_gAllocInStop(inStop);
            script.set_gAllocInFraction(inFraction);
            script.forEach_testMixFloat3Float3Float3Float3(inStart, out);
            verifyResultsMixFloat3Float3Float3Float3(inStart, inStop, inFraction, out, false);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixFloat3Float3Float3Float3: " + e.toString());
        }
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 3), INPUTSIZE);
            scriptRelaxed.set_gAllocInStop(inStop);
            scriptRelaxed.set_gAllocInFraction(inFraction);
            scriptRelaxed.forEach_testMixFloat3Float3Float3Float3(inStart, out);
            verifyResultsMixFloat3Float3Float3Float3(inStart, inStop, inFraction, out, true);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixFloat3Float3Float3Float3: " + e.toString());
        }
        inStart.destroy();
        inStop.destroy();
        inFraction.destroy();
    }

    private void verifyResultsMixFloat3Float3Float3Float3(Allocation inStart, Allocation inStop, Allocation inFraction, Allocation out, boolean relaxed) {
        float[] arrayInStart = new float[INPUTSIZE * 4];
        Arrays.fill(arrayInStart, (float) 42);
        inStart.copyTo(arrayInStart);
        float[] arrayInStop = new float[INPUTSIZE * 4];
        Arrays.fill(arrayInStop, (float) 42);
        inStop.copyTo(arrayInStop);
        float[] arrayInFraction = new float[INPUTSIZE * 4];
        Arrays.fill(arrayInFraction, (float) 42);
        inFraction.copyTo(arrayInFraction);
        float[] arrayOut = new float[INPUTSIZE * 4];
        Arrays.fill(arrayOut, (float) 42);
        out.copyTo(arrayOut);
        StringBuilder message = new StringBuilder();
        boolean errorFound = false;
        for (int i = 0; i < INPUTSIZE; i++) {
            for (int j = 0; j < 3 ; j++) {
                // Extract the inputs.
                ArgumentsFloatFloatFloatFloat args = new ArgumentsFloatFloatFloatFloat();
                args.inStart = arrayInStart[i * 4 + j];
                args.inStop = arrayInStop[i * 4 + j];
                args.inFraction = arrayInFraction[i * 4 + j];
                // Figure out what the outputs should have been.
                Target target = new Target(Target.FunctionType.NORMAL, Target.ReturnType.FLOAT, relaxed);
                CoreMathVerifier.computeMix(args, target);
                // Validate the outputs.
                boolean valid = true;
                if (!args.out.couldBe(arrayOut[i * 4 + j])) {
                    valid = false;
                }
                if (!valid) {
                    if (!errorFound) {
                        errorFound = true;
                        message.append("Input inStart: ");
                        appendVariableToMessage(message, args.inStart);
                        message.append("\n");
                        message.append("Input inStop: ");
                        appendVariableToMessage(message, args.inStop);
                        message.append("\n");
                        message.append("Input inFraction: ");
                        appendVariableToMessage(message, args.inFraction);
                        message.append("\n");
                        message.append("Expected output out: ");
                        appendVariableToMessage(message, args.out);
                        message.append("\n");
                        message.append("Actual   output out: ");
                        appendVariableToMessage(message, arrayOut[i * 4 + j]);
                        if (!args.out.couldBe(arrayOut[i * 4 + j])) {
                            message.append(" FAIL");
                        }
                        message.append("\n");
                        message.append("Errors at");
                    }
                    message.append(" [");
                    message.append(Integer.toString(i));
                    message.append(", ");
                    message.append(Integer.toString(j));
                    message.append("]");
                }
            }
        }
        assertFalse("Incorrect output for checkMixFloat3Float3Float3Float3" +
                (relaxed ? "_relaxed" : "") + ":\n" + message.toString(), errorFound);
    }

    private void checkMixFloat4Float4Float4Float4() {
        Allocation inStart = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, 0xd818b19f433276a1l, false);
        Allocation inStop = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, 0x7c186362f5a7e15fl, false);
        Allocation inFraction = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, 0xfd44d698ff8bdf6fl, false);
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 4), INPUTSIZE);
            script.set_gAllocInStop(inStop);
            script.set_gAllocInFraction(inFraction);
            script.forEach_testMixFloat4Float4Float4Float4(inStart, out);
            verifyResultsMixFloat4Float4Float4Float4(inStart, inStop, inFraction, out, false);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixFloat4Float4Float4Float4: " + e.toString());
        }
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 4), INPUTSIZE);
            scriptRelaxed.set_gAllocInStop(inStop);
            scriptRelaxed.set_gAllocInFraction(inFraction);
            scriptRelaxed.forEach_testMixFloat4Float4Float4Float4(inStart, out);
            verifyResultsMixFloat4Float4Float4Float4(inStart, inStop, inFraction, out, true);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixFloat4Float4Float4Float4: " + e.toString());
        }
        inStart.destroy();
        inStop.destroy();
        inFraction.destroy();
    }

    private void verifyResultsMixFloat4Float4Float4Float4(Allocation inStart, Allocation inStop, Allocation inFraction, Allocation out, boolean relaxed) {
        float[] arrayInStart = new float[INPUTSIZE * 4];
        Arrays.fill(arrayInStart, (float) 42);
        inStart.copyTo(arrayInStart);
        float[] arrayInStop = new float[INPUTSIZE * 4];
        Arrays.fill(arrayInStop, (float) 42);
        inStop.copyTo(arrayInStop);
        float[] arrayInFraction = new float[INPUTSIZE * 4];
        Arrays.fill(arrayInFraction, (float) 42);
        inFraction.copyTo(arrayInFraction);
        float[] arrayOut = new float[INPUTSIZE * 4];
        Arrays.fill(arrayOut, (float) 42);
        out.copyTo(arrayOut);
        StringBuilder message = new StringBuilder();
        boolean errorFound = false;
        for (int i = 0; i < INPUTSIZE; i++) {
            for (int j = 0; j < 4 ; j++) {
                // Extract the inputs.
                ArgumentsFloatFloatFloatFloat args = new ArgumentsFloatFloatFloatFloat();
                args.inStart = arrayInStart[i * 4 + j];
                args.inStop = arrayInStop[i * 4 + j];
                args.inFraction = arrayInFraction[i * 4 + j];
                // Figure out what the outputs should have been.
                Target target = new Target(Target.FunctionType.NORMAL, Target.ReturnType.FLOAT, relaxed);
                CoreMathVerifier.computeMix(args, target);
                // Validate the outputs.
                boolean valid = true;
                if (!args.out.couldBe(arrayOut[i * 4 + j])) {
                    valid = false;
                }
                if (!valid) {
                    if (!errorFound) {
                        errorFound = true;
                        message.append("Input inStart: ");
                        appendVariableToMessage(message, args.inStart);
                        message.append("\n");
                        message.append("Input inStop: ");
                        appendVariableToMessage(message, args.inStop);
                        message.append("\n");
                        message.append("Input inFraction: ");
                        appendVariableToMessage(message, args.inFraction);
                        message.append("\n");
                        message.append("Expected output out: ");
                        appendVariableToMessage(message, args.out);
                        message.append("\n");
                        message.append("Actual   output out: ");
                        appendVariableToMessage(message, arrayOut[i * 4 + j]);
                        if (!args.out.couldBe(arrayOut[i * 4 + j])) {
                            message.append(" FAIL");
                        }
                        message.append("\n");
                        message.append("Errors at");
                    }
                    message.append(" [");
                    message.append(Integer.toString(i));
                    message.append(", ");
                    message.append(Integer.toString(j));
                    message.append("]");
                }
            }
        }
        assertFalse("Incorrect output for checkMixFloat4Float4Float4Float4" +
                (relaxed ? "_relaxed" : "") + ":\n" + message.toString(), errorFound);
    }

    public class ArgumentsHalfHalfHalfHalf {
        public short inStart;
        public double inStartDouble;
        public short inStop;
        public double inStopDouble;
        public short inFraction;
        public double inFractionDouble;
        public Target.Floaty out;
    }

    private void checkMixHalfHalfHalfHalf() {
        Allocation inStart = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 1, 0x3dea3b1da5c04055l, false);
        Allocation inStop = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 1, 0x764b3fabc69b07bl, false);
        Allocation inFraction = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 1, 0x3115d5834936a9cbl, false);
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_16, 1), INPUTSIZE);
            script.set_gAllocInStop(inStop);
            script.set_gAllocInFraction(inFraction);
            script.forEach_testMixHalfHalfHalfHalf(inStart, out);
            verifyResultsMixHalfHalfHalfHalf(inStart, inStop, inFraction, out, false);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixHalfHalfHalfHalf: " + e.toString());
        }
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_16, 1), INPUTSIZE);
            scriptRelaxed.set_gAllocInStop(inStop);
            scriptRelaxed.set_gAllocInFraction(inFraction);
            scriptRelaxed.forEach_testMixHalfHalfHalfHalf(inStart, out);
            verifyResultsMixHalfHalfHalfHalf(inStart, inStop, inFraction, out, true);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixHalfHalfHalfHalf: " + e.toString());
        }
        inStart.destroy();
        inStop.destroy();
        inFraction.destroy();
    }

    private void verifyResultsMixHalfHalfHalfHalf(Allocation inStart, Allocation inStop, Allocation inFraction, Allocation out, boolean relaxed) {
        short[] arrayInStart = new short[INPUTSIZE * 1];
        Arrays.fill(arrayInStart, (short) 42);
        inStart.copyTo(arrayInStart);
        short[] arrayInStop = new short[INPUTSIZE * 1];
        Arrays.fill(arrayInStop, (short) 42);
        inStop.copyTo(arrayInStop);
        short[] arrayInFraction = new short[INPUTSIZE * 1];
        Arrays.fill(arrayInFraction, (short) 42);
        inFraction.copyTo(arrayInFraction);
        short[] arrayOut = new short[INPUTSIZE * 1];
        Arrays.fill(arrayOut, (short) 42);
        out.copyTo(arrayOut);
        StringBuilder message = new StringBuilder();
        boolean errorFound = false;
        for (int i = 0; i < INPUTSIZE; i++) {
            for (int j = 0; j < 1 ; j++) {
                // Extract the inputs.
                ArgumentsHalfHalfHalfHalf args = new ArgumentsHalfHalfHalfHalf();
                args.inStart = arrayInStart[i];
                args.inStartDouble = Float16Utils.convertFloat16ToDouble(args.inStart);
                args.inStop = arrayInStop[i];
                args.inStopDouble = Float16Utils.convertFloat16ToDouble(args.inStop);
                args.inFraction = arrayInFraction[i];
                args.inFractionDouble = Float16Utils.convertFloat16ToDouble(args.inFraction);
                // Figure out what the outputs should have been.
                Target target = new Target(Target.FunctionType.NORMAL, Target.ReturnType.HALF, relaxed);
                CoreMathVerifier.computeMix(args, target);
                // Validate the outputs.
                boolean valid = true;
                if (!args.out.couldBe(Float16Utils.convertFloat16ToDouble(arrayOut[i * 1 + j]))) {
                    valid = false;
                }
                if (!valid) {
                    if (!errorFound) {
                        errorFound = true;
                        message.append("Input inStart: ");
                        appendVariableToMessage(message, args.inStart);
                        message.append("\n");
                        message.append("Input inStop: ");
                        appendVariableToMessage(message, args.inStop);
                        message.append("\n");
                        message.append("Input inFraction: ");
                        appendVariableToMessage(message, args.inFraction);
                        message.append("\n");
                        message.append("Expected output out: ");
                        appendVariableToMessage(message, args.out);
                        message.append("\n");
                        message.append("Actual   output out: ");
                        appendVariableToMessage(message, arrayOut[i * 1 + j]);
                        message.append("\n");
                        message.append("Actual   output out (in double): ");
                        appendVariableToMessage(message, Float16Utils.convertFloat16ToDouble(arrayOut[i * 1 + j]));
                        if (!args.out.couldBe(Float16Utils.convertFloat16ToDouble(arrayOut[i * 1 + j]))) {
                            message.append(" FAIL");
                        }
                        message.append("\n");
                        message.append("Errors at");
                    }
                    message.append(" [");
                    message.append(Integer.toString(i));
                    message.append(", ");
                    message.append(Integer.toString(j));
                    message.append("]");
                }
            }
        }
        assertFalse("Incorrect output for checkMixHalfHalfHalfHalf" +
                (relaxed ? "_relaxed" : "") + ":\n" + message.toString(), errorFound);
    }

    private void checkMixHalf2Half2Half2Half2() {
        Allocation inStart = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 2, 0x4266268b2fe5c049l, false);
        Allocation inStop = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 2, 0x3720249e07114257l, false);
        Allocation inFraction = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 2, 0xd354aab305b09ae7l, false);
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_16, 2), INPUTSIZE);
            script.set_gAllocInStop(inStop);
            script.set_gAllocInFraction(inFraction);
            script.forEach_testMixHalf2Half2Half2Half2(inStart, out);
            verifyResultsMixHalf2Half2Half2Half2(inStart, inStop, inFraction, out, false);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixHalf2Half2Half2Half2: " + e.toString());
        }
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_16, 2), INPUTSIZE);
            scriptRelaxed.set_gAllocInStop(inStop);
            scriptRelaxed.set_gAllocInFraction(inFraction);
            scriptRelaxed.forEach_testMixHalf2Half2Half2Half2(inStart, out);
            verifyResultsMixHalf2Half2Half2Half2(inStart, inStop, inFraction, out, true);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixHalf2Half2Half2Half2: " + e.toString());
        }
        inStart.destroy();
        inStop.destroy();
        inFraction.destroy();
    }

    private void verifyResultsMixHalf2Half2Half2Half2(Allocation inStart, Allocation inStop, Allocation inFraction, Allocation out, boolean relaxed) {
        short[] arrayInStart = new short[INPUTSIZE * 2];
        Arrays.fill(arrayInStart, (short) 42);
        inStart.copyTo(arrayInStart);
        short[] arrayInStop = new short[INPUTSIZE * 2];
        Arrays.fill(arrayInStop, (short) 42);
        inStop.copyTo(arrayInStop);
        short[] arrayInFraction = new short[INPUTSIZE * 2];
        Arrays.fill(arrayInFraction, (short) 42);
        inFraction.copyTo(arrayInFraction);
        short[] arrayOut = new short[INPUTSIZE * 2];
        Arrays.fill(arrayOut, (short) 42);
        out.copyTo(arrayOut);
        StringBuilder message = new StringBuilder();
        boolean errorFound = false;
        for (int i = 0; i < INPUTSIZE; i++) {
            for (int j = 0; j < 2 ; j++) {
                // Extract the inputs.
                ArgumentsHalfHalfHalfHalf args = new ArgumentsHalfHalfHalfHalf();
                args.inStart = arrayInStart[i * 2 + j];
                args.inStartDouble = Float16Utils.convertFloat16ToDouble(args.inStart);
                args.inStop = arrayInStop[i * 2 + j];
                args.inStopDouble = Float16Utils.convertFloat16ToDouble(args.inStop);
                args.inFraction = arrayInFraction[i * 2 + j];
                args.inFractionDouble = Float16Utils.convertFloat16ToDouble(args.inFraction);
                // Figure out what the outputs should have been.
                Target target = new Target(Target.FunctionType.NORMAL, Target.ReturnType.HALF, relaxed);
                CoreMathVerifier.computeMix(args, target);
                // Validate the outputs.
                boolean valid = true;
                if (!args.out.couldBe(Float16Utils.convertFloat16ToDouble(arrayOut[i * 2 + j]))) {
                    valid = false;
                }
                if (!valid) {
                    if (!errorFound) {
                        errorFound = true;
                        message.append("Input inStart: ");
                        appendVariableToMessage(message, args.inStart);
                        message.append("\n");
                        message.append("Input inStop: ");
                        appendVariableToMessage(message, args.inStop);
                        message.append("\n");
                        message.append("Input inFraction: ");
                        appendVariableToMessage(message, args.inFraction);
                        message.append("\n");
                        message.append("Expected output out: ");
                        appendVariableToMessage(message, args.out);
                        message.append("\n");
                        message.append("Actual   output out: ");
                        appendVariableToMessage(message, arrayOut[i * 2 + j]);
                        message.append("\n");
                        message.append("Actual   output out (in double): ");
                        appendVariableToMessage(message, Float16Utils.convertFloat16ToDouble(arrayOut[i * 2 + j]));
                        if (!args.out.couldBe(Float16Utils.convertFloat16ToDouble(arrayOut[i * 2 + j]))) {
                            message.append(" FAIL");
                        }
                        message.append("\n");
                        message.append("Errors at");
                    }
                    message.append(" [");
                    message.append(Integer.toString(i));
                    message.append(", ");
                    message.append(Integer.toString(j));
                    message.append("]");
                }
            }
        }
        assertFalse("Incorrect output for checkMixHalf2Half2Half2Half2" +
                (relaxed ? "_relaxed" : "") + ":\n" + message.toString(), errorFound);
    }

    private void checkMixHalf3Half3Half3Half3() {
        Allocation inStart = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 3, 0x9b13445c25babc91l, false);
        Allocation inStop = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 3, 0xf1bef5aecb4bcb2fl, false);
        Allocation inFraction = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 3, 0x60d7d360187ca83fl, false);
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_16, 3), INPUTSIZE);
            script.set_gAllocInStop(inStop);
            script.set_gAllocInFraction(inFraction);
            script.forEach_testMixHalf3Half3Half3Half3(inStart, out);
            verifyResultsMixHalf3Half3Half3Half3(inStart, inStop, inFraction, out, false);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixHalf3Half3Half3Half3: " + e.toString());
        }
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_16, 3), INPUTSIZE);
            scriptRelaxed.set_gAllocInStop(inStop);
            scriptRelaxed.set_gAllocInFraction(inFraction);
            scriptRelaxed.forEach_testMixHalf3Half3Half3Half3(inStart, out);
            verifyResultsMixHalf3Half3Half3Half3(inStart, inStop, inFraction, out, true);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixHalf3Half3Half3Half3: " + e.toString());
        }
        inStart.destroy();
        inStop.destroy();
        inFraction.destroy();
    }

    private void verifyResultsMixHalf3Half3Half3Half3(Allocation inStart, Allocation inStop, Allocation inFraction, Allocation out, boolean relaxed) {
        short[] arrayInStart = new short[INPUTSIZE * 4];
        Arrays.fill(arrayInStart, (short) 42);
        inStart.copyTo(arrayInStart);
        short[] arrayInStop = new short[INPUTSIZE * 4];
        Arrays.fill(arrayInStop, (short) 42);
        inStop.copyTo(arrayInStop);
        short[] arrayInFraction = new short[INPUTSIZE * 4];
        Arrays.fill(arrayInFraction, (short) 42);
        inFraction.copyTo(arrayInFraction);
        short[] arrayOut = new short[INPUTSIZE * 4];
        Arrays.fill(arrayOut, (short) 42);
        out.copyTo(arrayOut);
        StringBuilder message = new StringBuilder();
        boolean errorFound = false;
        for (int i = 0; i < INPUTSIZE; i++) {
            for (int j = 0; j < 3 ; j++) {
                // Extract the inputs.
                ArgumentsHalfHalfHalfHalf args = new ArgumentsHalfHalfHalfHalf();
                args.inStart = arrayInStart[i * 4 + j];
                args.inStartDouble = Float16Utils.convertFloat16ToDouble(args.inStart);
                args.inStop = arrayInStop[i * 4 + j];
                args.inStopDouble = Float16Utils.convertFloat16ToDouble(args.inStop);
                args.inFraction = arrayInFraction[i * 4 + j];
                args.inFractionDouble = Float16Utils.convertFloat16ToDouble(args.inFraction);
                // Figure out what the outputs should have been.
                Target target = new Target(Target.FunctionType.NORMAL, Target.ReturnType.HALF, relaxed);
                CoreMathVerifier.computeMix(args, target);
                // Validate the outputs.
                boolean valid = true;
                if (!args.out.couldBe(Float16Utils.convertFloat16ToDouble(arrayOut[i * 4 + j]))) {
                    valid = false;
                }
                if (!valid) {
                    if (!errorFound) {
                        errorFound = true;
                        message.append("Input inStart: ");
                        appendVariableToMessage(message, args.inStart);
                        message.append("\n");
                        message.append("Input inStop: ");
                        appendVariableToMessage(message, args.inStop);
                        message.append("\n");
                        message.append("Input inFraction: ");
                        appendVariableToMessage(message, args.inFraction);
                        message.append("\n");
                        message.append("Expected output out: ");
                        appendVariableToMessage(message, args.out);
                        message.append("\n");
                        message.append("Actual   output out: ");
                        appendVariableToMessage(message, arrayOut[i * 4 + j]);
                        message.append("\n");
                        message.append("Actual   output out (in double): ");
                        appendVariableToMessage(message, Float16Utils.convertFloat16ToDouble(arrayOut[i * 4 + j]));
                        if (!args.out.couldBe(Float16Utils.convertFloat16ToDouble(arrayOut[i * 4 + j]))) {
                            message.append(" FAIL");
                        }
                        message.append("\n");
                        message.append("Errors at");
                    }
                    message.append(" [");
                    message.append(Integer.toString(i));
                    message.append(", ");
                    message.append(Integer.toString(j));
                    message.append("]");
                }
            }
        }
        assertFalse("Incorrect output for checkMixHalf3Half3Half3Half3" +
                (relaxed ? "_relaxed" : "") + ":\n" + message.toString(), errorFound);
    }

    private void checkMixHalf4Half4Half4Half4() {
        Allocation inStart = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 4, 0xf3c0622d1b8fb8d9l, false);
        Allocation inStop = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 4, 0xac5dc6bf8f865407l, false);
        Allocation inFraction = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 4, 0xee5afc0d2b48b597l, false);
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_16, 4), INPUTSIZE);
            script.set_gAllocInStop(inStop);
            script.set_gAllocInFraction(inFraction);
            script.forEach_testMixHalf4Half4Half4Half4(inStart, out);
            verifyResultsMixHalf4Half4Half4Half4(inStart, inStop, inFraction, out, false);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixHalf4Half4Half4Half4: " + e.toString());
        }
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_16, 4), INPUTSIZE);
            scriptRelaxed.set_gAllocInStop(inStop);
            scriptRelaxed.set_gAllocInFraction(inFraction);
            scriptRelaxed.forEach_testMixHalf4Half4Half4Half4(inStart, out);
            verifyResultsMixHalf4Half4Half4Half4(inStart, inStop, inFraction, out, true);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixHalf4Half4Half4Half4: " + e.toString());
        }
        inStart.destroy();
        inStop.destroy();
        inFraction.destroy();
    }

    private void verifyResultsMixHalf4Half4Half4Half4(Allocation inStart, Allocation inStop, Allocation inFraction, Allocation out, boolean relaxed) {
        short[] arrayInStart = new short[INPUTSIZE * 4];
        Arrays.fill(arrayInStart, (short) 42);
        inStart.copyTo(arrayInStart);
        short[] arrayInStop = new short[INPUTSIZE * 4];
        Arrays.fill(arrayInStop, (short) 42);
        inStop.copyTo(arrayInStop);
        short[] arrayInFraction = new short[INPUTSIZE * 4];
        Arrays.fill(arrayInFraction, (short) 42);
        inFraction.copyTo(arrayInFraction);
        short[] arrayOut = new short[INPUTSIZE * 4];
        Arrays.fill(arrayOut, (short) 42);
        out.copyTo(arrayOut);
        StringBuilder message = new StringBuilder();
        boolean errorFound = false;
        for (int i = 0; i < INPUTSIZE; i++) {
            for (int j = 0; j < 4 ; j++) {
                // Extract the inputs.
                ArgumentsHalfHalfHalfHalf args = new ArgumentsHalfHalfHalfHalf();
                args.inStart = arrayInStart[i * 4 + j];
                args.inStartDouble = Float16Utils.convertFloat16ToDouble(args.inStart);
                args.inStop = arrayInStop[i * 4 + j];
                args.inStopDouble = Float16Utils.convertFloat16ToDouble(args.inStop);
                args.inFraction = arrayInFraction[i * 4 + j];
                args.inFractionDouble = Float16Utils.convertFloat16ToDouble(args.inFraction);
                // Figure out what the outputs should have been.
                Target target = new Target(Target.FunctionType.NORMAL, Target.ReturnType.HALF, relaxed);
                CoreMathVerifier.computeMix(args, target);
                // Validate the outputs.
                boolean valid = true;
                if (!args.out.couldBe(Float16Utils.convertFloat16ToDouble(arrayOut[i * 4 + j]))) {
                    valid = false;
                }
                if (!valid) {
                    if (!errorFound) {
                        errorFound = true;
                        message.append("Input inStart: ");
                        appendVariableToMessage(message, args.inStart);
                        message.append("\n");
                        message.append("Input inStop: ");
                        appendVariableToMessage(message, args.inStop);
                        message.append("\n");
                        message.append("Input inFraction: ");
                        appendVariableToMessage(message, args.inFraction);
                        message.append("\n");
                        message.append("Expected output out: ");
                        appendVariableToMessage(message, args.out);
                        message.append("\n");
                        message.append("Actual   output out: ");
                        appendVariableToMessage(message, arrayOut[i * 4 + j]);
                        message.append("\n");
                        message.append("Actual   output out (in double): ");
                        appendVariableToMessage(message, Float16Utils.convertFloat16ToDouble(arrayOut[i * 4 + j]));
                        if (!args.out.couldBe(Float16Utils.convertFloat16ToDouble(arrayOut[i * 4 + j]))) {
                            message.append(" FAIL");
                        }
                        message.append("\n");
                        message.append("Errors at");
                    }
                    message.append(" [");
                    message.append(Integer.toString(i));
                    message.append(", ");
                    message.append(Integer.toString(j));
                    message.append("]");
                }
            }
        }
        assertFalse("Incorrect output for checkMixHalf4Half4Half4Half4" +
                (relaxed ? "_relaxed" : "") + ":\n" + message.toString(), errorFound);
    }

    private void checkMixFloat2Float2FloatFloat2() {
        Allocation inStart = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 0xf811b2d52bd1d7c3l, false);
        Allocation inStop = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 0x17a127e13c8dd1c5l, false);
        Allocation inFraction = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 0xe0b7d03e92afd1f5l, false);
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 2), INPUTSIZE);
            script.set_gAllocInStop(inStop);
            script.set_gAllocInFraction(inFraction);
            script.forEach_testMixFloat2Float2FloatFloat2(inStart, out);
            verifyResultsMixFloat2Float2FloatFloat2(inStart, inStop, inFraction, out, false);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixFloat2Float2FloatFloat2: " + e.toString());
        }
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 2), INPUTSIZE);
            scriptRelaxed.set_gAllocInStop(inStop);
            scriptRelaxed.set_gAllocInFraction(inFraction);
            scriptRelaxed.forEach_testMixFloat2Float2FloatFloat2(inStart, out);
            verifyResultsMixFloat2Float2FloatFloat2(inStart, inStop, inFraction, out, true);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixFloat2Float2FloatFloat2: " + e.toString());
        }
        inStart.destroy();
        inStop.destroy();
        inFraction.destroy();
    }

    private void verifyResultsMixFloat2Float2FloatFloat2(Allocation inStart, Allocation inStop, Allocation inFraction, Allocation out, boolean relaxed) {
        float[] arrayInStart = new float[INPUTSIZE * 2];
        Arrays.fill(arrayInStart, (float) 42);
        inStart.copyTo(arrayInStart);
        float[] arrayInStop = new float[INPUTSIZE * 2];
        Arrays.fill(arrayInStop, (float) 42);
        inStop.copyTo(arrayInStop);
        float[] arrayInFraction = new float[INPUTSIZE * 1];
        Arrays.fill(arrayInFraction, (float) 42);
        inFraction.copyTo(arrayInFraction);
        float[] arrayOut = new float[INPUTSIZE * 2];
        Arrays.fill(arrayOut, (float) 42);
        out.copyTo(arrayOut);
        StringBuilder message = new StringBuilder();
        boolean errorFound = false;
        for (int i = 0; i < INPUTSIZE; i++) {
            for (int j = 0; j < 2 ; j++) {
                // Extract the inputs.
                ArgumentsFloatFloatFloatFloat args = new ArgumentsFloatFloatFloatFloat();
                args.inStart = arrayInStart[i * 2 + j];
                args.inStop = arrayInStop[i * 2 + j];
                args.inFraction = arrayInFraction[i];
                // Figure out what the outputs should have been.
                Target target = new Target(Target.FunctionType.NORMAL, Target.ReturnType.FLOAT, relaxed);
                CoreMathVerifier.computeMix(args, target);
                // Validate the outputs.
                boolean valid = true;
                if (!args.out.couldBe(arrayOut[i * 2 + j])) {
                    valid = false;
                }
                if (!valid) {
                    if (!errorFound) {
                        errorFound = true;
                        message.append("Input inStart: ");
                        appendVariableToMessage(message, args.inStart);
                        message.append("\n");
                        message.append("Input inStop: ");
                        appendVariableToMessage(message, args.inStop);
                        message.append("\n");
                        message.append("Input inFraction: ");
                        appendVariableToMessage(message, args.inFraction);
                        message.append("\n");
                        message.append("Expected output out: ");
                        appendVariableToMessage(message, args.out);
                        message.append("\n");
                        message.append("Actual   output out: ");
                        appendVariableToMessage(message, arrayOut[i * 2 + j]);
                        if (!args.out.couldBe(arrayOut[i * 2 + j])) {
                            message.append(" FAIL");
                        }
                        message.append("\n");
                        message.append("Errors at");
                    }
                    message.append(" [");
                    message.append(Integer.toString(i));
                    message.append(", ");
                    message.append(Integer.toString(j));
                    message.append("]");
                }
            }
        }
        assertFalse("Incorrect output for checkMixFloat2Float2FloatFloat2" +
                (relaxed ? "_relaxed" : "") + ":\n" + message.toString(), errorFound);
    }

    private void checkMixFloat3Float3FloatFloat3() {
        Allocation inStart = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, 0xae7aff441b20fa80l, false);
        Allocation inStop = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, 0xe64a4d60d6f4de7cl, false);
        Allocation inFraction = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 0x21bd09bbd131a27cl, false);
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 3), INPUTSIZE);
            script.set_gAllocInStop(inStop);
            script.set_gAllocInFraction(inFraction);
            script.forEach_testMixFloat3Float3FloatFloat3(inStart, out);
            verifyResultsMixFloat3Float3FloatFloat3(inStart, inStop, inFraction, out, false);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixFloat3Float3FloatFloat3: " + e.toString());
        }
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 3), INPUTSIZE);
            scriptRelaxed.set_gAllocInStop(inStop);
            scriptRelaxed.set_gAllocInFraction(inFraction);
            scriptRelaxed.forEach_testMixFloat3Float3FloatFloat3(inStart, out);
            verifyResultsMixFloat3Float3FloatFloat3(inStart, inStop, inFraction, out, true);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixFloat3Float3FloatFloat3: " + e.toString());
        }
        inStart.destroy();
        inStop.destroy();
        inFraction.destroy();
    }

    private void verifyResultsMixFloat3Float3FloatFloat3(Allocation inStart, Allocation inStop, Allocation inFraction, Allocation out, boolean relaxed) {
        float[] arrayInStart = new float[INPUTSIZE * 4];
        Arrays.fill(arrayInStart, (float) 42);
        inStart.copyTo(arrayInStart);
        float[] arrayInStop = new float[INPUTSIZE * 4];
        Arrays.fill(arrayInStop, (float) 42);
        inStop.copyTo(arrayInStop);
        float[] arrayInFraction = new float[INPUTSIZE * 1];
        Arrays.fill(arrayInFraction, (float) 42);
        inFraction.copyTo(arrayInFraction);
        float[] arrayOut = new float[INPUTSIZE * 4];
        Arrays.fill(arrayOut, (float) 42);
        out.copyTo(arrayOut);
        StringBuilder message = new StringBuilder();
        boolean errorFound = false;
        for (int i = 0; i < INPUTSIZE; i++) {
            for (int j = 0; j < 3 ; j++) {
                // Extract the inputs.
                ArgumentsFloatFloatFloatFloat args = new ArgumentsFloatFloatFloatFloat();
                args.inStart = arrayInStart[i * 4 + j];
                args.inStop = arrayInStop[i * 4 + j];
                args.inFraction = arrayInFraction[i];
                // Figure out what the outputs should have been.
                Target target = new Target(Target.FunctionType.NORMAL, Target.ReturnType.FLOAT, relaxed);
                CoreMathVerifier.computeMix(args, target);
                // Validate the outputs.
                boolean valid = true;
                if (!args.out.couldBe(arrayOut[i * 4 + j])) {
                    valid = false;
                }
                if (!valid) {
                    if (!errorFound) {
                        errorFound = true;
                        message.append("Input inStart: ");
                        appendVariableToMessage(message, args.inStart);
                        message.append("\n");
                        message.append("Input inStop: ");
                        appendVariableToMessage(message, args.inStop);
                        message.append("\n");
                        message.append("Input inFraction: ");
                        appendVariableToMessage(message, args.inFraction);
                        message.append("\n");
                        message.append("Expected output out: ");
                        appendVariableToMessage(message, args.out);
                        message.append("\n");
                        message.append("Actual   output out: ");
                        appendVariableToMessage(message, arrayOut[i * 4 + j]);
                        if (!args.out.couldBe(arrayOut[i * 4 + j])) {
                            message.append(" FAIL");
                        }
                        message.append("\n");
                        message.append("Errors at");
                    }
                    message.append(" [");
                    message.append(Integer.toString(i));
                    message.append(", ");
                    message.append(Integer.toString(j));
                    message.append("]");
                }
            }
        }
        assertFalse("Incorrect output for checkMixFloat3Float3FloatFloat3" +
                (relaxed ? "_relaxed" : "") + ":\n" + message.toString(), errorFound);
    }

    private void checkMixFloat4Float4FloatFloat4() {
        Allocation inStart = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, 0x64e44bb30a701d3dl, false);
        Allocation inStop = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, 0xb4f372e0715beb33l, false);
        Allocation inFraction = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 0x62c243390fb37303l, false);
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 4), INPUTSIZE);
            script.set_gAllocInStop(inStop);
            script.set_gAllocInFraction(inFraction);
            script.forEach_testMixFloat4Float4FloatFloat4(inStart, out);
            verifyResultsMixFloat4Float4FloatFloat4(inStart, inStop, inFraction, out, false);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixFloat4Float4FloatFloat4: " + e.toString());
        }
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 4), INPUTSIZE);
            scriptRelaxed.set_gAllocInStop(inStop);
            scriptRelaxed.set_gAllocInFraction(inFraction);
            scriptRelaxed.forEach_testMixFloat4Float4FloatFloat4(inStart, out);
            verifyResultsMixFloat4Float4FloatFloat4(inStart, inStop, inFraction, out, true);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixFloat4Float4FloatFloat4: " + e.toString());
        }
        inStart.destroy();
        inStop.destroy();
        inFraction.destroy();
    }

    private void verifyResultsMixFloat4Float4FloatFloat4(Allocation inStart, Allocation inStop, Allocation inFraction, Allocation out, boolean relaxed) {
        float[] arrayInStart = new float[INPUTSIZE * 4];
        Arrays.fill(arrayInStart, (float) 42);
        inStart.copyTo(arrayInStart);
        float[] arrayInStop = new float[INPUTSIZE * 4];
        Arrays.fill(arrayInStop, (float) 42);
        inStop.copyTo(arrayInStop);
        float[] arrayInFraction = new float[INPUTSIZE * 1];
        Arrays.fill(arrayInFraction, (float) 42);
        inFraction.copyTo(arrayInFraction);
        float[] arrayOut = new float[INPUTSIZE * 4];
        Arrays.fill(arrayOut, (float) 42);
        out.copyTo(arrayOut);
        StringBuilder message = new StringBuilder();
        boolean errorFound = false;
        for (int i = 0; i < INPUTSIZE; i++) {
            for (int j = 0; j < 4 ; j++) {
                // Extract the inputs.
                ArgumentsFloatFloatFloatFloat args = new ArgumentsFloatFloatFloatFloat();
                args.inStart = arrayInStart[i * 4 + j];
                args.inStop = arrayInStop[i * 4 + j];
                args.inFraction = arrayInFraction[i];
                // Figure out what the outputs should have been.
                Target target = new Target(Target.FunctionType.NORMAL, Target.ReturnType.FLOAT, relaxed);
                CoreMathVerifier.computeMix(args, target);
                // Validate the outputs.
                boolean valid = true;
                if (!args.out.couldBe(arrayOut[i * 4 + j])) {
                    valid = false;
                }
                if (!valid) {
                    if (!errorFound) {
                        errorFound = true;
                        message.append("Input inStart: ");
                        appendVariableToMessage(message, args.inStart);
                        message.append("\n");
                        message.append("Input inStop: ");
                        appendVariableToMessage(message, args.inStop);
                        message.append("\n");
                        message.append("Input inFraction: ");
                        appendVariableToMessage(message, args.inFraction);
                        message.append("\n");
                        message.append("Expected output out: ");
                        appendVariableToMessage(message, args.out);
                        message.append("\n");
                        message.append("Actual   output out: ");
                        appendVariableToMessage(message, arrayOut[i * 4 + j]);
                        if (!args.out.couldBe(arrayOut[i * 4 + j])) {
                            message.append(" FAIL");
                        }
                        message.append("\n");
                        message.append("Errors at");
                    }
                    message.append(" [");
                    message.append(Integer.toString(i));
                    message.append(", ");
                    message.append(Integer.toString(j));
                    message.append("]");
                }
            }
        }
        assertFalse("Incorrect output for checkMixFloat4Float4FloatFloat4" +
                (relaxed ? "_relaxed" : "") + ":\n" + message.toString(), errorFound);
    }

    private void checkMixHalf2Half2HalfHalf2() {
        Allocation inStart = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 2, 0x5a6c4ac90c5a4349l, false);
        Allocation inStop = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 2, 0xcc857ec32fea4b57l, false);
        Allocation inFraction = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 1, 0xebe632db339d3e7l, false);
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_16, 2), INPUTSIZE);
            script.set_gAllocInStop(inStop);
            script.set_gAllocInFraction(inFraction);
            script.forEach_testMixHalf2Half2HalfHalf2(inStart, out);
            verifyResultsMixHalf2Half2HalfHalf2(inStart, inStop, inFraction, out, false);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixHalf2Half2HalfHalf2: " + e.toString());
        }
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_16, 2), INPUTSIZE);
            scriptRelaxed.set_gAllocInStop(inStop);
            scriptRelaxed.set_gAllocInFraction(inFraction);
            scriptRelaxed.forEach_testMixHalf2Half2HalfHalf2(inStart, out);
            verifyResultsMixHalf2Half2HalfHalf2(inStart, inStop, inFraction, out, true);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixHalf2Half2HalfHalf2: " + e.toString());
        }
        inStart.destroy();
        inStop.destroy();
        inFraction.destroy();
    }

    private void verifyResultsMixHalf2Half2HalfHalf2(Allocation inStart, Allocation inStop, Allocation inFraction, Allocation out, boolean relaxed) {
        short[] arrayInStart = new short[INPUTSIZE * 2];
        Arrays.fill(arrayInStart, (short) 42);
        inStart.copyTo(arrayInStart);
        short[] arrayInStop = new short[INPUTSIZE * 2];
        Arrays.fill(arrayInStop, (short) 42);
        inStop.copyTo(arrayInStop);
        short[] arrayInFraction = new short[INPUTSIZE * 1];
        Arrays.fill(arrayInFraction, (short) 42);
        inFraction.copyTo(arrayInFraction);
        short[] arrayOut = new short[INPUTSIZE * 2];
        Arrays.fill(arrayOut, (short) 42);
        out.copyTo(arrayOut);
        StringBuilder message = new StringBuilder();
        boolean errorFound = false;
        for (int i = 0; i < INPUTSIZE; i++) {
            for (int j = 0; j < 2 ; j++) {
                // Extract the inputs.
                ArgumentsHalfHalfHalfHalf args = new ArgumentsHalfHalfHalfHalf();
                args.inStart = arrayInStart[i * 2 + j];
                args.inStartDouble = Float16Utils.convertFloat16ToDouble(args.inStart);
                args.inStop = arrayInStop[i * 2 + j];
                args.inStopDouble = Float16Utils.convertFloat16ToDouble(args.inStop);
                args.inFraction = arrayInFraction[i];
                args.inFractionDouble = Float16Utils.convertFloat16ToDouble(args.inFraction);
                // Figure out what the outputs should have been.
                Target target = new Target(Target.FunctionType.NORMAL, Target.ReturnType.HALF, relaxed);
                CoreMathVerifier.computeMix(args, target);
                // Validate the outputs.
                boolean valid = true;
                if (!args.out.couldBe(Float16Utils.convertFloat16ToDouble(arrayOut[i * 2 + j]))) {
                    valid = false;
                }
                if (!valid) {
                    if (!errorFound) {
                        errorFound = true;
                        message.append("Input inStart: ");
                        appendVariableToMessage(message, args.inStart);
                        message.append("\n");
                        message.append("Input inStop: ");
                        appendVariableToMessage(message, args.inStop);
                        message.append("\n");
                        message.append("Input inFraction: ");
                        appendVariableToMessage(message, args.inFraction);
                        message.append("\n");
                        message.append("Expected output out: ");
                        appendVariableToMessage(message, args.out);
                        message.append("\n");
                        message.append("Actual   output out: ");
                        appendVariableToMessage(message, arrayOut[i * 2 + j]);
                        message.append("\n");
                        message.append("Actual   output out (in double): ");
                        appendVariableToMessage(message, Float16Utils.convertFloat16ToDouble(arrayOut[i * 2 + j]));
                        if (!args.out.couldBe(Float16Utils.convertFloat16ToDouble(arrayOut[i * 2 + j]))) {
                            message.append(" FAIL");
                        }
                        message.append("\n");
                        message.append("Errors at");
                    }
                    message.append(" [");
                    message.append(Integer.toString(i));
                    message.append(", ");
                    message.append(Integer.toString(j));
                    message.append("]");
                }
            }
        }
        assertFalse("Incorrect output for checkMixHalf2Half2HalfHalf2" +
                (relaxed ? "_relaxed" : "") + ":\n" + message.toString(), errorFound);
    }

    private void checkMixHalf3Half3HalfHalf3() {
        Allocation inStart = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 3, 0x825985c204615a8l, false);
        Allocation inStop = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 3, 0x9506d3ea541973f4l, false);
        Allocation inFraction = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 1, 0x341608c1b462aa74l, false);
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_16, 3), INPUTSIZE);
            script.set_gAllocInStop(inStop);
            script.set_gAllocInFraction(inFraction);
            script.forEach_testMixHalf3Half3HalfHalf3(inStart, out);
            verifyResultsMixHalf3Half3HalfHalf3(inStart, inStop, inFraction, out, false);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixHalf3Half3HalfHalf3: " + e.toString());
        }
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_16, 3), INPUTSIZE);
            scriptRelaxed.set_gAllocInStop(inStop);
            scriptRelaxed.set_gAllocInFraction(inFraction);
            scriptRelaxed.forEach_testMixHalf3Half3HalfHalf3(inStart, out);
            verifyResultsMixHalf3Half3HalfHalf3(inStart, inStop, inFraction, out, true);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixHalf3Half3HalfHalf3: " + e.toString());
        }
        inStart.destroy();
        inStop.destroy();
        inFraction.destroy();
    }

    private void verifyResultsMixHalf3Half3HalfHalf3(Allocation inStart, Allocation inStop, Allocation inFraction, Allocation out, boolean relaxed) {
        short[] arrayInStart = new short[INPUTSIZE * 4];
        Arrays.fill(arrayInStart, (short) 42);
        inStart.copyTo(arrayInStart);
        short[] arrayInStop = new short[INPUTSIZE * 4];
        Arrays.fill(arrayInStop, (short) 42);
        inStop.copyTo(arrayInStop);
        short[] arrayInFraction = new short[INPUTSIZE * 1];
        Arrays.fill(arrayInFraction, (short) 42);
        inFraction.copyTo(arrayInFraction);
        short[] arrayOut = new short[INPUTSIZE * 4];
        Arrays.fill(arrayOut, (short) 42);
        out.copyTo(arrayOut);
        StringBuilder message = new StringBuilder();
        boolean errorFound = false;
        for (int i = 0; i < INPUTSIZE; i++) {
            for (int j = 0; j < 3 ; j++) {
                // Extract the inputs.
                ArgumentsHalfHalfHalfHalf args = new ArgumentsHalfHalfHalfHalf();
                args.inStart = arrayInStart[i * 4 + j];
                args.inStartDouble = Float16Utils.convertFloat16ToDouble(args.inStart);
                args.inStop = arrayInStop[i * 4 + j];
                args.inStopDouble = Float16Utils.convertFloat16ToDouble(args.inStop);
                args.inFraction = arrayInFraction[i];
                args.inFractionDouble = Float16Utils.convertFloat16ToDouble(args.inFraction);
                // Figure out what the outputs should have been.
                Target target = new Target(Target.FunctionType.NORMAL, Target.ReturnType.HALF, relaxed);
                CoreMathVerifier.computeMix(args, target);
                // Validate the outputs.
                boolean valid = true;
                if (!args.out.couldBe(Float16Utils.convertFloat16ToDouble(arrayOut[i * 4 + j]))) {
                    valid = false;
                }
                if (!valid) {
                    if (!errorFound) {
                        errorFound = true;
                        message.append("Input inStart: ");
                        appendVariableToMessage(message, args.inStart);
                        message.append("\n");
                        message.append("Input inStop: ");
                        appendVariableToMessage(message, args.inStop);
                        message.append("\n");
                        message.append("Input inFraction: ");
                        appendVariableToMessage(message, args.inFraction);
                        message.append("\n");
                        message.append("Expected output out: ");
                        appendVariableToMessage(message, args.out);
                        message.append("\n");
                        message.append("Actual   output out: ");
                        appendVariableToMessage(message, arrayOut[i * 4 + j]);
                        message.append("\n");
                        message.append("Actual   output out (in double): ");
                        appendVariableToMessage(message, Float16Utils.convertFloat16ToDouble(arrayOut[i * 4 + j]));
                        if (!args.out.couldBe(Float16Utils.convertFloat16ToDouble(arrayOut[i * 4 + j]))) {
                            message.append(" FAIL");
                        }
                        message.append("\n");
                        message.append("Errors at");
                    }
                    message.append(" [");
                    message.append(Integer.toString(i));
                    message.append(", ");
                    message.append(Integer.toString(j));
                    message.append("]");
                }
            }
        }
        assertFalse("Incorrect output for checkMixHalf3Half3HalfHalf3" +
                (relaxed ? "_relaxed" : "") + ":\n" + message.toString(), errorFound);
    }

    private void checkMixHalf4Half4HalfHalf4() {
        Allocation inStart = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 4, 0xb5dee5ef3431e807l, false);
        Allocation inStop = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 4, 0x5d88291178489c91l, false);
        Allocation inFraction = createRandomAllocation(mRS, Element.DataType.FLOAT_16, 1, 0x596dae55b58b8101l, false);
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_16, 4), INPUTSIZE);
            script.set_gAllocInStop(inStop);
            script.set_gAllocInFraction(inFraction);
            script.forEach_testMixHalf4Half4HalfHalf4(inStart, out);
            verifyResultsMixHalf4Half4HalfHalf4(inStart, inStop, inFraction, out, false);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixHalf4Half4HalfHalf4: " + e.toString());
        }
        try {
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_16, 4), INPUTSIZE);
            scriptRelaxed.set_gAllocInStop(inStop);
            scriptRelaxed.set_gAllocInFraction(inFraction);
            scriptRelaxed.forEach_testMixHalf4Half4HalfHalf4(inStart, out);
            verifyResultsMixHalf4Half4HalfHalf4(inStart, inStop, inFraction, out, true);
            out.destroy();
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testMixHalf4Half4HalfHalf4: " + e.toString());
        }
        inStart.destroy();
        inStop.destroy();
        inFraction.destroy();
    }

    private void verifyResultsMixHalf4Half4HalfHalf4(Allocation inStart, Allocation inStop, Allocation inFraction, Allocation out, boolean relaxed) {
        short[] arrayInStart = new short[INPUTSIZE * 4];
        Arrays.fill(arrayInStart, (short) 42);
        inStart.copyTo(arrayInStart);
        short[] arrayInStop = new short[INPUTSIZE * 4];
        Arrays.fill(arrayInStop, (short) 42);
        inStop.copyTo(arrayInStop);
        short[] arrayInFraction = new short[INPUTSIZE * 1];
        Arrays.fill(arrayInFraction, (short) 42);
        inFraction.copyTo(arrayInFraction);
        short[] arrayOut = new short[INPUTSIZE * 4];
        Arrays.fill(arrayOut, (short) 42);
        out.copyTo(arrayOut);
        StringBuilder message = new StringBuilder();
        boolean errorFound = false;
        for (int i = 0; i < INPUTSIZE; i++) {
            for (int j = 0; j < 4 ; j++) {
                // Extract the inputs.
                ArgumentsHalfHalfHalfHalf args = new ArgumentsHalfHalfHalfHalf();
                args.inStart = arrayInStart[i * 4 + j];
                args.inStartDouble = Float16Utils.convertFloat16ToDouble(args.inStart);
                args.inStop = arrayInStop[i * 4 + j];
                args.inStopDouble = Float16Utils.convertFloat16ToDouble(args.inStop);
                args.inFraction = arrayInFraction[i];
                args.inFractionDouble = Float16Utils.convertFloat16ToDouble(args.inFraction);
                // Figure out what the outputs should have been.
                Target target = new Target(Target.FunctionType.NORMAL, Target.ReturnType.HALF, relaxed);
                CoreMathVerifier.computeMix(args, target);
                // Validate the outputs.
                boolean valid = true;
                if (!args.out.couldBe(Float16Utils.convertFloat16ToDouble(arrayOut[i * 4 + j]))) {
                    valid = false;
                }
                if (!valid) {
                    if (!errorFound) {
                        errorFound = true;
                        message.append("Input inStart: ");
                        appendVariableToMessage(message, args.inStart);
                        message.append("\n");
                        message.append("Input inStop: ");
                        appendVariableToMessage(message, args.inStop);
                        message.append("\n");
                        message.append("Input inFraction: ");
                        appendVariableToMessage(message, args.inFraction);
                        message.append("\n");
                        message.append("Expected output out: ");
                        appendVariableToMessage(message, args.out);
                        message.append("\n");
                        message.append("Actual   output out: ");
                        appendVariableToMessage(message, arrayOut[i * 4 + j]);
                        message.append("\n");
                        message.append("Actual   output out (in double): ");
                        appendVariableToMessage(message, Float16Utils.convertFloat16ToDouble(arrayOut[i * 4 + j]));
                        if (!args.out.couldBe(Float16Utils.convertFloat16ToDouble(arrayOut[i * 4 + j]))) {
                            message.append(" FAIL");
                        }
                        message.append("\n");
                        message.append("Errors at");
                    }
                    message.append(" [");
                    message.append(Integer.toString(i));
                    message.append(", ");
                    message.append(Integer.toString(j));
                    message.append("]");
                }
            }
        }
        assertFalse("Incorrect output for checkMixHalf4Half4HalfHalf4" +
                (relaxed ? "_relaxed" : "") + ":\n" + message.toString(), errorFound);
    }

    public void testMix() {
        checkMixFloatFloatFloatFloat();
        checkMixFloat2Float2Float2Float2();
        checkMixFloat3Float3Float3Float3();
        checkMixFloat4Float4Float4Float4();
        checkMixHalfHalfHalfHalf();
        checkMixHalf2Half2Half2Half2();
        checkMixHalf3Half3Half3Half3();
        checkMixHalf4Half4Half4Half4();
        checkMixFloat2Float2FloatFloat2();
        checkMixFloat3Float3FloatFloat3();
        checkMixFloat4Float4FloatFloat4();
        checkMixHalf2Half2HalfHalf2();
        checkMixHalf3Half3HalfHalf3();
        checkMixHalf4Half4HalfHalf4();
    }
}
