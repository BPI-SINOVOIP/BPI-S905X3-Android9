<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright 2013 The Android Open Source Project

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->



<sample>
    <name>RevealEffectBasic</name>
    <group>UI</group>
    <package>com.example.android.revealeffectbasic</package>

    <minSdk>21</minSdk>

    <strings>
        <intro>
            <![CDATA[
            Basic sample to demonstrate the reveal effect.
            ]]>
        </intro>
    </strings>

    <metadata>
        <status>PUBLISHED</status>
        <categories>UI</categories>
        <technologies>Android</technologies>
        <languages>Java</languages>
        <solutions>Mobile</solutions>
        <level>INTERMEDIATE</level>
        <icon>screenshots/icon-web.png</icon>
        <screenshots>
            <img>screenshots/1-main.png</img>
        </screenshots>
        <api_refs>
            <android>android.view.ViewAnimationUtils</android>
            <android>android.animation.Animator</android>
        </api_refs>
        <description>
<![CDATA[
Sample demonstrating circular reveal effect. It covers creating an
[Animator][1] with [ViewAnimationUtils][2] as well as defining the parameters
of the circular reveal including starting position and radius.


[1]: https://developer.android.com/reference/android/animation/Animator.html
[2]: https://developer.android.com/reference/android/view/ViewAnimationUtils.html
]]>
        </description>
        <intro>
<![CDATA[
Sample demonstrating circular reveal effect. Reveal animations can be used to
provide visual continuity when showing or hiding views. With
[ViewAnimationsUtils.createCircularReveal()][1] you can use the startRadius and
endRadius to define a hiding or revealing animation. You can also define the
center of the animation, in this sample the center is x=0, y=0 which defines
the top left of the View as the center.

Press the *Reveal* button to see the the circular reveal.

[1]: http://developer.android.com/reference/android/view/ViewAnimationUtils.html#createCircularReveal(android.view.View, int, int, float, float)
]]>
        </intro>
    </metadata>

    <template src="base"/>
    <template src="FragmentView"/>
    <common src="logger"/>
    <common src="activities"/>

</sample>
