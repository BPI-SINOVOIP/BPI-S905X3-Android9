<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright 2013 The Android Open Source Project

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->



<sample>
    <name>AppRestrictionEnforcer</name>
    <group>Admin</group>
    <package>com.example.android.apprestrictionenforcer</package>

    <minSdk>21</minSdk>

    <strings>
        <intro>
            <![CDATA[
	    This sample demonstrates how to set restrictions to other apps as a profile owner.
	    Use the AppRestrictionSchema sample to set restrictions.
            ]]>
        </intro>
    </strings>

    <template src="base" />

    <metadata>
        <status>PUBLISHED</status>
        <categories>Device Admin</categories>
        <technologies>Android</technologies>
        <languages>Java</languages>
        <solutions>Mobile</solutions>
        <level>ADVANCED</level>
        <icon>screenshots/big_icon.png</icon>
        <screenshots>
            <img>screenshots/main.png</img>
        </screenshots>
        <api_refs>
            <android>android.app.admin.DevicePolicyManager</android>
            <android>android.content.RestrictionEntry</android>
            <android>android.content.RestrictionsManager</android>
        </api_refs>

        <description>
            This sample demonstrates how to set restrictions to other apps as a profile owner.
            Use the AppRestrictionSchema sample to set restrictions.
        </description>

        <intro>
            <![CDATA[
The [Android Device Administration API][1] allows enterprise administrators to
enforce specific policies on a managed device. The system provides policies
that control settings such as password complexity, screen lock, or camera
availability. Developers can also augment this list with custom policies
that control specific features within their applications. For example,
a web browser could provide access to a whitelist of allowed domains.

This sample demonstrates the 'admin' component and shows how a number of
custom properties (booleans, strings, numbers, lists) can be set and
enforced on another app.

See the [AppRestrictionSchema sample][2] for further details.

[1]: http://developer.android.com/guide/topics/admin/device-admin.html
[2]: https://github.com/googlesamples/android-AppRestrictionSchema
]]>
        </intro>
    </metadata>


</sample>
