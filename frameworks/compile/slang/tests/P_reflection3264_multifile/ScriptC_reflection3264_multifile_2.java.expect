/*
 * Copyright (C) 2011-2014 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is auto-generated. DO NOT MODIFY!
 * The source Renderscript file: reflection3264_multifile_2.rs
 */

package foo;

import android.os.Build;
import android.os.Process;
import java.lang.reflect.Field;
import android.renderscript.*;
import foo.reflection3264_multifile_2BitCode;

/**
 * @hide
 */
public class ScriptC_reflection3264_multifile_2 extends ScriptC {
    private static final String __rs_resource_name = "reflection3264_multifile_2";
    // Constructor
    public  ScriptC_reflection3264_multifile_2(RenderScript rs) {
        super(rs,
              __rs_resource_name,
              reflection3264_multifile_2BitCode.getBitCode32(),
              reflection3264_multifile_2BitCode.getBitCode64());
        __I16 = Element.I16(rs);
        __I64 = Element.I64(rs);
    }

    private Element __I16;
    private Element __I64;
    private FieldPacker __rs_fp_I16;
    private FieldPacker __rs_fp_I64;
    private final static int mExportVarIdx_a = 0;
    private short[] mExportVar_a;
    public synchronized void set_a(short[] v) {
        mExportVar_a = v;
        FieldPacker fp = new FieldPacker(20);
        for (int ct1 = 0; ct1 < 10; ct1++) {
            fp.addI16(v[ct1]);
        }

        int []__dimArr = new int[1];
        __dimArr[0] = 10;
        setVar(mExportVarIdx_a, fp, __I16, __dimArr);
    }

    public short[] get_a() {
        return mExportVar_a;
    }

    public Script.FieldID getFieldID_a() {
        return createFieldID(mExportVarIdx_a, null);
    }

    private final static int mExportVarIdx_b = 1;
    private long[] mExportVar_b;
    public synchronized void set_b(long[] v) {
        mExportVar_b = v;
        FieldPacker fp = new FieldPacker(80);
        for (int ct1 = 0; ct1 < 10; ct1++) {
            fp.addI64(v[ct1]);
        }

        int []__dimArr = new int[1];
        __dimArr[0] = 10;
        setVar(mExportVarIdx_b, fp, __I64, __dimArr);
    }

    public long[] get_b() {
        return mExportVar_b;
    }

    public Script.FieldID getFieldID_b() {
        return createFieldID(mExportVarIdx_b, null);
    }

    private final static int mExportFuncIdx_g = 0;
    public Script.InvokeID getInvokeID_g() {
        return createInvokeID(mExportFuncIdx_g);
    }

    public void invoke_g(int c) {
        FieldPacker g_fp = new FieldPacker(4);
        g_fp.addI32(c);
        invoke(mExportFuncIdx_g, g_fp);
    }

}

