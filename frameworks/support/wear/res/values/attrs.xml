<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (C) 2016 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->

<!-- Formatting note: terminate all comments with a period, to avoid breaking
     the documentation output. To suppress comment lines from the documentation
     output, insert an eat-comment element after the comment lines.
-->

<resources>
    <!-- Attributes that can be used with any member view of
        {@landroidx.wearwear.widget.BoxInsetLayout}.
        These attributes are specified with the rest of a view's normal attributes
        (such as {@link android.R.attr#background}, but will be parsed by the view's parent and
        ignored by the child.
        <p>The values defined here correspond to the base layout attribute
        class {@landroidx.wearwear.widget.BoxInsetLayout.LayoutParams}. -->
    <declare-styleable name="BoxInsetLayout_Layout">
        <!-- The types of insets this view can force on its children. The view will respect the
             defined values of other child attributes such as ones provided by
             {@link android.view.ViewGroup.MarginLayoutParams}, but it will add an additional inset
              as requested -->
        <attr name="boxedEdges">
            <!-- Default boxing setting. There are no insets forced on the child views. -->
            <flag name="none" value="0x00" />
            <!-- The view will force an inset on the left edge of the children. -->
            <flag name="left" value="0x01" />
            <!-- The view will force an inset on the top edge of the children. -->
            <flag name="top" value="0x02" />
            <!-- The view will force an inset on the right edge of the children. -->
            <flag name="right" value="0x04" />
            <!-- The view will force an inset on the bottom edge of the children. -->
            <flag name="bottom" value="0x08" />
            <!-- The view will force an inset on all of the edges of the children. -->
            <flag name="all" value="0x0F" />
        </attr>
    </declare-styleable>

    <!-- Attributes that can be used with any
        {@landroidx.wearwear.widget.WearableRecyclerView}.
        These attributes relate to the circular scrolling gesture of the view. -->
    <declare-styleable name="WearableRecyclerView">
        <!-- Taps within this radius and the radius of the screen are considered close enough to the
            bezel to be candidates for circular scrolling. Expressed as a fraction of the screen's
            radius. The default is the whole screen i.e 1.0f -->
        <attr name="bezelWidth" format="fraction" />
        <!-- Enables/disables circular touch scrolling for this view. When enabled, circular touch
            gestures around the edge of the screen will cause the view to scroll up or down. -->
        <attr name="circularScrollingGestureEnabled" format="boolean" />
        <!-- Sets how many degrees the user has to rotate by to scroll through one screen height
            when they are using the circular scrolling gesture. The default value equates 180
            degrees scroll to one screen.-->
        <attr name="scrollDegreesPerScreen" format="float" />
    </declare-styleable>

    <declare-styleable name="WearableDrawerView">
        <!-- Sets which view should be shown in the drawer's peek state. -->
        <attr name="peekView" format="reference" />
        <!-- Sets which view should be used as the drawer's content. -->
        <attr name="drawerContent" format="reference" />
        <!-- Sets whether or not the drawer will automatically peek and un-peek.  -->
        <attr name="enableAutoPeek" format="boolean" />
        <attr name="android:background" />
        <attr name="android:elevation" />
    </declare-styleable>

    <declare-styleable name="WearableActionDrawerView">
        <!-- Adds a title to the drawer content. -->
        <attr name="drawerTitle" format="string" />
        <!-- Provides a Menu to the action drawer. -->
        <attr name="actionMenu" format="reference" />
        <!-- Shows the overflow icon in the peek view rather than the first action's icon. Also,
             taps on the peek view will open the drawer rather than executing the first action. -->
        <attr name="showOverflowInPeek" format="boolean" />
    </declare-styleable>

    <declare-styleable name="WearableNavigationDrawerView">
        <!-- Sets the navigation style. Defaults to singlePage. -->
        <attr name="navigationStyle" format="enum">
            <!-- Single page navigation drawer style. This is the default drawer style. It is ideal
                 for 1-5 items, but works with up to 7 items. If more than 7 items exist, then the
                 drawer will be displayed as empty. -->
            <enum name="singlePage" value="0" />
            <!-- Multi-page navigation drawer style. Each item is on its own page. Useful when more
                 than 7 items exist. -->
            <enum name="multiPage" value="1" />
        </attr>
    </declare-styleable>

    <declare-styleable name="PageIndicatorView">
        <!-- Sets the distance between dots. -->
        <attr name="wsPageIndicatorDotSpacing" format="dimension" />
        <!-- Sets the radius of a dot when it is not selected. -->
        <attr name="wsPageIndicatorDotRadius" format="dimension" />
        <!-- Sets the radius of a dot when it is selected. -->
        <attr name="wsPageIndicatorDotRadiusSelected" format="dimension" />
        <!-- Sets the color of a dot when it is not selected. -->
        <attr name="wsPageIndicatorDotColor" format="color" />
        <!-- Sets the color of a dot when it is selected. -->
        <attr name="wsPageIndicatorDotColorSelected" format="color" />
        <!-- Sets whether the dots should fade out after inactivity. -->
        <attr name="wsPageIndicatorDotFadeWhenIdle" format="boolean" />
        <!-- Sets the delay between the pager arriving at an idle state, and the fade out animation
             beginning, in milliseconds. -->
        <attr name="wsPageIndicatorDotFadeOutDelay" format="integer" />
        <!-- Sets the duration of the fade out animation. -->
        <attr name="wsPageIndicatorDotFadeOutDuration" format="integer" />
        <!-- Sets the duration of the fade in animation. -->
        <attr name="wsPageIndicatorDotFadeInDuration" format="integer" />
        <!-- Sets the shadow color. -->
        <attr name="wsPageIndicatorDotShadowColor" format="color" />
        <!-- Sets the shadow radius. -->
        <attr name="wsPageIndicatorDotShadowRadius" format="dimension" />
        <!-- Sets the horizontal shadow offset. -->
        <attr name="wsPageIndicatorDotShadowDx" format="dimension" />
        <!-- Sets the vertical shadow offset. -->
        <attr name="wsPageIndicatorDotShadowDy" format="dimension" />
    </declare-styleable>

    <declare-styleable name="CircledImageView">
        <attr name="android:src" />
        <!-- Sets the color of the circle. -->
        <attr name="background_color" format="color" />
        <!-- Sets the radius of the circle. -->
        <attr name="background_radius" format="dimension" />
        <!-- Sets the radius of the circle while the circle is being pressed. -->
        <attr name="background_radius_pressed" format="dimension" />
        <!-- Sets the width of the border. -->
        <attr name="background_border_width" format="dimension" />
        <!-- Sets the color of the border. -->
        <attr name="background_border_color" format="color" />
        <!-- Sets the stroke cap for the border around the circle. -->
        <attr name="background_border_cap" format="enum">
            <enum name="butt" value="0" />
            <enum name="round" value="1" />
            <enum name="square" value="2" />
        </attr>
        <!-- Sets the padding between the edge of the circle and the start of the image. -->
        <attr name="img_padding" format="dimension" />
        <!-- Sets the width of the shadow. -->
        <attr name="background_shadow_width" format="dimension" />
        <!-- Sets the percentage of the circle which the image should occupy. -->
        <attr name="img_circle_percentage" format="dimension" />
        <!-- Sets the percentage of the circle which the image should should be offset
             horizontally. -->
        <attr name="img_horizontal_offset_percentage" format="dimension" />
        <!-- Sets the tint color of the image. -->
        <attr name="img_tint" format="color" />
        <!-- Sets the radius of the circle to be a percentage of the largest dimension of the
             view. -->
        <attr name="background_radius_percent" format="fraction" />
        <!-- Sets the circle radius when pressed. -->
        <attr name="background_radius_pressed_percent" format="fraction" />
        <!-- Sets which dimension to use if the image isn't square. -->
        <attr name="clip_dimen" format="enum">
            <enum name="none" value="0" />
            <enum name="height" value="1" />
            <enum name="width" value="2" />
        </attr>
    </declare-styleable>

    <declare-styleable name="CircularProgressLayout">
        <!-- Sets the color of the background circle. -->
        <attr name="backgroundColor" format="color" />
        <!-- Sets the stroke width of the progress indicator. -->
        <attr name="strokeWidth" format="dimension" />
        <!-- Sets the color scheme used by the progress indicator. This may be an array of colors or
        a single color. If an array of colors is used, first color will be used for determinate
        progress indicator, while the rest will be shown in order during indeterminate spinner. -->
        <attr name="colorSchemeColors" format="reference|color" />
        <!-- Sets if the progress should be shown as an indeterminate spinner. -->
        <attr name="indeterminate" format="boolean" />
    </declare-styleable>

    <declare-styleable name="RoundedDrawable">
        <attr name="android:src" />
        <!-- Sets the radius of the drawable. -->
        <attr name="radius" format="dimension" />
        <!-- Sets the background color of the drawable. -->
        <attr name="backgroundColor" />
        <!-- Sets if the drawable should be clipped. If this is true, drawable will be clipped to
        rounded bounds. Otherwise, it will be scaled. -->
        <attr name="clipEnabled" format="boolean" />
    </declare-styleable>
</resources>
