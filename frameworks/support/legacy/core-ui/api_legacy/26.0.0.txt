package android.support.v4.app {

  public deprecated class ActionBarDrawerToggle implements android.support.v4.widget.DrawerLayout.DrawerListener {
    ctor public ActionBarDrawerToggle(android.app.Activity, android.support.v4.widget.DrawerLayout, int, int, int);
    ctor public ActionBarDrawerToggle(android.app.Activity, android.support.v4.widget.DrawerLayout, boolean, int, int, int);
    method public boolean isDrawerIndicatorEnabled();
    method public void onConfigurationChanged(android.content.res.Configuration);
    method public void onDrawerClosed(android.view.View);
    method public void onDrawerOpened(android.view.View);
    method public void onDrawerSlide(android.view.View, float);
    method public void onDrawerStateChanged(int);
    method public boolean onOptionsItemSelected(android.view.MenuItem);
    method public void setDrawerIndicatorEnabled(boolean);
    method public void setHomeAsUpIndicator(android.graphics.drawable.Drawable);
    method public void setHomeAsUpIndicator(int);
    method public void syncState();
  }

  public static abstract deprecated interface ActionBarDrawerToggle.Delegate {
    method public abstract android.graphics.drawable.Drawable getThemeUpIndicator();
    method public abstract void setActionBarDescription(int);
    method public abstract void setActionBarUpIndicator(android.graphics.drawable.Drawable, int);
  }

  public static abstract deprecated interface ActionBarDrawerToggle.DelegateProvider {
    method public abstract android.support.v4.app.ActionBarDrawerToggle.Delegate getDrawerToggleDelegate();
  }

}

package android.support.v4.view {

  public abstract class AbsSavedState implements android.os.Parcelable {
    ctor protected AbsSavedState(android.os.Parcelable);
    ctor protected AbsSavedState(android.os.Parcel);
    ctor protected AbsSavedState(android.os.Parcel, java.lang.ClassLoader);
    method public int describeContents();
    method public final android.os.Parcelable getSuperState();
    method public void writeToParcel(android.os.Parcel, int);
    field public static final android.os.Parcelable.Creator<android.support.v4.view.AbsSavedState> CREATOR;
    field public static final android.support.v4.view.AbsSavedState EMPTY_STATE;
  }

  public final class AsyncLayoutInflater {
    ctor public AsyncLayoutInflater(android.content.Context);
    method public void inflate(int, android.view.ViewGroup, android.support.v4.view.AsyncLayoutInflater.OnInflateFinishedListener);
  }

  public static abstract interface AsyncLayoutInflater.OnInflateFinishedListener {
    method public abstract void onInflateFinished(android.view.View, int, android.view.ViewGroup);
  }

  public class NestedScrollingChildHelper {
    ctor public NestedScrollingChildHelper(android.view.View);
    method public boolean dispatchNestedFling(float, float, boolean);
    method public boolean dispatchNestedPreFling(float, float);
    method public boolean dispatchNestedPreScroll(int, int, int[], int[]);
    method public boolean dispatchNestedPreScroll(int, int, int[], int[], int);
    method public boolean dispatchNestedScroll(int, int, int, int, int[]);
    method public boolean dispatchNestedScroll(int, int, int, int, int[], int);
    method public boolean hasNestedScrollingParent();
    method public boolean hasNestedScrollingParent(int);
    method public boolean isNestedScrollingEnabled();
    method public void onDetachedFromWindow();
    method public void onStopNestedScroll(android.view.View);
    method public void setNestedScrollingEnabled(boolean);
    method public boolean startNestedScroll(int);
    method public boolean startNestedScroll(int, int);
    method public void stopNestedScroll();
    method public void stopNestedScroll(int);
  }

  public class NestedScrollingParentHelper {
    ctor public NestedScrollingParentHelper(android.view.ViewGroup);
    method public int getNestedScrollAxes();
    method public void onNestedScrollAccepted(android.view.View, android.view.View, int);
    method public void onNestedScrollAccepted(android.view.View, android.view.View, int, int);
    method public void onStopNestedScroll(android.view.View);
    method public void onStopNestedScroll(android.view.View, int);
  }

  public abstract class PagerAdapter {
    ctor public PagerAdapter();
    method public void destroyItem(android.view.ViewGroup, int, java.lang.Object);
    method public deprecated void destroyItem(android.view.View, int, java.lang.Object);
    method public void finishUpdate(android.view.ViewGroup);
    method public deprecated void finishUpdate(android.view.View);
    method public abstract int getCount();
    method public int getItemPosition(java.lang.Object);
    method public java.lang.CharSequence getPageTitle(int);
    method public float getPageWidth(int);
    method public java.lang.Object instantiateItem(android.view.ViewGroup, int);
    method public deprecated java.lang.Object instantiateItem(android.view.View, int);
    method public abstract boolean isViewFromObject(android.view.View, java.lang.Object);
    method public void notifyDataSetChanged();
    method public void registerDataSetObserver(android.database.DataSetObserver);
    method public void restoreState(android.os.Parcelable, java.lang.ClassLoader);
    method public android.os.Parcelable saveState();
    method public void setPrimaryItem(android.view.ViewGroup, int, java.lang.Object);
    method public deprecated void setPrimaryItem(android.view.View, int, java.lang.Object);
    method public void startUpdate(android.view.ViewGroup);
    method public deprecated void startUpdate(android.view.View);
    method public void unregisterDataSetObserver(android.database.DataSetObserver);
    field public static final int POSITION_NONE = -2; // 0xfffffffe
    field public static final int POSITION_UNCHANGED = -1; // 0xffffffff
  }

  public class PagerTabStrip extends android.support.v4.view.PagerTitleStrip {
    ctor public PagerTabStrip(android.content.Context);
    ctor public PagerTabStrip(android.content.Context, android.util.AttributeSet);
    method public boolean getDrawFullUnderline();
    method public int getTabIndicatorColor();
    method public void setBackgroundDrawable(android.graphics.drawable.Drawable);
    method public void setDrawFullUnderline(boolean);
    method public void setTabIndicatorColor(int);
    method public void setTabIndicatorColorResource(int);
  }

  public class PagerTitleStrip extends android.view.ViewGroup {
    ctor public PagerTitleStrip(android.content.Context);
    ctor public PagerTitleStrip(android.content.Context, android.util.AttributeSet);
    method public int getTextSpacing();
    method protected void onLayout(boolean, int, int, int, int);
    method public void setGravity(int);
    method public void setNonPrimaryAlpha(float);
    method public void setTextColor(int);
    method public void setTextSize(int, float);
    method public void setTextSpacing(int);
  }

  public class ViewPager extends android.view.ViewGroup {
    ctor public ViewPager(android.content.Context);
    ctor public ViewPager(android.content.Context, android.util.AttributeSet);
    method public void addOnAdapterChangeListener(android.support.v4.view.ViewPager.OnAdapterChangeListener);
    method public void addOnPageChangeListener(android.support.v4.view.ViewPager.OnPageChangeListener);
    method public boolean arrowScroll(int);
    method public boolean beginFakeDrag();
    method protected boolean canScroll(android.view.View, boolean, int, int, int);
    method public void clearOnPageChangeListeners();
    method public void endFakeDrag();
    method public boolean executeKeyEvent(android.view.KeyEvent);
    method public void fakeDragBy(float);
    method public android.support.v4.view.PagerAdapter getAdapter();
    method public int getCurrentItem();
    method public int getOffscreenPageLimit();
    method public int getPageMargin();
    method public boolean isFakeDragging();
    method protected void onLayout(boolean, int, int, int, int);
    method protected void onPageScrolled(int, float, int);
    method public void onRestoreInstanceState(android.os.Parcelable);
    method public android.os.Parcelable onSaveInstanceState();
    method public void removeOnAdapterChangeListener(android.support.v4.view.ViewPager.OnAdapterChangeListener);
    method public void removeOnPageChangeListener(android.support.v4.view.ViewPager.OnPageChangeListener);
    method public void setAdapter(android.support.v4.view.PagerAdapter);
    method public void setCurrentItem(int);
    method public void setCurrentItem(int, boolean);
    method public void setOffscreenPageLimit(int);
    method public deprecated void setOnPageChangeListener(android.support.v4.view.ViewPager.OnPageChangeListener);
    method public void setPageMargin(int);
    method public void setPageMarginDrawable(android.graphics.drawable.Drawable);
    method public void setPageMarginDrawable(int);
    method public void setPageTransformer(boolean, android.support.v4.view.ViewPager.PageTransformer);
    method public void setPageTransformer(boolean, android.support.v4.view.ViewPager.PageTransformer, int);
    field public static final int SCROLL_STATE_DRAGGING = 1; // 0x1
    field public static final int SCROLL_STATE_IDLE = 0; // 0x0
    field public static final int SCROLL_STATE_SETTLING = 2; // 0x2
  }

  public static abstract class ViewPager.DecorView implements java.lang.annotation.Annotation {
  }

  public static class ViewPager.LayoutParams extends android.view.ViewGroup.LayoutParams {
    ctor public ViewPager.LayoutParams();
    ctor public ViewPager.LayoutParams(android.content.Context, android.util.AttributeSet);
    field public int gravity;
    field public boolean isDecor;
  }

  public static abstract interface ViewPager.OnAdapterChangeListener {
    method public abstract void onAdapterChanged(android.support.v4.view.ViewPager, android.support.v4.view.PagerAdapter, android.support.v4.view.PagerAdapter);
  }

  public static abstract interface ViewPager.OnPageChangeListener {
    method public abstract void onPageScrollStateChanged(int);
    method public abstract void onPageScrolled(int, float, int);
    method public abstract void onPageSelected(int);
  }

  public static abstract interface ViewPager.PageTransformer {
    method public abstract void transformPage(android.view.View, float);
  }

  public static class ViewPager.SavedState extends android.support.v4.view.AbsSavedState {
    ctor public ViewPager.SavedState(android.os.Parcelable);
    field public static final android.os.Parcelable.Creator<android.support.v4.view.ViewPager.SavedState> CREATOR;
  }

  public static class ViewPager.SimpleOnPageChangeListener implements android.support.v4.view.ViewPager.OnPageChangeListener {
    ctor public ViewPager.SimpleOnPageChangeListener();
    method public void onPageScrollStateChanged(int);
    method public void onPageScrolled(int, float, int);
    method public void onPageSelected(int);
  }

}

package android.support.v4.view.animation {

  public class FastOutLinearInInterpolator extends android.support.v4.view.animation.LookupTableInterpolator {
    ctor public FastOutLinearInInterpolator();
  }

  public class FastOutSlowInInterpolator extends android.support.v4.view.animation.LookupTableInterpolator {
    ctor public FastOutSlowInInterpolator();
  }

  public class LinearOutSlowInInterpolator extends android.support.v4.view.animation.LookupTableInterpolator {
    ctor public LinearOutSlowInInterpolator();
  }

   abstract class LookupTableInterpolator implements android.view.animation.Interpolator {
    ctor public LookupTableInterpolator(float[]);
    method public float getInterpolation(float);
  }

}

package android.support.v4.widget {

  public abstract class AutoScrollHelper implements android.view.View.OnTouchListener {
    ctor public AutoScrollHelper(android.view.View);
    method public abstract boolean canTargetScrollHorizontally(int);
    method public abstract boolean canTargetScrollVertically(int);
    method public boolean isEnabled();
    method public boolean isExclusive();
    method public boolean onTouch(android.view.View, android.view.MotionEvent);
    method public abstract void scrollTargetBy(int, int);
    method public android.support.v4.widget.AutoScrollHelper setActivationDelay(int);
    method public android.support.v4.widget.AutoScrollHelper setEdgeType(int);
    method public android.support.v4.widget.AutoScrollHelper setEnabled(boolean);
    method public android.support.v4.widget.AutoScrollHelper setExclusive(boolean);
    method public android.support.v4.widget.AutoScrollHelper setMaximumEdges(float, float);
    method public android.support.v4.widget.AutoScrollHelper setMaximumVelocity(float, float);
    method public android.support.v4.widget.AutoScrollHelper setMinimumVelocity(float, float);
    method public android.support.v4.widget.AutoScrollHelper setRampDownDuration(int);
    method public android.support.v4.widget.AutoScrollHelper setRampUpDuration(int);
    method public android.support.v4.widget.AutoScrollHelper setRelativeEdges(float, float);
    method public android.support.v4.widget.AutoScrollHelper setRelativeVelocity(float, float);
    field public static final int EDGE_TYPE_INSIDE = 0; // 0x0
    field public static final int EDGE_TYPE_INSIDE_EXTEND = 1; // 0x1
    field public static final int EDGE_TYPE_OUTSIDE = 2; // 0x2
    field public static final float NO_MAX = 3.4028235E38f;
    field public static final float NO_MIN = 0.0f;
    field public static final float RELATIVE_UNSPECIFIED = 0.0f;
  }

  public class CircularProgressDrawable extends android.graphics.drawable.Drawable {
    ctor public CircularProgressDrawable(android.content.Context);
    method public void draw(android.graphics.Canvas);
    method public boolean getArrowEnabled();
    method public float getArrowHeight();
    method public float getArrowScale();
    method public float getArrowWidth();
    method public int getBackgroundColor();
    method public float getCenterRadius();
    method public int[] getColorSchemeColors();
    method public float getEndTrim();
    method public int getOpacity();
    method public float getProgressRotation();
    method public float getStartTrim();
    method public android.graphics.Paint.Cap getStrokeCap();
    method public float getStrokeWidth();
    method public boolean isRunning();
    method public void setAlpha(int);
    method public void setArrowDimensions(float, float);
    method public void setArrowEnabled(boolean);
    method public void setArrowScale(float);
    method public void setBackgroundColor(int);
    method public void setCenterRadius(float);
    method public void setColorFilter(android.graphics.ColorFilter);
    method public void setColorSchemeColors(int...);
    method public void setProgressRotation(float);
    method public void setStartEndTrim(float, float);
    method public void setStrokeCap(android.graphics.Paint.Cap);
    method public void setStrokeWidth(float);
    method public void setStyle(int);
    method public void start();
    method public void stop();
    field public static final int DEFAULT = 1; // 0x1
    field public static final int LARGE = 0; // 0x0
  }

  public class ContentLoadingProgressBar extends android.widget.ProgressBar {
    ctor public ContentLoadingProgressBar(android.content.Context);
    ctor public ContentLoadingProgressBar(android.content.Context, android.util.AttributeSet);
    method public void hide();
    method public void onAttachedToWindow();
    method public void onDetachedFromWindow();
    method public void show();
  }

  public abstract class CursorAdapter extends android.widget.BaseAdapter {
    ctor public deprecated CursorAdapter(android.content.Context, android.database.Cursor);
    ctor public CursorAdapter(android.content.Context, android.database.Cursor, boolean);
    ctor public CursorAdapter(android.content.Context, android.database.Cursor, int);
    method public abstract void bindView(android.view.View, android.content.Context, android.database.Cursor);
    method public void changeCursor(android.database.Cursor);
    method public java.lang.CharSequence convertToString(android.database.Cursor);
    method public int getCount();
    method public android.database.Cursor getCursor();
    method public android.widget.Filter getFilter();
    method public android.widget.FilterQueryProvider getFilterQueryProvider();
    method public java.lang.Object getItem(int);
    method public long getItemId(int);
    method public android.view.View getView(int, android.view.View, android.view.ViewGroup);
    method protected deprecated void init(android.content.Context, android.database.Cursor, boolean);
    method public android.view.View newDropDownView(android.content.Context, android.database.Cursor, android.view.ViewGroup);
    method public abstract android.view.View newView(android.content.Context, android.database.Cursor, android.view.ViewGroup);
    method protected void onContentChanged();
    method public android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence);
    method public void setFilterQueryProvider(android.widget.FilterQueryProvider);
    method public android.database.Cursor swapCursor(android.database.Cursor);
    field public static final deprecated int FLAG_AUTO_REQUERY = 1; // 0x1
    field public static final int FLAG_REGISTER_CONTENT_OBSERVER = 2; // 0x2
  }

  public class DrawerLayout extends android.view.ViewGroup {
    ctor public DrawerLayout(android.content.Context);
    ctor public DrawerLayout(android.content.Context, android.util.AttributeSet);
    ctor public DrawerLayout(android.content.Context, android.util.AttributeSet, int);
    method public void addDrawerListener(android.support.v4.widget.DrawerLayout.DrawerListener);
    method public void closeDrawer(android.view.View);
    method public void closeDrawer(android.view.View, boolean);
    method public void closeDrawer(int);
    method public void closeDrawer(int, boolean);
    method public void closeDrawers();
    method public float getDrawerElevation();
    method public int getDrawerLockMode(int);
    method public int getDrawerLockMode(android.view.View);
    method public java.lang.CharSequence getDrawerTitle(int);
    method public android.graphics.drawable.Drawable getStatusBarBackgroundDrawable();
    method public boolean isDrawerOpen(android.view.View);
    method public boolean isDrawerOpen(int);
    method public boolean isDrawerVisible(android.view.View);
    method public boolean isDrawerVisible(int);
    method public void onDraw(android.graphics.Canvas);
    method protected void onLayout(boolean, int, int, int, int);
    method public void openDrawer(android.view.View);
    method public void openDrawer(android.view.View, boolean);
    method public void openDrawer(int);
    method public void openDrawer(int, boolean);
    method public void removeDrawerListener(android.support.v4.widget.DrawerLayout.DrawerListener);
    method public void setDrawerElevation(float);
    method public deprecated void setDrawerListener(android.support.v4.widget.DrawerLayout.DrawerListener);
    method public void setDrawerLockMode(int);
    method public void setDrawerLockMode(int, int);
    method public void setDrawerLockMode(int, android.view.View);
    method public void setDrawerShadow(android.graphics.drawable.Drawable, int);
    method public void setDrawerShadow(int, int);
    method public void setDrawerTitle(int, java.lang.CharSequence);
    method public void setScrimColor(int);
    method public void setStatusBarBackground(android.graphics.drawable.Drawable);
    method public void setStatusBarBackground(int);
    method public void setStatusBarBackgroundColor(int);
    field public static final int LOCK_MODE_LOCKED_CLOSED = 1; // 0x1
    field public static final int LOCK_MODE_LOCKED_OPEN = 2; // 0x2
    field public static final int LOCK_MODE_UNDEFINED = 3; // 0x3
    field public static final int LOCK_MODE_UNLOCKED = 0; // 0x0
    field public static final int STATE_DRAGGING = 1; // 0x1
    field public static final int STATE_IDLE = 0; // 0x0
    field public static final int STATE_SETTLING = 2; // 0x2
  }

  public static abstract interface DrawerLayout.DrawerListener {
    method public abstract void onDrawerClosed(android.view.View);
    method public abstract void onDrawerOpened(android.view.View);
    method public abstract void onDrawerSlide(android.view.View, float);
    method public abstract void onDrawerStateChanged(int);
  }

  public static class DrawerLayout.LayoutParams extends android.view.ViewGroup.MarginLayoutParams {
    ctor public DrawerLayout.LayoutParams(android.content.Context, android.util.AttributeSet);
    ctor public DrawerLayout.LayoutParams(int, int);
    ctor public DrawerLayout.LayoutParams(int, int, int);
    ctor public DrawerLayout.LayoutParams(android.support.v4.widget.DrawerLayout.LayoutParams);
    ctor public DrawerLayout.LayoutParams(android.view.ViewGroup.LayoutParams);
    ctor public DrawerLayout.LayoutParams(android.view.ViewGroup.MarginLayoutParams);
    field public int gravity;
  }

  protected static class DrawerLayout.SavedState extends android.support.v4.view.AbsSavedState {
    ctor public DrawerLayout.SavedState(android.os.Parcel, java.lang.ClassLoader);
    ctor public DrawerLayout.SavedState(android.os.Parcelable);
    field public static final android.os.Parcelable.Creator<android.support.v4.widget.DrawerLayout.SavedState> CREATOR;
  }

  public static abstract class DrawerLayout.SimpleDrawerListener implements android.support.v4.widget.DrawerLayout.DrawerListener {
    ctor public DrawerLayout.SimpleDrawerListener();
    method public void onDrawerClosed(android.view.View);
    method public void onDrawerOpened(android.view.View);
    method public void onDrawerSlide(android.view.View, float);
    method public void onDrawerStateChanged(int);
  }

  public abstract class ExploreByTouchHelper extends android.support.v4.view.AccessibilityDelegateCompat {
    ctor public ExploreByTouchHelper(android.view.View);
    method public final boolean clearKeyboardFocusForVirtualView(int);
    method public final boolean dispatchHoverEvent(android.view.MotionEvent);
    method public final boolean dispatchKeyEvent(android.view.KeyEvent);
    method public final int getAccessibilityFocusedVirtualViewId();
    method public deprecated int getFocusedVirtualView();
    method public final int getKeyboardFocusedVirtualViewId();
    method protected abstract int getVirtualViewAt(float, float);
    method protected abstract void getVisibleVirtualViews(java.util.List<java.lang.Integer>);
    method public final void invalidateRoot();
    method public final void invalidateVirtualView(int);
    method public final void invalidateVirtualView(int, int);
    method public final void onFocusChanged(boolean, int, android.graphics.Rect);
    method protected abstract boolean onPerformActionForVirtualView(int, int, android.os.Bundle);
    method protected void onPopulateEventForHost(android.view.accessibility.AccessibilityEvent);
    method protected void onPopulateEventForVirtualView(int, android.view.accessibility.AccessibilityEvent);
    method protected void onPopulateNodeForHost(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat);
    method protected abstract void onPopulateNodeForVirtualView(int, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat);
    method protected void onVirtualViewKeyboardFocusChanged(int, boolean);
    method public final boolean requestKeyboardFocusForVirtualView(int);
    method public final boolean sendEventForVirtualView(int, int);
    field public static final int HOST_ID = -1; // 0xffffffff
    field public static final int INVALID_ID = -2147483648; // 0x80000000
  }

  public class ListViewAutoScrollHelper extends android.support.v4.widget.AutoScrollHelper {
    ctor public ListViewAutoScrollHelper(android.widget.ListView);
    method public boolean canTargetScrollHorizontally(int);
    method public boolean canTargetScrollVertically(int);
    method public void scrollTargetBy(int, int);
  }

  public class NestedScrollView extends android.widget.FrameLayout {
    ctor public NestedScrollView(android.content.Context);
    ctor public NestedScrollView(android.content.Context, android.util.AttributeSet);
    ctor public NestedScrollView(android.content.Context, android.util.AttributeSet, int);
    method public boolean arrowScroll(int);
    method protected int computeScrollDeltaToGetChildRectOnScreen(android.graphics.Rect);
    method public boolean dispatchNestedPreScroll(int, int, int[], int[], int);
    method public boolean dispatchNestedScroll(int, int, int, int, int[], int);
    method public boolean executeKeyEvent(android.view.KeyEvent);
    method public void fling(int);
    method public boolean fullScroll(int);
    method public int getMaxScrollAmount();
    method public boolean hasNestedScrollingParent(int);
    method public boolean isFillViewport();
    method public boolean isSmoothScrollingEnabled();
    method public void onAttachedToWindow();
    method public boolean pageScroll(int);
    method public void setFillViewport(boolean);
    method public void setOnScrollChangeListener(android.support.v4.widget.NestedScrollView.OnScrollChangeListener);
    method public void setSmoothScrollingEnabled(boolean);
    method public final void smoothScrollBy(int, int);
    method public final void smoothScrollTo(int, int);
    method public boolean startNestedScroll(int, int);
    method public void stopNestedScroll(int);
  }

  public static abstract interface NestedScrollView.OnScrollChangeListener {
    method public abstract void onScrollChange(android.support.v4.widget.NestedScrollView, int, int, int, int);
  }

  public abstract class ResourceCursorAdapter extends android.support.v4.widget.CursorAdapter {
    ctor public deprecated ResourceCursorAdapter(android.content.Context, int, android.database.Cursor);
    ctor public deprecated ResourceCursorAdapter(android.content.Context, int, android.database.Cursor, boolean);
    ctor public ResourceCursorAdapter(android.content.Context, int, android.database.Cursor, int);
    method public android.view.View newView(android.content.Context, android.database.Cursor, android.view.ViewGroup);
    method public void setDropDownViewResource(int);
    method public void setViewResource(int);
  }

  public class SimpleCursorAdapter extends android.support.v4.widget.ResourceCursorAdapter {
    ctor public deprecated SimpleCursorAdapter(android.content.Context, int, android.database.Cursor, java.lang.String[], int[]);
    ctor public SimpleCursorAdapter(android.content.Context, int, android.database.Cursor, java.lang.String[], int[], int);
    method public void bindView(android.view.View, android.content.Context, android.database.Cursor);
    method public void changeCursorAndColumns(android.database.Cursor, java.lang.String[], int[]);
    method public android.support.v4.widget.SimpleCursorAdapter.CursorToStringConverter getCursorToStringConverter();
    method public int getStringConversionColumn();
    method public android.support.v4.widget.SimpleCursorAdapter.ViewBinder getViewBinder();
    method public void setCursorToStringConverter(android.support.v4.widget.SimpleCursorAdapter.CursorToStringConverter);
    method public void setStringConversionColumn(int);
    method public void setViewBinder(android.support.v4.widget.SimpleCursorAdapter.ViewBinder);
    method public void setViewImage(android.widget.ImageView, java.lang.String);
    method public void setViewText(android.widget.TextView, java.lang.String);
  }

  public static abstract interface SimpleCursorAdapter.CursorToStringConverter {
    method public abstract java.lang.CharSequence convertToString(android.database.Cursor);
  }

  public static abstract interface SimpleCursorAdapter.ViewBinder {
    method public abstract boolean setViewValue(android.view.View, android.database.Cursor, int);
  }

  public class SlidingPaneLayout extends android.view.ViewGroup {
    ctor public SlidingPaneLayout(android.content.Context);
    ctor public SlidingPaneLayout(android.content.Context, android.util.AttributeSet);
    ctor public SlidingPaneLayout(android.content.Context, android.util.AttributeSet, int);
    method protected boolean canScroll(android.view.View, boolean, int, int, int);
    method public deprecated boolean canSlide();
    method public boolean closePane();
    method public int getCoveredFadeColor();
    method public int getParallaxDistance();
    method public int getSliderFadeColor();
    method public boolean isOpen();
    method public boolean isSlideable();
    method protected void onLayout(boolean, int, int, int, int);
    method public boolean openPane();
    method public void setCoveredFadeColor(int);
    method public void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout.PanelSlideListener);
    method public void setParallaxDistance(int);
    method public deprecated void setShadowDrawable(android.graphics.drawable.Drawable);
    method public void setShadowDrawableLeft(android.graphics.drawable.Drawable);
    method public void setShadowDrawableRight(android.graphics.drawable.Drawable);
    method public deprecated void setShadowResource(int);
    method public void setShadowResourceLeft(int);
    method public void setShadowResourceRight(int);
    method public void setSliderFadeColor(int);
    method public deprecated void smoothSlideClosed();
    method public deprecated void smoothSlideOpen();
  }

  public static class SlidingPaneLayout.LayoutParams extends android.view.ViewGroup.MarginLayoutParams {
    ctor public SlidingPaneLayout.LayoutParams();
    ctor public SlidingPaneLayout.LayoutParams(int, int);
    ctor public SlidingPaneLayout.LayoutParams(android.view.ViewGroup.LayoutParams);
    ctor public SlidingPaneLayout.LayoutParams(android.view.ViewGroup.MarginLayoutParams);
    ctor public SlidingPaneLayout.LayoutParams(android.support.v4.widget.SlidingPaneLayout.LayoutParams);
    ctor public SlidingPaneLayout.LayoutParams(android.content.Context, android.util.AttributeSet);
    field public float weight;
  }

  public static abstract interface SlidingPaneLayout.PanelSlideListener {
    method public abstract void onPanelClosed(android.view.View);
    method public abstract void onPanelOpened(android.view.View);
    method public abstract void onPanelSlide(android.view.View, float);
  }

  public static class SlidingPaneLayout.SimplePanelSlideListener implements android.support.v4.widget.SlidingPaneLayout.PanelSlideListener {
    ctor public SlidingPaneLayout.SimplePanelSlideListener();
    method public void onPanelClosed(android.view.View);
    method public void onPanelOpened(android.view.View);
    method public void onPanelSlide(android.view.View, float);
  }

  public class Space extends android.view.View {
    ctor public Space(android.content.Context, android.util.AttributeSet, int);
    ctor public Space(android.content.Context, android.util.AttributeSet);
    ctor public Space(android.content.Context);
  }

  public class SwipeRefreshLayout extends android.view.ViewGroup {
    ctor public SwipeRefreshLayout(android.content.Context);
    ctor public SwipeRefreshLayout(android.content.Context, android.util.AttributeSet);
    method public boolean canChildScrollUp();
    method public int getProgressCircleDiameter();
    method public int getProgressViewEndOffset();
    method public int getProgressViewStartOffset();
    method public boolean isRefreshing();
    method protected void onLayout(boolean, int, int, int, int);
    method public void onMeasure(int, int);
    method public deprecated void setColorScheme(int...);
    method public void setColorSchemeColors(int...);
    method public void setColorSchemeResources(int...);
    method public void setDistanceToTriggerSync(int);
    method public void setOnChildScrollUpCallback(android.support.v4.widget.SwipeRefreshLayout.OnChildScrollUpCallback);
    method public void setOnRefreshListener(android.support.v4.widget.SwipeRefreshLayout.OnRefreshListener);
    method public deprecated void setProgressBackgroundColor(int);
    method public void setProgressBackgroundColorSchemeColor(int);
    method public void setProgressBackgroundColorSchemeResource(int);
    method public void setProgressViewEndTarget(boolean, int);
    method public void setProgressViewOffset(boolean, int, int);
    method public void setRefreshing(boolean);
    method public void setSize(int);
    field public static final int DEFAULT = 1; // 0x1
    field public static final int LARGE = 0; // 0x0
    field protected int mFrom;
    field protected int mOriginalOffsetTop;
  }

  public static abstract interface SwipeRefreshLayout.OnChildScrollUpCallback {
    method public abstract boolean canChildScrollUp(android.support.v4.widget.SwipeRefreshLayout, android.view.View);
  }

  public static abstract interface SwipeRefreshLayout.OnRefreshListener {
    method public abstract void onRefresh();
  }

  public class ViewDragHelper {
    method public void abort();
    method protected boolean canScroll(android.view.View, boolean, int, int, int, int);
    method public void cancel();
    method public void captureChildView(android.view.View, int);
    method public boolean checkTouchSlop(int);
    method public boolean checkTouchSlop(int, int);
    method public boolean continueSettling(boolean);
    method public static android.support.v4.widget.ViewDragHelper create(android.view.ViewGroup, android.support.v4.widget.ViewDragHelper.Callback);
    method public static android.support.v4.widget.ViewDragHelper create(android.view.ViewGroup, float, android.support.v4.widget.ViewDragHelper.Callback);
    method public android.view.View findTopChildUnder(int, int);
    method public void flingCapturedView(int, int, int, int);
    method public int getActivePointerId();
    method public android.view.View getCapturedView();
    method public int getEdgeSize();
    method public float getMinVelocity();
    method public int getTouchSlop();
    method public int getViewDragState();
    method public boolean isCapturedViewUnder(int, int);
    method public boolean isEdgeTouched(int);
    method public boolean isEdgeTouched(int, int);
    method public boolean isPointerDown(int);
    method public boolean isViewUnder(android.view.View, int, int);
    method public void processTouchEvent(android.view.MotionEvent);
    method public void setEdgeTrackingEnabled(int);
    method public void setMinVelocity(float);
    method public boolean settleCapturedViewAt(int, int);
    method public boolean shouldInterceptTouchEvent(android.view.MotionEvent);
    method public boolean smoothSlideViewTo(android.view.View, int, int);
    field public static final int DIRECTION_ALL = 3; // 0x3
    field public static final int DIRECTION_HORIZONTAL = 1; // 0x1
    field public static final int DIRECTION_VERTICAL = 2; // 0x2
    field public static final int EDGE_ALL = 15; // 0xf
    field public static final int EDGE_BOTTOM = 8; // 0x8
    field public static final int EDGE_LEFT = 1; // 0x1
    field public static final int EDGE_RIGHT = 2; // 0x2
    field public static final int EDGE_TOP = 4; // 0x4
    field public static final int INVALID_POINTER = -1; // 0xffffffff
    field public static final int STATE_DRAGGING = 1; // 0x1
    field public static final int STATE_IDLE = 0; // 0x0
    field public static final int STATE_SETTLING = 2; // 0x2
  }

  public static abstract class ViewDragHelper.Callback {
    ctor public ViewDragHelper.Callback();
    method public int clampViewPositionHorizontal(android.view.View, int, int);
    method public int clampViewPositionVertical(android.view.View, int, int);
    method public int getOrderedChildIndex(int);
    method public int getViewHorizontalDragRange(android.view.View);
    method public int getViewVerticalDragRange(android.view.View);
    method public void onEdgeDragStarted(int, int);
    method public boolean onEdgeLock(int);
    method public void onEdgeTouched(int, int);
    method public void onViewCaptured(android.view.View, int);
    method public void onViewDragStateChanged(int);
    method public void onViewPositionChanged(android.view.View, int, int, int, int);
    method public void onViewReleased(android.view.View, float, float);
    method public abstract boolean tryCaptureView(android.view.View, int);
  }

}

