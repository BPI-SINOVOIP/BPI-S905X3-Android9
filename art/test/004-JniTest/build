#!/bin/bash
#
# Copyright 2017 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Perform a mostly normal build.
# Since this test imports 'dalvik.annotation.optimization.FastNative' (and CriticalNative),
# we do a bit of trickery to allow the annotations to be used at javac-compile time,
# but remove them afterwards so it doesn't end up in the dex file.
#
# This enables the test to compile with vanilla RI javac and work on either ART or RI.
#

export ORIGINAL_JAVAC="$JAVAC"

# Delete CriticalNative.java, FastNative.java annotations after building the .class files.
function javac_wrapper {
  $ORIGINAL_JAVAC "$@"
  local stat=$?

  [[ -d classes ]] && (find classes/dalvik -name '*.class' | xargs rm -rf)

  return $stat
}

export -f javac_wrapper
export JAVAC=javac_wrapper

######################################################################

# Use the original dx with no extra magic or pessimizing flags.
# This ensures that any default optimizations that dx do would not break JNI.

export ORIGINAL_DX="$DX"

# Filter out --debug flag from dx.
function dx_wrapper {
  local args=("$@")
  local args_filtered=()
  for i in "${args[@]}"; do
    case "$i" in
      --debug)
        ;;
      *)
        args_filtered+=("$i")
        ;;
    esac
  done
  "$ORIGINAL_DX" "${args_filtered[@]}"
}

export -f dx_wrapper
export DX=dx_wrapper

./default-build "$@"
