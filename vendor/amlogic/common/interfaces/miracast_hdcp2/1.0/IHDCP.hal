/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package vendor.amlogic.hardware.miracast_hdcp2@1.0;
import IHDCPObserver;

interface IHDCP {
    // Called to specify the observer that receives asynchronous notifications
    // from the HDCP implementation to signal completion/failure of asynchronous
    // operations (such as initialization) or out of band events.
    setObserver(IHDCPObserver observer)
		generates(Status status);

    // Request to setup an HDCP session with the specified host listening
    // on the specified port.
    initAsync(string host, uint32_t port)
		generates(Status status);

    // Request to shutdown the active HDCP session.
    shutdownAsync()
		generates(Status status);

    // Returns the capability bitmask of this HDCP session.
    // Possible return values (please refer to HDCAPAPI.h):
    //   HDCP_CAPS_ENCRYPT: mandatory, meaning the HDCP module can encrypt
    //   from an input byte-array buffer to an output byte-array buffer
    //   HDCP_CAPS_ENCRYPT_NATIVE: the HDCP module supports encryption from
    //   a native buffer to an output byte-array buffer. The format of the
    //   input native buffer is specific to vendor's encoder implementation.
    //   It is the same format as that used by the encoder when
    //   "storeMetaDataInBuffers" extension is enabled on its output port.
    getCaps()
		generates(uint32_t caps);

    // ENCRYPTION only:
    // Encrypt data according to the HDCP spec. "size" bytes of data are
    // available at "inData" (virtual address), "size" may not be a multiple
    // of 128 bits (16 bytes). An equal number of encrypted bytes should be
    // written to the buffer at "outData" (virtual address).
    // This operation is to be synchronous, i.e. this call does not return
    // until outData contains size bytes of encrypted data.
    // streamCTR will be assigned by the caller (to 0 for the first PES stream,
    // 1 for the second and so on)
    // inputCTR _will_be_maintained_by_the_callee_ for each PES stream.
    encrypt( vec<uint8_t> inData, uint32_t streamCTR)
		generates(Status status, uint64_t outInputCTR, vec<uint8_t> outData);

    // DECRYPTION only:
    // Decrypt data according to the HDCP spec.
    // "size" bytes of encrypted data are available at "inData"
    // (virtual address), "size" may not be a multiple of 128 bits (16 bytes).
    // An equal number of decrypted bytes should be written to the buffer
    // at "outData" (virtual address).
    // This operation is to be synchronous, i.e. this call does not return
    // until outData contains size bytes of decrypted data.
    // Both streamCTR and inputCTR will be provided by the caller.
    // uint32_t outAddr are used for pass hardware secure address 0 means not secure
    decrypt(vec<uint8_t> inData,
            uint32_t streamCTR, uint64_t outInputCTR, uint32_t outAddr)
		generates(Status status, vec<uint8_t> outData);

};

