From a855c05fb219e5d1f73dabca629e9a26f760cc64 Mon Sep 17 00:00:00 2001
From: Chaomin Zheng <chaomin.zheng@amlogic.com>
Date: Sat, 15 Dec 2018 16:45:35 +0800
Subject: [PATCH] TvInputHardawreManager: use listAudioPorts replace
 listAudioDevicePorts [1/1]

PD# SWPL-1987

Problem:
droid launcher tv preview audio patch not right

Solution:
TvInputHardawreManager use listAudioPorts replace listAudioDevicePorts

Verify:
verify by p321

Change-Id: I1e7b619eb0f5fa1cc985fab5fd17459c1bc16701
Signed-off-by: Chaomin Zheng <chaomin.zheng@amlogic.com>
---
 .../android/server/tv/TvInputHardwareManager.java  | 124 ++++++++++++++++++---
 1 file changed, 106 insertions(+), 18 deletions(-)

diff --git a/services/core/java/com/android/server/tv/TvInputHardwareManager.java b/services/core/java/com/android/server/tv/TvInputHardwareManager.java
index c4c9da7..082bfa9 100644
--- a/services/core/java/com/android/server/tv/TvInputHardwareManager.java
+++ b/services/core/java/com/android/server/tv/TvInputHardwareManager.java
@@ -19,7 +19,7 @@ package com.android.server.tv;
 import static android.media.tv.TvInputManager.INPUT_STATE_CONNECTED;
 import static android.media.tv.TvInputManager.INPUT_STATE_CONNECTED_STANDBY;
 import static android.media.tv.TvInputManager.INPUT_STATE_DISCONNECTED;
-
+import android.bluetooth.BluetoothA2dp;
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
@@ -32,6 +32,11 @@ import android.hardware.hdmi.IHdmiControlService;
 import android.hardware.hdmi.IHdmiDeviceEventListener;
 import android.hardware.hdmi.IHdmiHotplugEventListener;
 import android.hardware.hdmi.IHdmiSystemAudioModeChangeListener;
+import android.hardware.usb.UsbConfiguration;
+import android.hardware.usb.UsbConstants;
+import android.hardware.usb.UsbDevice;
+import android.hardware.usb.UsbInterface;
+import android.hardware.usb.UsbManager;
 import android.media.AudioDevicePort;
 import android.media.AudioFormat;
 import android.media.AudioGain;
@@ -148,6 +153,75 @@ class TvInputHardwareManager implements TvInputHal.Callback {
             filter.addAction(AudioManager.STREAM_MUTE_CHANGED_ACTION);
             mContext.registerReceiver(mVolumeReceiver, filter);
             updateVolume();
+
+            BroadcastReceiver hostReceiver = new BroadcastReceiver() {
+                @Override
+                public void onReceive(Context context, Intent intent) {
+                    boolean hasUsbAudioDevice = false;
+                    UsbDevice device = (UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);
+                    if (device == null) {
+                        return;
+                    }
+                    int count = device.getConfigurationCount();
+                    for (int i = 0; i < count; i++) {
+                        UsbConfiguration configuration = device.getConfiguration(i);
+                        if (configuration == null) {
+                            return;
+                        }
+                        int interfaceCount = configuration.getInterfaceCount();
+                        for (int j = 0; j < interfaceCount; j++) {
+                            UsbInterface usbInterface = configuration.getInterface(j);
+                            if (usbInterface != null &&
+                                    usbInterface.getInterfaceClass() == UsbConstants.USB_CLASS_AUDIO) {
+                                hasUsbAudioDevice = true;
+                            }
+                        }
+                    }
+                    if (hasUsbAudioDevice) {
+                        mHandler.postDelayed(new Runnable() {
+                            public void run() {
+                                synchronized (mLock) {
+                                    for (int i = 0; i < mConnections.size(); ++i) {
+                                        TvInputHardwareImpl impl = mConnections.valueAt(i).getHardwareImplLocked();
+                                        if (impl != null) {
+                                            impl.handleAudioSinkUpdated();
+                                        }
+                                    }
+                                }
+                            }
+                        }, UsbManager.ACTION_USB_DEVICE_ATTACHED.equals(intent.getAction()) ? 0 : 1200);
+                    }
+                }
+            };
+            final IntentFilter usbFilter =
+                    new IntentFilter(UsbManager.ACTION_USB_DEVICE_ATTACHED);
+            usbFilter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);
+            mContext.registerReceiver(hostReceiver, usbFilter);
+            BroadcastReceiver a2dpReceiver = new BroadcastReceiver() {
+                @Override
+                public void onReceive(Context context, Intent intent) {
+                    int state = intent.getIntExtra(BluetoothA2dp.EXTRA_STATE, -1);
+                        if (state == BluetoothA2dp.STATE_CONNECTED ||
+                            state == BluetoothA2dp.STATE_DISCONNECTED) {
+                            mHandler.postDelayed(new Runnable() {
+                            public void run() {
+                                synchronized (mLock) {
+                                    for (int i = 0; i < mConnections.size(); ++i) {
+                                        TvInputHardwareImpl impl =
+                                                mConnections.valueAt(i).getHardwareImplLocked();
+                                        if (impl != null) {
+                                            impl.handleAudioSinkUpdated();
+                                        }
+                                    }
+                                }
+                            }
+                        }, state == BluetoothA2dp.STATE_CONNECTED ? 600 : 2000);
+                    }
+                }
+            };
+            final IntentFilter a2dpFilter =
+                    new IntentFilter(BluetoothA2dp.ACTION_CONNECTION_STATE_CHANGED);
+            mContext.registerReceiver(a2dpReceiver, a2dpFilter);
         }
     }
 
@@ -790,15 +864,20 @@ class TvInputHardwareManager implements TvInputHal.Callback {
 
         private void findAudioSinkFromAudioPolicy(List<AudioDevicePort> sinks) {
             sinks.clear();
-            ArrayList<AudioDevicePort> devicePorts = new ArrayList<>();
-            if (mAudioManager.listAudioDevicePorts(devicePorts) != AudioManager.SUCCESS) {
+            ArrayList<AudioPort> audioPorts = new ArrayList<>();
+            int[] portGeneration = new int[1];
+            if (AudioSystem.listAudioPorts(audioPorts, portGeneration) != AudioManager.SUCCESS) {
                 return;
             }
             int sinkDevice = mAudioManager.getDevicesForStream(AudioManager.STREAM_MUSIC);
-            for (AudioDevicePort port : devicePorts) {
-                if ((port.type() & sinkDevice) != 0 &&
-                    (port.type() & AudioSystem.DEVICE_BIT_IN) == 0) {
-                    sinks.add(port);
+            AudioDevicePort port;
+            for (AudioPort audioPort : audioPorts) {
+                if (audioPort instanceof AudioDevicePort) {
+                    port = (AudioDevicePort)audioPort;
+                    if ((port.type() & sinkDevice) != 0 &&
+                            (port.type() & AudioSystem.DEVICE_BIT_IN) == 0) {
+                        sinks.add(port);
+                    }
                 }
             }
         }
@@ -807,13 +886,18 @@ class TvInputHardwareManager implements TvInputHal.Callback {
             if (type == AudioManager.DEVICE_NONE) {
                 return null;
             }
-            ArrayList<AudioDevicePort> devicePorts = new ArrayList<>();
-            if (mAudioManager.listAudioDevicePorts(devicePorts) != AudioManager.SUCCESS) {
+            ArrayList<AudioPort> audioPorts = new ArrayList<>();
+            int[] portGeneration = new int[1];
+            if (AudioSystem.listAudioPorts(audioPorts, portGeneration) != AudioManager.SUCCESS) {
                 return null;
             }
-            for (AudioDevicePort port : devicePorts) {
-                if (port.type() == type && port.address().equals(address)) {
-                    return port;
+            AudioDevicePort port;
+            for (AudioPort audioPort : audioPorts) {
+                if (audioPort instanceof AudioDevicePort) {
+                    port = (AudioDevicePort)audioPort;
+                    if (port.type() == type && port.address().equals(address)) {
+                        return port;
+                    }
                 }
             }
             return null;
@@ -1293,14 +1377,18 @@ class TvInputHardwareManager implements TvInputHal.Callback {
         IHdmiSystemAudioModeChangeListener.Stub {
         @Override
         public void onStatusChanged(boolean enabled) throws RemoteException {
-            synchronized (mLock) {
-                for (int i = 0; i < mConnections.size(); ++i) {
-                    TvInputHardwareImpl impl = mConnections.valueAt(i).getHardwareImplLocked();
-                    if (impl != null) {
-                        impl.handleAudioSinkUpdated();
+            mHandler.postDelayed(new Runnable() {
+                public void run() {
+                    synchronized (mLock) {
+                        for (int i = 0; i < mConnections.size(); ++i) {
+                            TvInputHardwareImpl impl = mConnections.valueAt(i).getHardwareImplLocked();
+                            if (impl != null) {
+                                impl.handleAudioSinkUpdated();
+                            }
+                        }
                     }
                 }
-            }
+            }, enabled ? 0 : 500);
         }
     }
 }
-- 
2.7.4

