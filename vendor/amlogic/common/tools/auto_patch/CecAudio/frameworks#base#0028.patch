From 25d90e302bc078cc8341e9bc6ed4c975934246a1 Mon Sep 17 00:00:00 2001
From: xian <an.xi@amlogic.com>
Date: Thu, 5 Sep 2019 21:11:27 -0400
Subject: [PATCH] SystemServer: fix playback wake up tv issue [1/1]

PD#SWPL-12488

Problem:
The modification of SWPL-9793 remove the logic of
querying tv power status, thus if tv is not ready,
then no otp meessage would be received.

Solution:
Keep querying tv power status after send otp message,
and set ActiveSource message when tv is ready.

Verify:
verify it on Franklin

Change-Id: I30d78717ab623f2149e60a625cf7040fa837333c
Signed-off-by: an.xi <an.xi@amlogic.com>
---
 .../server/hdmi/HdmiCecLocalDevicePlayback.java        | 16 +++++++++++-----
 .../com/android/server/hdmi/OneTouchPlayAction.java    | 18 +++++++++++++-----
 2 files changed, 24 insertions(+), 10 deletions(-)

diff --git a/services/core/java/com/android/server/hdmi/HdmiCecLocalDevicePlayback.java b/services/core/java/com/android/server/hdmi/HdmiCecLocalDevicePlayback.java
index 4221b8c..11bfd4f 100644
--- a/services/core/java/com/android/server/hdmi/HdmiCecLocalDevicePlayback.java
+++ b/services/core/java/com/android/server/hdmi/HdmiCecLocalDevicePlayback.java
@@ -92,8 +92,15 @@ final class HdmiCecLocalDevicePlayback extends HdmiCecLocalDevice {
         boolean isOneTouchPlayEnabled =
             mService.readBooleanSetting("hdmi_control_one_touch_play_enabled", true);
         if (isOneTouchPlayEnabled) {
-            oneTouchPlay(null);
-            HdmiLogger.debug("trigger One Touch Play when Address Allocated.");
+            Slog.d(TAG, "onAddressAllocated trigger One Touch Play.");
+            oneTouchPlay(new IHdmiControlCallback.Stub() {
+                    @Override
+                    public void onComplete(int result) {
+                        if (result != HdmiControlManager.RESULT_SUCCESS) {
+                            Slog.w(TAG, "Failed to complete 'one touch play' after retrying for 20s. result=" + result);
+                        }
+                    }
+                });
         }
     }
 
@@ -119,9 +126,8 @@ final class HdmiCecLocalDevicePlayback extends HdmiCecLocalDevice {
         List<OneTouchPlayAction> actions = getActions(OneTouchPlayAction.class);
         if (!actions.isEmpty()) {
             Slog.i(TAG, "oneTouchPlay already in progress");
-            //actions.get(0).addCallback(callback);
-            //return;
-            removeAction(OneTouchPlayAction.class);
+            actions.get(0).addCallback(callback);
+            return;
         }
         OneTouchPlayAction action = OneTouchPlayAction.create(this, Constants.ADDR_TV,
                 callback);
diff --git a/services/core/java/com/android/server/hdmi/OneTouchPlayAction.java b/services/core/java/com/android/server/hdmi/OneTouchPlayAction.java
index 9e7d07d..87d6caa 100644
--- a/services/core/java/com/android/server/hdmi/OneTouchPlayAction.java
+++ b/services/core/java/com/android/server/hdmi/OneTouchPlayAction.java
@@ -47,7 +47,7 @@ final class OneTouchPlayAction extends HdmiCecFeatureAction {
 
     // The maximum number of times we send <Give Device Power Status> before we give up.
     // We wait up to RESPONSE_TIMEOUT_MS * LOOP_COUNTER_MAX = 20 seconds.
-    private static final int LOOP_COUNTER_MAX = 1;
+    private static final int LOOP_COUNTER_MAX = 10;
 
     private final int mTargetAddress;
     private final List<IHdmiControlCallback> mCallbacks = new ArrayList<>();
@@ -57,7 +57,7 @@ final class OneTouchPlayAction extends HdmiCecFeatureAction {
     // Factory method. Ensures arguments are valid.
     static OneTouchPlayAction create(HdmiCecLocalDevicePlayback source,
             int targetAddress, IHdmiControlCallback callback) {
-        if (source == null) {
+        if (source == null || callback == null) {
             Slog.e(TAG, "Wrong arguments");
             return null;
         }
@@ -76,9 +76,9 @@ final class OneTouchPlayAction extends HdmiCecFeatureAction {
     boolean start() {
         sendCommand(HdmiCecMessageBuilder.buildTextViewOn(getSourceAddress(), mTargetAddress));
         broadcastActiveSource();
-        //queryDevicePowerStatus();
-        //mState = STATE_WAITING_FOR_REPORT_POWER_STATUS;
-        //addTimer(mState, HdmiConfig.TIMEOUT_MS);
+        queryDevicePowerStatus();
+        mState = STATE_WAITING_FOR_REPORT_POWER_STATUS;
+        addTimer(mState, HdmiConfig.TIMEOUT_MS);
         return true;
     }
 
@@ -93,6 +93,11 @@ final class OneTouchPlayAction extends HdmiCecFeatureAction {
                 mTargetAddress));
     }
 
+    private void sendOTPCommand() {
+        sendCommand(HdmiCecMessageBuilder.buildActiveSource(getSourceAddress(), getSourcePath()));
+        sendCommand(HdmiCecMessageBuilder.buildTextViewOn(getSourceAddress(), mTargetAddress));
+    }
+
     @Override
     boolean processCommand(HdmiCecMessage cmd) {
         if (mState != STATE_WAITING_FOR_REPORT_POWER_STATUS
@@ -102,6 +107,7 @@ final class OneTouchPlayAction extends HdmiCecFeatureAction {
         if (cmd.getOpcode() == Constants.MESSAGE_REPORT_POWER_STATUS) {
             int status = cmd.getParams()[0];
             if (status == HdmiControlManager.POWER_STATUS_ON) {
+                Slog.d(TAG, "processCommand tv power status ok");
                 broadcastActiveSource();
                 invokeCallback(HdmiControlManager.RESULT_SUCCESS);
                 finish();
@@ -118,6 +124,8 @@ final class OneTouchPlayAction extends HdmiCecFeatureAction {
         }
         if (state == STATE_WAITING_FOR_REPORT_POWER_STATUS) {
             if (mPowerStatusCounter++ < LOOP_COUNTER_MAX) {
+                Slog.e(TAG, "handleTimerEvent tv power status is not ok, continue to query.");
+                sendOTPCommand();
                 queryDevicePowerStatus();
                 addTimer(mState, HdmiConfig.TIMEOUT_MS);
             } else {
-- 
2.7.4

