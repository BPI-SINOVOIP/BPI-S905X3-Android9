From 8515027a5b634d6f67c8a20cbb724ae00c25e8a1 Mon Sep 17 00:00:00 2001
From: Fraunhofer IIS FDK <audio-fdk@iis.fraunhofer.de>
Date: Mon, 10 Sep 2018 16:39:30 +0200
Subject: [PATCH] Security: Security patch from bulletin-2018-12-preview [3/16]

Prevent out of bounds accesses in lppTransposer() and lppTransposerHBE()

Bug: 112160868
Test: see poc in bug

audio: disable he-aac SBR output if FILTER_HEAAC_ENABLE [2/4]

PD#SWPL-22375

Problem:
Should disable he-aac decoder as  required

Solution:
If SBR flag is detected with the MACRO "FILTER_HEAAC_ENABLE"
disable he-aac decoder.

Verify:
Newton.

Signed-off-by: Lianlian Zhu <lianlian.zhu@amlogic.com>
Change-Id: I0560ef68db411cf77b84d27d5748b66094f03165
---
 Android.bp                       |  4 ++
 libAACdec/src/aacdecoder.h       |  1 +
 libAACdec/src/aacdecoder_lib.cpp | 11 +++--
 libSBRdec/src/lpp_tran.cpp       | 74 ++++++++++++++++++++------------
 4 files changed, 60 insertions(+), 30 deletions(-)

diff --git a/Android.bp b/Android.bp
index 50cc092..7f613b2 100644
--- a/Android.bp
+++ b/Android.bp
@@ -27,6 +27,10 @@ cc_library_static {
         misc_undefined:["unsigned-integer-overflow", "signed-integer-overflow"],
         cfi: true,
     },
+    shared_libs: [
+        "liblog",
+        "libcutils",
+    ],
     export_include_dirs: [
         "libAACdec/include",
         "libAACenc/include",
diff --git a/libAACdec/src/aacdecoder.h b/libAACdec/src/aacdecoder.h
index 20f4c45..201eb5e 100644
--- a/libAACdec/src/aacdecoder.h
+++ b/libAACdec/src/aacdecoder.h
@@ -344,6 +344,7 @@ This structure is allocated once for each CPE. */
   FDK_SignalDelay usacResidualDelay; /*!< Delay residual signal to compensate
                                         for eSBR delay of DMX signal in case of
                                         stereoConfigIndex==2. */
+  bool filterheaac; 
 };
 
 #define AAC_DEBUG_EXTHLP \
diff --git a/libAACdec/src/aacdecoder_lib.cpp b/libAACdec/src/aacdecoder_lib.cpp
index d98cf5a..841056c 100644
--- a/libAACdec/src/aacdecoder_lib.cpp
+++ b/libAACdec/src/aacdecoder_lib.cpp
@@ -101,7 +101,7 @@ amm-info@iis.fraunhofer.de
 *******************************************************************************/
 
 #include "aacdecoder_lib.h"
-
+#include <cutils/properties.h>
 #include "aac_ram.h"
 #include "aacdecoder.h"
 #include "tpdec_lib.h"
@@ -130,6 +130,7 @@ amm-info@iis.fraunhofer.de
 #define AACDECODER_LIB_BUILD_TIME __TIME__
 #endif
 
+#define PROPERTY_FILTER_HEAAC "media.filter.heaac"
 static AAC_DECODER_ERROR setConcealMethod(const HANDLE_AACDECODER self,
                                           const INT method);
 
@@ -917,7 +918,6 @@ LINKSPEC_CPP HANDLE_AACDECODER aacDecoder_Open(TRANSPORT_TYPE transportFmt,
   HANDLE_TRANSPORTDEC pIn;
   int err = 0;
   int stereoConfigIndex = -1;
-
   UINT nrOfLayers_min = fMin(nrOfLayers, (UINT)1);
 
   /* Allocate transport layer struct. */
@@ -1015,6 +1015,7 @@ bail:
     aacDecoder_Close(aacDec);
     aacDec = NULL;
   }
+  aacDec->filterheaac = property_get_bool(PROPERTY_FILTER_HEAAC, false);
   return aacDec;
 }
 
@@ -1916,7 +1917,11 @@ bail:
       self->streamInfo.numChannels * self->streamInfo.frameSize) {
     ErrorStatus = AAC_DEC_OUTPUT_BUFFER_TOO_SMALL;
   }
-
+  if (self->sbrEnabled && self->filterheaac) {
+      FDKmemclear(pTimeData_extern,
+                timeDataSize_extern * sizeof(*pTimeData_extern));
+      return ErrorStatus;
+  } 
   /* Update external output buffer. */
   if (IS_OUTPUT_VALID(ErrorStatus)) {
     FDKmemcpy(pTimeData_extern, pTimeData,
diff --git a/libSBRdec/src/lpp_tran.cpp b/libSBRdec/src/lpp_tran.cpp
index aa1fd5d..2ef07eb 100644
--- a/libSBRdec/src/lpp_tran.cpp
+++ b/libSBRdec/src/lpp_tran.cpp
@@ -118,6 +118,10 @@ amm-info@iis.fraunhofer.de
   \sa lppTransposer(), main_audio.cpp, sbr_scale.h, \ref documentationOverview
 */
 
+#ifdef __ANDROID__
+#include "log/log.h"
+#endif
+
 #include "lpp_tran.h"
 
 #include "sbr_ram.h"
@@ -295,7 +299,6 @@ void lppTransposer(
   int ovLowBandShift;
   int lowBandShift;
   /*  int ovHighBandShift;*/
-  int targetStopBand;
 
   alphai[0] = FL2FXCONST_SGL(0.0f);
   alphai[1] = FL2FXCONST_SGL(0.0f);
@@ -311,25 +314,34 @@ void lppTransposer(
 
   autoCorrLength = pSettings->nCols + pSettings->overlap;
 
-  /* Set upper subbands to zero:
-     This is required in case that the patches do not cover the complete
-     highband (because the last patch would be too short). Possible
-     optimization: Clearing bands up to usb would be sufficient here. */
-  targetStopBand = patchParam[pSettings->noOfPatches - 1].targetStartBand +
-                   patchParam[pSettings->noOfPatches - 1].numBandsInPatch;
+  if (pSettings->noOfPatches > 0) {
+    /* Set upper subbands to zero:
+       This is required in case that the patches do not cover the complete
+       highband (because the last patch would be too short). Possible
+       optimization: Clearing bands up to usb would be sufficient here. */
+    int targetStopBand =
+        patchParam[pSettings->noOfPatches - 1].targetStartBand +
+        patchParam[pSettings->noOfPatches - 1].numBandsInPatch;
 
-  int memSize = ((64) - targetStopBand) * sizeof(FIXP_DBL);
+    int memSize = ((64) - targetStopBand) * sizeof(FIXP_DBL);
 
-  if (!useLP) {
-    for (i = startSample; i < stopSampleClear; i++) {
-      FDKmemclear(&qmfBufferReal[i][targetStopBand], memSize);
-      FDKmemclear(&qmfBufferImag[i][targetStopBand], memSize);
-    }
-  } else {
-    for (i = startSample; i < stopSampleClear; i++) {
-      FDKmemclear(&qmfBufferReal[i][targetStopBand], memSize);
+    if (!useLP) {
+      for (i = startSample; i < stopSampleClear; i++) {
+        FDKmemclear(&qmfBufferReal[i][targetStopBand], memSize);
+        FDKmemclear(&qmfBufferImag[i][targetStopBand], memSize);
+      }
+    } else {
+      for (i = startSample; i < stopSampleClear; i++) {
+        FDKmemclear(&qmfBufferReal[i][targetStopBand], memSize);
+      }
     }
   }
+#ifdef __ANDROID__
+  else {
+    // Safetynet logging
+    android_errorWriteLog(0x534e4554, "112160868");
+  }
+#endif
 
   /* init bwIndex for each patch */
   FDKmemclear(bwIndex, sizeof(bwIndex));
@@ -874,7 +886,6 @@ void lppTransposerHBE(
   int ovLowBandShift;
   int lowBandShift;
   /*  int ovHighBandShift;*/
-  int targetStopBand;
 
   alphai[0] = FL2FXCONST_SGL(0.0f);
   alphai[1] = FL2FXCONST_SGL(0.0f);
@@ -889,19 +900,28 @@ void lppTransposerHBE(
 
   autoCorrLength = pSettings->nCols + pSettings->overlap;
 
-  /* Set upper subbands to zero:
-     This is required in case that the patches do not cover the complete
-     highband (because the last patch would be too short). Possible
-     optimization: Clearing bands up to usb would be sufficient here. */
-  targetStopBand = patchParam[pSettings->noOfPatches - 1].targetStartBand +
-                   patchParam[pSettings->noOfPatches - 1].numBandsInPatch;
+  if (pSettings->noOfPatches > 0) {
+    /* Set upper subbands to zero:
+       This is required in case that the patches do not cover the complete
+       highband (because the last patch would be too short). Possible
+       optimization: Clearing bands up to usb would be sufficient here. */
+    int targetStopBand =
+        patchParam[pSettings->noOfPatches - 1].targetStartBand +
+        patchParam[pSettings->noOfPatches - 1].numBandsInPatch;
 
-  int memSize = ((64) - targetStopBand) * sizeof(FIXP_DBL);
+    int memSize = ((64) - targetStopBand) * sizeof(FIXP_DBL);
 
-  for (i = startSample; i < stopSampleClear; i++) {
-    FDKmemclear(&qmfBufferReal[i][targetStopBand], memSize);
-    FDKmemclear(&qmfBufferImag[i][targetStopBand], memSize);
+    for (i = startSample; i < stopSampleClear; i++) {
+      FDKmemclear(&qmfBufferReal[i][targetStopBand], memSize);
+      FDKmemclear(&qmfBufferImag[i][targetStopBand], memSize);
+    }
+  }
+#ifdef __ANDROID__
+  else {
+    // Safetynet logging
+    android_errorWriteLog(0x534e4554, "112160868");
   }
+#endif
 
   /*
   Calc common low band scale factor
-- 
2.24.0

