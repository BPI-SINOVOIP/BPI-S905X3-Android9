From 2268310a7bc176e98a4d9280f7d4455615d98379 Mon Sep 17 00:00:00 2001
From: Jinping Wang <jinping.wang@amlogic.com>
Date: Sun, 7 Jul 2019 20:22:13 +0800
Subject: [PATCH] cec: HdmiSwitchClient block gts [2/2]

PD# TV-7238

Problem:
HdmiSwitchClient not support in P and Q,
it is available in R

Solution:
HdmiSwitchClient is replaced by HdmiTvClient

Verify:
test ok using x301

Change-Id: Ia8a847773cef656e2438d6c3dcee213db5ba9053
Signed-off-by: Jinping Wang <jinping.wang@amlogic.com>
---
 .../android/hardware/hdmi/HdmiControlManager.java  |  19 ---
 .../android/hardware/hdmi/HdmiSwitchClient.java    | 134 ---------------------
 2 files changed, 153 deletions(-)
 delete mode 100644 core/java/android/hardware/hdmi/HdmiSwitchClient.java

diff --git a/core/java/android/hardware/hdmi/HdmiControlManager.java b/core/java/android/hardware/hdmi/HdmiControlManager.java
index 4f7c578..844240e 100644
--- a/core/java/android/hardware/hdmi/HdmiControlManager.java
+++ b/core/java/android/hardware/hdmi/HdmiControlManager.java
@@ -320,8 +320,6 @@ public final class HdmiControlManager {
                 return mHasTvDevice ? new HdmiTvClient(mService) : null;
             case HdmiDeviceInfo.DEVICE_PLAYBACK:
                 return mHasPlaybackDevice ? new HdmiPlaybackClient(mService) : null;
-            case HdmiDeviceInfo.DEVICE_PURE_CEC_SWITCH:
-                return mHasSwitchDevice ? new HdmiSwitchClient(mService) : null;
             default:
                 return null;
         }
@@ -358,23 +356,6 @@ public final class HdmiControlManager {
     }
 
     /**
-     * Gets an object that represents an HDMI-CEC logical device of type switch on the system.
-     *
-     * <p>Used to send HDMI control messages to other devices like TV through HDMI bus. It is also
-     * possible to communicate with other logical devices hosted in the same system if the system is
-     * configured to host more than one type of HDMI-CEC logical devices.
-     *
-     * @return {@link HdmiSwitchClient} instance. {@code null} on failure.
-     *
-     * TODO(b/110094868): unhide for Q
-     */
-    @Nullable
-    @SuppressLint("Doclava125")
-    public HdmiSwitchClient getSwitchClient() {
-        return (HdmiSwitchClient) getClient(HdmiDeviceInfo.DEVICE_PURE_CEC_SWITCH);
-    }
-
-    /**
      * Controls standby mode of the system. It will also try to turn on/off the connected devices if
      * necessary.
      *
diff --git a/core/java/android/hardware/hdmi/HdmiSwitchClient.java b/core/java/android/hardware/hdmi/HdmiSwitchClient.java
deleted file mode 100644
index f6c7a9d..0000000
--- a/core/java/android/hardware/hdmi/HdmiSwitchClient.java
+++ /dev/null
@@ -1,134 +0,0 @@
-/*
- * Copyright (C) 2018 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package android.hardware.hdmi;
-
-import android.annotation.NonNull;
-import android.annotation.SystemApi;
-import android.os.RemoteException;
-import android.util.Log;
-
-import java.util.Collections;
-import java.util.List;
-
-/**
- * HdmiSwitchClient represents HDMI-CEC logical device of type Switch in the Android system which
- * acts as switch.
- *
- * <p>HdmiSwitchClient has a CEC device type of HdmiDeviceInfo.DEVICE_PURE_CEC_SWITCH,
- * but it is used by all Android TV devices that have multiple HDMI inputs,
- * even if it is not a "pure" swicth and has another device type like TV or Player.
- *
- * @hide
- * TODO(b/110094868): unhide and add @SystemApi for Q
- */
-@SystemApi
-public class HdmiSwitchClient extends HdmiClient {
-
-    private static final String TAG = "HdmiSwitchClient";
-
-    /* package */ HdmiSwitchClient(IHdmiControlService service) {
-        super(service);
-    }
-
-    private static IHdmiControlCallback getCallbackWrapper(final SelectCallback callback) {
-        return new IHdmiControlCallback.Stub() {
-            @Override
-            public void onComplete(int result) {
-                callback.onComplete(result);
-            }
-        };
-    }
-
-    // TODO(b/110094868): unhide for Q
-    @Override
-    public int getDeviceType() {
-        return HdmiDeviceInfo.DEVICE_PURE_CEC_SWITCH;
-    }
-
-    /**
-     * Selects a CEC logical device to be a new active source.
-     *
-     * @param logicalAddress logical address of the device to select
-     * @param callback callback to get the result with
-     * @throws {@link IllegalArgumentException} if the {@code callback} is null
-     *
-     * TODO(b/110094868): unhide and add @SystemApi for Q
-     */
-    public void deviceSelect(int logicalAddress, @NonNull SelectCallback callback) {
-        if (callback == null) {
-            throw new IllegalArgumentException("callback must not be null.");
-        }
-        try {
-            mService.deviceSelect(logicalAddress, getCallbackWrapper(callback));
-        } catch (RemoteException e) {
-            Log.e(TAG, "failed to select device: ", e);
-        }
-    }
-
-    /**
-     * Selects a HDMI port to be a new route path.
-     *
-     * @param portId HDMI port to select
-     * @param callback callback to get the result with
-     * @throws {@link IllegalArgumentException} if the {@code callback} is null
-     *
-     * TODO(b/110094868): unhide and add @SystemApi for Q
-     */
-    public void portSelect(int portId, @NonNull SelectCallback callback) {
-        if (callback == null) {
-            throw new IllegalArgumentException("Callback must not be null");
-        }
-        try {
-            mService.portSelect(portId, getCallbackWrapper(callback));
-        } catch (RemoteException e) {
-            Log.e(TAG, "failed to select port: ", e);
-        }
-    }
-
-    /**
-     * Returns all the CEC devices connected to the device.
-     *
-     * <p>This only applies to device with multiple HDMI inputs
-     *
-     * @return list of {@link HdmiDeviceInfo} for connected CEC devices. Empty list is returned if
-     * there is none.
-     *
-     * TODO(b/110094868): unhide and add @SystemApi for Q
-     */
-    public List<HdmiDeviceInfo> getDeviceList() {
-        try {
-            return mService.getDeviceList();
-        } catch (RemoteException e) {
-            Log.e("TAG", "Failed to call getDeviceList():", e);
-            return Collections.<HdmiDeviceInfo>emptyList();
-        }
-    }
-
-    /**
-     * Callback interface used to get the result of {@link #deviceSelect} or {@link #portSelect}.
-     *
-     * TODO(b/110094868): unhide and add @SystemApi for Q
-     */
-    public interface SelectCallback {
-
-        /**
-         * Called when the operation is finished.
-         *
-         * @param result the result value of {@link #deviceSelect} or {@link #portSelect}.
-         */
-        void onComplete(int result);
-    }
-}
-- 
2.10.2

