From 4b5c00d58365b4408cbe7720b0b82ccf65209ecc Mon Sep 17 00:00:00 2001
From: Lu Wang <lu.wang@amlogic.com>
Date: Fri, 1 Feb 2019 18:39:47 +0800
Subject: [PATCH] Music: add random and loop play function [1/1]

PD#SWPL-4569

Problem:
can't loop and random play

Solution:
implement loop and fix play function

Verify:
ampere

Change-Id: I7818c748a73acc20b6c5345e59549e615dada02b
Signed-off-by: Lu Wang <lu.wang@amlogic.com>
---
 src/com/android/music/MediaPlaybackActivity.java | 56 ++++++++++++++++++++++--
 src/com/android/music/MediaPlaybackService.java  | 39 +++++++++++++++++
 src/com/android/music/TrackBrowserActivity.java  |  3 ++
 src/com/android/music/utils/Playback.java        | 25 +++++++----
 4 files changed, 110 insertions(+), 13 deletions(-)

diff --git a/src/com/android/music/MediaPlaybackActivity.java b/src/com/android/music/MediaPlaybackActivity.java
index 6b83073..6910a81 100644
--- a/src/com/android/music/MediaPlaybackActivity.java
+++ b/src/com/android/music/MediaPlaybackActivity.java
@@ -307,7 +307,7 @@ public class MediaPlaybackActivity
                     mShuffleButton.setVisibility(View.VISIBLE);
                     mQueueButton.setVisibility(View.VISIBLE);
                     setRepeatButtonImage(null);
-                    setShuffleButtonImage();
+                    setShuffleButtonImage(null);
                     setPauseButtonImage();
                     updateTrackInfo();
                     mHandler.post(new Runnable() {
@@ -604,8 +604,35 @@ public class MediaPlaybackActivity
 
     private void toggleShuffle() {
         // TODO(b/36371715): Implement shuffle for SHUFFLE_NORMAL, SHUFFLE_AUTO, SHUFFLE_NONE
-        LogHelper.d(TAG, "Shuffle not implemented yet");
-        Toast.makeText(this, "Shuffle not implemented yet", Toast.LENGTH_SHORT).show();
+        //LogHelper.d(TAG, "Shuffle not implemented yet");
+        //Toast.makeText(this, "Shuffle not implemented yet", Toast.LENGTH_SHORT).show();
+        LogHelper.d(TAG, "shuffle button clicked");
+        if (getMediaController() == null) return;
+        Bundle extras = getMediaController().getExtras();
+        if (extras == null) return;
+        MediaPlaybackService.ShuffleMode shuffleMode =
+                MediaPlaybackService.ShuffleMode
+                        .values()[extras.getInt(MediaPlaybackService.SHUFFLE_MODE)];
+        MediaPlaybackService.ShuffleMode nextShuffletMode = MediaPlaybackService.ShuffleMode.SHUFFLE_AUTO;
+        switch (shuffleMode) {
+            case SHUFFLE_NONE:
+                nextShuffletMode = MediaPlaybackService.ShuffleMode.SHUFFLE_AUTO;
+                showToast(R.string.shuffle_on_notif);
+                break;
+            case SHUFFLE_AUTO:
+                nextShuffletMode = MediaPlaybackService.ShuffleMode.SHUFFLE_NONE;
+                showToast(R.string.shuffle_off_notif);
+                break;
+        }
+        setShuffleMode(nextShuffletMode);
+        setShuffleButtonImage(nextShuffletMode);
+    }
+
+    private void setShuffleMode(MediaPlaybackService.ShuffleMode shuffleMode) {
+        Bundle extras = new Bundle();
+        extras.putInt(MediaPlaybackService.SHUFFLE_MODE, shuffleMode.ordinal());
+        getMediaController().getTransportControls().sendCustomAction(
+                MediaPlaybackService.CMD_SHUFFLE, extras);
     }
 
     private void setRepeatMode(MediaPlaybackService.RepeatMode repeatMode) {
@@ -645,9 +672,30 @@ public class MediaPlaybackActivity
         mToast.show();
     }
 
-    private void setShuffleButtonImage() {
+    /*private void setShuffleButtonImage() {
         if (getMediaController() == null) return;
         mShuffleButton.setImageResource(R.drawable.ic_mp_shuffle_off_btn);
+    }*/
+
+    private void setShuffleButtonImage(MediaPlaybackService.ShuffleMode shuffleMode) {
+        if (getMediaController() == null) return;
+        Bundle extras = getMediaController().getExtras();
+        if (extras == null) return;
+        if (shuffleMode == null) {
+            shuffleMode = MediaPlaybackService.ShuffleMode
+                                 .values()[extras.getInt(MediaPlaybackService.SHUFFLE_MODE)];
+        }
+        switch (shuffleMode) {
+            case SHUFFLE_NONE:
+                mShuffleButton.setImageResource(R.drawable.ic_mp_shuffle_off_btn);
+                break;
+            case SHUFFLE_AUTO:
+                mShuffleButton.setImageResource(R.drawable.ic_mp_shuffle_on_btn);
+                break;
+            default:
+                mShuffleButton.setImageResource(R.drawable.ic_mp_shuffle_off_btn);
+                break;
+        }
     }
 
     private void setPauseButtonImage() {
diff --git a/src/com/android/music/MediaPlaybackService.java b/src/com/android/music/MediaPlaybackService.java
index 70d4f4b..fa89792 100644
--- a/src/com/android/music/MediaPlaybackService.java
+++ b/src/com/android/music/MediaPlaybackService.java
@@ -55,8 +55,14 @@ public class MediaPlaybackService extends MediaBrowserService implements Playbac
     public static final String CMD_REPEAT = "CMD_PAUSE";
     public static final String REPEAT_MODE = "REPEAT_MODE";
 
+    public static final String CMD_SHUFFLE = "CMD_SHUFFLE";
+    public static final String SHUFFLE_MODE = "SHUFFLE_MODE";
+
     public enum RepeatMode { REPEAT_NONE, REPEAT_ALL, REPEAT_CURRENT }
 
+    // add shuffle mode SHUFFLE_NONE, SHUFFLE_AUTO
+    public enum ShuffleMode { SHUFFLE_NONE, SHUFFLE_AUTO }
+
     // Music catalog manager
     private MusicProvider mMusicProvider;
     private MediaSession mSession;
@@ -70,6 +76,9 @@ public class MediaPlaybackService extends MediaBrowserService implements Playbac
     private Playback mPlayback;
     // Default mode is repeat none
     private RepeatMode mRepeatMode = RepeatMode.REPEAT_NONE;
+
+    // Default mode is shuffle off
+    private ShuffleMode mShuffleMode = ShuffleMode.SHUFFLE_NONE;
     // Extra information for this session
     private Bundle mExtras;
 
@@ -89,6 +98,7 @@ public class MediaPlaybackService extends MediaBrowserService implements Playbac
         // Set extra information
         mExtras = new Bundle();
         mExtras.putInt(REPEAT_MODE, mRepeatMode.ordinal());
+        mExtras.putInt(SHUFFLE_MODE, mShuffleMode.ordinal());
         mSession.setExtras(mExtras);
         // Enable callbacks from MediaButtons and TransportControls
         mSession.setFlags(MediaSession.FLAG_HANDLES_MEDIA_BUTTONS
@@ -479,6 +489,12 @@ public class MediaPlaybackService extends MediaBrowserService implements Playbac
                     mSession.setExtras(mExtras);
                     LogHelper.d(TAG, "modified repeatMode=", mRepeatMode);
                     break;
+                case CMD_SHUFFLE:
+                    mShuffleMode = ShuffleMode.values()[extras.getInt(SHUFFLE_MODE)];
+                    mExtras.putInt(SHUFFLE_MODE, mShuffleMode.ordinal());
+                    mSession.setExtras(mExtras);
+                    LogHelper.d(TAG, "modified shuffleMode=", mShuffleMode);
+                    break;
                 default:
                     LogHelper.d(TAG, "Unkown action=", action);
                     break;
@@ -685,9 +701,20 @@ public class MediaPlaybackService extends MediaBrowserService implements Playbac
      */
     @Override
     public void onCompletion() {
+        LogHelper.d(TAG, "[onCompletion]mRepeatMode:"+mRepeatMode + ",mCurrentIndexOnQueue:" + mCurrentIndexOnQueue
+            + ",mPlayingQueue.size():" + mPlayingQueue.size());
         // The media player finished playing the current song, so we go ahead
         // and start the next.
         if (mPlayingQueue != null && !mPlayingQueue.isEmpty()) {
+            if (mShuffleMode == ShuffleMode.SHUFFLE_AUTO) {
+                mCurrentIndexOnQueue = getRandomMusicIndex();
+                LogHelper.d(TAG, "onCompletion, mShuffleMode=" + mShuffleMode + ",mCurrentIndexOnQueue:" + mCurrentIndexOnQueue);
+                if (mCurrentIndexOnQueue >= mPlayingQueue.size()) {
+                    mCurrentIndexOnQueue = 0;
+                }
+                handlePlayRequest();
+                return;
+            }
             switch (mRepeatMode) {
                 case REPEAT_ALL:
                     // Increase the index
@@ -718,6 +745,18 @@ public class MediaPlaybackService extends MediaBrowserService implements Playbac
         }
     }
 
+    /**
+     * get Random playQueue index
+     */
+    public int getRandomMusicIndex() {
+        if (mPlayingQueue != null) {
+            Random rand = new Random();
+            return rand.nextInt(mPlayingQueue.size());
+        }
+        return 0;
+
+    }
+
     @Override
     public void onPlaybackStatusChanged(int state) {
         updatePlaybackState(null);
diff --git a/src/com/android/music/TrackBrowserActivity.java b/src/com/android/music/TrackBrowserActivity.java
index 7fb41b4..c6ebd25 100644
--- a/src/com/android/music/TrackBrowserActivity.java
+++ b/src/com/android/music/TrackBrowserActivity.java
@@ -313,5 +313,8 @@ public class TrackBrowserActivity extends ListActivity {
         if (item.isPlayable()) {
             getMediaController().getTransportControls().playFromMediaId(item.getMediaId(), null);
         }
+        Intent intent = new Intent(Intent.ACTION_PICK);
+        intent = new Intent(this, MediaPlaybackActivity.class);
+        this.startActivity(intent);
     }
 }
diff --git a/src/com/android/music/utils/Playback.java b/src/com/android/music/utils/Playback.java
index 02114bd..5ee7799 100644
--- a/src/com/android/music/utils/Playback.java
+++ b/src/com/android/music/utils/Playback.java
@@ -107,6 +107,7 @@ public class Playback implements AudioManager.OnAudioFocusChangeListener, OnComp
             mCallback.onPlaybackStatusChanged(mState);
         }
         mCurrentPosition = getCurrentStreamPosition();
+        Log.d(TAG, "stop,mCurrentPosition:" + mCurrentPosition);
         // Give up Audio focus
         giveUpAudioFocus();
         unregisterAudioNoisyReceiver();
@@ -134,6 +135,7 @@ public class Playback implements AudioManager.OnAudioFocusChangeListener, OnComp
     }
 
     public int getCurrentStreamPosition() {
+        Log.d(TAG, "getCurrentStreamPosition,mCurrentPosition:" + mCurrentPosition);
         return mMediaPlayer != null ? mMediaPlayer.getCurrentPosition() : mCurrentPosition;
     }
 
@@ -143,14 +145,17 @@ public class Playback implements AudioManager.OnAudioFocusChangeListener, OnComp
         registerAudioNoisyReceiver();
         String mediaId = item.getDescription().getMediaId();
         boolean mediaHasChanged = !TextUtils.equals(mediaId, mCurrentMediaId);
+        Log.i(TAG,"[play]mediaHasChanged:" +mediaHasChanged);
         if (mediaHasChanged) {
             mCurrentPosition = 0;
             mCurrentMediaId = mediaId;
         }
 
         if (mState == PlaybackState.STATE_PAUSED && !mediaHasChanged && mMediaPlayer != null) {
+            Log.i(TAG,"[play]--1--:");
             configMediaPlayerState();
         } else {
+            Log.i(TAG,"[play]--2--:");
             mState = PlaybackState.STATE_STOPPED;
             relaxResources(false); // release everything except MediaPlayer
             MediaMetadata track =
@@ -200,6 +205,7 @@ public class Playback implements AudioManager.OnAudioFocusChangeListener, OnComp
             if (mMediaPlayer != null && mMediaPlayer.isPlaying()) {
                 mMediaPlayer.pause();
                 mCurrentPosition = mMediaPlayer.getCurrentPosition();
+                Log.d(TAG, "pause,mCurrentPosition:" + mCurrentPosition);
             }
             // while paused, retain the MediaPlayer but give up audio focus
             relaxResources(false);
@@ -218,6 +224,7 @@ public class Playback implements AudioManager.OnAudioFocusChangeListener, OnComp
         if (mMediaPlayer == null) {
             // If we do not have a current media player, simply update the current position
             mCurrentPosition = position;
+            Log.d(TAG, "seekTo,mCurrentPosition:" + mCurrentPosition);
         } else {
             if (mMediaPlayer.isPlaying()) {
                 mState = PlaybackState.STATE_BUFFERING;
@@ -270,7 +277,7 @@ public class Playback implements AudioManager.OnAudioFocusChangeListener, OnComp
      * you are sure this is the case.
      */
     private void configMediaPlayerState() {
-        Log.d(TAG, "configMediaPlayerState. mAudioFocus=" + mAudioFocus);
+        Log.d(TAG, "configMediaPlayerState. mAudioFocus=" + mAudioFocus +",mCurrentPosition:" + mCurrentPosition);
         if (mAudioFocus == AUDIO_NO_FOCUS_NO_DUCK) {
             // If we don't have audio focus and can't duck, we have to pause,
             if (mState == PlaybackState.STATE_PLAYING) {
@@ -289,14 +296,14 @@ public class Playback implements AudioManager.OnAudioFocusChangeListener, OnComp
                 if (mMediaPlayer != null && !mMediaPlayer.isPlaying()) {
                     Log.d(TAG,
                             "configMediaPlayerState startMediaPlayer. seeking to "
-                                    + mCurrentPosition);
-                    if (mCurrentPosition == mMediaPlayer.getCurrentPosition()) {
-                        mMediaPlayer.start();
-                        mState = PlaybackState.STATE_PLAYING;
-                    } else {
-                        mMediaPlayer.seekTo(mCurrentPosition);
-                        mState = PlaybackState.STATE_BUFFERING;
-                    }
+                                    + mCurrentPosition + ",getCurrentPosition:" + mMediaPlayer.getCurrentPosition());
+                    //if (mCurrentPosition == mMediaPlayer.getCurrentPosition()) {
+                    mMediaPlayer.start();
+                    mState = PlaybackState.STATE_PLAYING;
+                    //} else {
+                        //mMediaPlayer.seekTo(mCurrentPosition);
+                        //mState = PlaybackState.STATE_BUFFERING;
+                    //}
                 }
                 mPlayOnFocusGain = false;
             }
-- 
2.10.2

