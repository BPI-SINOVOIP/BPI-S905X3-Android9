From a16ed09cd4112886fd326df21c45bb9e94ced617 Mon Sep 17 00:00:00 2001
From: Chaomin Zheng <chaomin.zheng@amlogic.com>
Date: Thu, 26 Apr 2018 12:57:55 +0800
Subject: [PATCH] Audio:update device gain value when setvolume[3/3]

PD# 164183

update device gain value when setvolume

Change-Id: Id5006a151ae70008f9714f51060d3a0f8ac349ee
---
 .../include/AudioOutputDescriptor.h                |  4 ++
 .../src/AudioOutputDescriptor.cpp                  | 72 ++++++++++++++++++++++
 .../managerdefault/AudioPolicyManager.cpp          | 18 ++++++
 .../managerdefault/AudioPolicyManager.h            |  2 +
 4 files changed, 96 insertions(+)

diff --git a/services/audiopolicy/common/managerdefinitions/include/AudioOutputDescriptor.h b/services/audiopolicy/common/managerdefinitions/include/AudioOutputDescriptor.h
index 5e5d38b..7288551 100644
--- a/services/audiopolicy/common/managerdefinitions/include/AudioOutputDescriptor.h
+++ b/services/audiopolicy/common/managerdefinitions/include/AudioOutputDescriptor.h
@@ -86,6 +86,8 @@ public:
                                         // device selection. See checkDeviceMuteStrategies()
     AudioPolicyClientInterface *mClientInterface;
 
+    virtual bool updateGain(audio_stream_type_t stream, audio_devices_t device, float mediaVolume);
+
 protected:
     audio_patch_handle_t mPatchHandle;
     audio_port_handle_t mId;
@@ -137,6 +139,8 @@ public:
                                      const sp<SwAudioOutputDescriptor>& output2,
                                      audio_io_handle_t *ioHandle);
 
+    bool updateGain(audio_stream_type_t stream, audio_devices_t device, float mediaVolume);
+
     const sp<IOProfile> mProfile;          // I/O profile this output derives from
     audio_io_handle_t mIoHandle;           // output handle
     uint32_t mLatency;                  //
diff --git a/services/audiopolicy/common/managerdefinitions/src/AudioOutputDescriptor.cpp b/services/audiopolicy/common/managerdefinitions/src/AudioOutputDescriptor.cpp
index 294a2a6..74c085f 100644
--- a/services/audiopolicy/common/managerdefinitions/src/AudioOutputDescriptor.cpp
+++ b/services/audiopolicy/common/managerdefinitions/src/AudioOutputDescriptor.cpp
@@ -218,6 +218,78 @@ void AudioOutputDescriptor::log(const char* indent)
           indent, mId, mId, mSamplingRate, mFormat, mChannelMask);
 }
 
+bool AudioOutputDescriptor::updateGain(audio_stream_type_t stream __unused,
+        audio_devices_t device __unused, float mediaVolume __unused)
+{
+    return false;
+}
+
+bool SwAudioOutputDescriptor::updateGain(audio_stream_type_t stream __unused,
+        audio_devices_t device, float mediaVolume)
+{
+    if (mProfile == 0) {
+        ALOGE("Error: this SwAudioOutputDescriptor doesn't have valid mProfile!");
+        return false;
+    }
+
+    DeviceVector supportedDevices = mProfile->getSupportedDevices().getDevicesFromType(device);
+    sp<DeviceDescriptor> deviceDesc = NULL;
+    sp<AudioPort> audioPort = NULL;
+    for (size_t i = 0; i < supportedDevices.size(); i ++) {
+        deviceDesc = supportedDevices.itemAt(i);
+        if (deviceDesc->type() == device) {
+            audioPort = deviceDesc->getAudioPort();
+            break;
+        }
+        deviceDesc = NULL;
+    }
+
+    if (deviceDesc == NULL || audioPort == NULL) {
+        ALOGE("Error: failed to get device descriptor or audio port!");
+        return false;
+    }
+
+    AudioGainCollection gainCol = audioPort->getGains();
+    if (gainCol.empty()) {
+        ALOGE("Error: audio gain collection is empty for current port");
+        return false;
+    }
+
+    int gainMinValueInMb = gainCol[0]->getMinValueInMb();
+    int gainMaxValueInMb = gainCol[0]->getMaxValueInMb();
+    int gainStepValueInMb = gainCol[0]->getStepValueInMb();
+    int steps = (gainMaxValueInMb - gainMinValueInMb) / gainStepValueInMb;
+    int gainValue = gainMinValueInMb;
+    if (mediaVolume < 1.0f) {
+        gainValue += gainStepValueInMb * (int) (mediaVolume * steps + 0.5);
+    } else {
+        gainValue = gainMaxValueInMb;
+    }
+
+    struct audio_port_config newConfig;
+    struct audio_port_config backupConfig;
+    deviceDesc->toAudioPortConfig(&newConfig);
+    newConfig.config_mask = AUDIO_PORT_CONFIG_GAIN;
+    newConfig.type = AUDIO_PORT_TYPE_DEVICE;
+    newConfig.gain.values[0] = gainValue;
+    newConfig.gain.index = 0;
+    newConfig.gain.mode = AUDIO_GAIN_MODE_JOINT;
+    newConfig.ext.device.type = device;
+    status_t status = deviceDesc->applyAudioPortConfig(&newConfig, &backupConfig);
+
+    if (status != NO_ERROR) {
+        ALOGE("Error to apply new config, status = %d", status);
+        return false;
+    }
+    status = mClientInterface->setAudioPortConfig(&newConfig, 0);
+    if (status != NO_ERROR) {
+        deviceDesc->applyAudioPortConfig(&backupConfig);
+        ALOGE("Error to setAudioPortConfig, status = %d", status);
+        return false;
+    }
+    return true;
+}
+
 // SwAudioOutputDescriptor implementation
 SwAudioOutputDescriptor::SwAudioOutputDescriptor(const sp<IOProfile>& profile,
                                                  AudioPolicyClientInterface *clientInterface)
diff --git a/services/audiopolicy/managerdefault/AudioPolicyManager.cpp b/services/audiopolicy/managerdefault/AudioPolicyManager.cpp
index 3775551..1d22064 100644
--- a/services/audiopolicy/managerdefault/AudioPolicyManager.cpp
+++ b/services/audiopolicy/managerdefault/AudioPolicyManager.cpp
@@ -3956,6 +3956,8 @@ void AudioPolicyManager::loadConfig() {
 status_t AudioPolicyManager::initialize() {
     mVolumeCurves->initializeVolumeCurves(getConfig().isSpeakerDrcEnabled());
 
+    mIsPlatformTelevision = property_get_bool("ro.platform.is.tv", false /* default_value */);
+
     // Once policy config has been parsed, retrieve an instance of the engine and initialize it.
     audio_policy::EngineInstance *engineInstance = audio_policy::EngineInstance::getInstance();
     if (!engineInstance) {
@@ -5646,6 +5648,22 @@ status_t AudioPolicyManager::checkAndSetVolume(audio_stream_type_t stream,
         volumeDb = 0.0f;
     }
 
+    if (mIsPlatformTelevision) {
+        if (device == AUDIO_DEVICE_OUT_HDMI_ARC ||
+            device == AUDIO_DEVICE_OUT_WIRED_HEADPHONE ||
+            (device & AUDIO_DEVICE_OUT_SPEAKER)) {
+            volumeDb = 0.0f;
+        }
+        if (device == AUDIO_DEVICE_OUT_SPEAKER && outputDesc->isStreamActive(stream)) {
+            //ignoring the "index" passed as argument and always use MUSIC stream index
+            //for all stream types works on TV because all stream types are aliases of MUSIC.
+            int volumeIndex = mVolumeCurves->getVolumeIndex(AUDIO_STREAM_MUSIC, device);
+            int volumeMaxIndex = mVolumeCurves->getVolumeIndexMax(AUDIO_STREAM_MUSIC);
+            float mediaVolume = (float) volumeIndex / (float) volumeMaxIndex;
+            outputDesc->updateGain(stream, device, mediaVolume);
+        }
+    }
+
     outputDesc->setVolume(volumeDb, stream, device, delayMs, force);
 
     if (stream == AUDIO_STREAM_VOICE_CALL ||
diff --git a/services/audiopolicy/managerdefault/AudioPolicyManager.h b/services/audiopolicy/managerdefault/AudioPolicyManager.h
index b954714..c781588 100644
--- a/services/audiopolicy/managerdefault/AudioPolicyManager.h
+++ b/services/audiopolicy/managerdefault/AudioPolicyManager.h
@@ -557,6 +557,8 @@ protected:
         SessionRouteMap mOutputRoutes = SessionRouteMap(SessionRouteMap::MAPTYPE_OUTPUT);
         SessionRouteMap mInputRoutes = SessionRouteMap(SessionRouteMap::MAPTYPE_INPUT);
 
+        bool    mIsPlatformTelevision;
+
         bool    mLimitRingtoneVolume;        // limit ringtone volume to music volume if headset connected
         audio_devices_t mDeviceForStrategy[NUM_STRATEGIES];
         float   mLastVoiceVolume;            // last voice volume value sent to audio HAL
-- 
1.9.1

