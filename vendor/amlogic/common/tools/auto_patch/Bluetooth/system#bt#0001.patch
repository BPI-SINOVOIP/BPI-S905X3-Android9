From 70db49d04741f652aec4e31670ad1e48697ce8df Mon Sep 17 00:00:00 2001
From: "jiejing.wang" <jiejing.wang@amlogic.com>
Date: Mon, 28 Jan 2019 15:17:26 +0800
Subject: [PATCH] audio: bt: add volume control and effect [3/3]

PD#TV-1802

Problem:
bt without effect and volume control

Solution:
add effect and volume control

Verify:
verify by r311

Change-Id: I934080f2fe7308348f09d64bf97a30a104f28daf
Signed-off-by: jiejing.wang <jiejing.wang@amlogic.com>
---
 audio_a2dp_hw/src/audio_a2dp_hw.cc | 117 ++++++++++++++++++++++++++++++++++---
 internal_include/bt_target.h       |  11 ++++
 stack/btm/btm_ble.cc               |   3 +
 stack/gatt/gatt_api.cc             |   2 +-
 stack/hcic/hciblecmds.cc           |  21 +++++++
 stack/include/hcidefs.h            |   4 ++
 stack/include/hcimsgs.h            |   8 +++
 7 files changed, 157 insertions(+), 9 deletions(-)

diff --git a/audio_a2dp_hw/src/audio_a2dp_hw.cc b/audio_a2dp_hw/src/audio_a2dp_hw.cc
index 3622298..c885e2e 100644
--- a/audio_a2dp_hw/src/audio_a2dp_hw.cc
+++ b/audio_a2dp_hw/src/audio_a2dp_hw.cc
@@ -42,7 +42,9 @@
 #include <hardware/audio.h>
 #include <hardware/hardware.h>
 #include <system/audio.h>
-
+#if defined(AUDIO_EFFECT_EXTERN_DEVICE)
+#include <cutils/str_parms.h>
+#endif
 #include "osi/include/hash_map_utils.h"
 #include "osi/include/log.h"
 #include "osi/include/osi.h"
@@ -62,7 +64,9 @@
 #define SEC_TO_NS 1000000000
 #define MS_TO_NS 1000000
 #define DELAY_TO_NS 100000
-
+#if defined(AUDIO_EFFECT_EXTERN_DEVICE)
+#define VAL_LEN 64
+#endif
 #define MIN_DELAY_MS 100
 #define MAX_DELAY_MS 1000
 
@@ -107,6 +111,7 @@ struct a2dp_audio_device {
   std::recursive_mutex* mutex;  // See note below on mutex acquisition order.
   struct a2dp_stream_in* input;
   struct a2dp_stream_out* output;
+
 };
 
 struct a2dp_config {
@@ -132,6 +137,13 @@ struct a2dp_stream_out {
   struct a2dp_stream_common common;
   uint64_t frames_presented;  // frames written, never reset
   uint64_t frames_rendered;   // frames written, reset on standby
+#if defined(AUDIO_EFFECT_EXTERN_DEVICE)
+  float bt_gain;
+  float right_gain;
+  float left_gain;
+  int bt_unmute;
+#endif
+
 };
 
 struct a2dp_stream_in {
@@ -921,7 +933,12 @@ static ssize_t out_write(struct audio_stream_out* stream, const void* buffer,
   struct a2dp_stream_out* out = (struct a2dp_stream_out*)stream;
   int sent = -1;
   size_t write_bytes = bytes;
-
+#if defined(AUDIO_EFFECT_EXTERN_DEVICE)
+  int16_t *outbuff;
+  int32_t *outbuff1;
+  float tmp = 0;
+  int chan_num = audio_channel_count_from_out_mask(out->common.cfg.channel_mask);
+#endif
   DEBUG("write %zu bytes (fd %d)", bytes, out->common.audio_fd);
 
   std::unique_lock<std::recursive_mutex> lock(*out->common.mutex);
@@ -956,6 +973,49 @@ static ssize_t out_write(struct audio_stream_out* stream, const void* buffer,
   }
 
   lock.unlock();
+#if defined(AUDIO_EFFECT_EXTERN_DEVICE)
+  if (out->common.cfg.format == AUDIO_FORMAT_PCM_16_BIT) {
+    outbuff = (int16_t *)buffer;
+    outbuff1 = NULL;
+    if (chan_num == 2) {
+      for (unsigned int i = 0; i < write_bytes/2; i++) {
+        if (i % 2 == 0) {
+          tmp = (float)(outbuff[i] * out->bt_gain * out->bt_unmute * out->left_gain);
+          outbuff[i] = (int16_t)tmp;
+        } else {
+          tmp = (float)(outbuff[i] * out->bt_gain * out->bt_unmute * out->right_gain);
+          outbuff[i] = (int16_t)tmp;
+        }
+      }
+    } else {
+      for (unsigned int i = 0; i < write_bytes/2; i++) {
+        tmp = (float)(outbuff[i] * out->bt_gain * out->bt_unmute);
+        outbuff[i] = (int16_t)tmp;
+      }
+    }
+  }
+
+  if (out->common.cfg.format == AUDIO_FORMAT_PCM_32_BIT) {
+    outbuff1 = (int32_t *)buffer;
+    outbuff = NULL;
+    if (chan_num == 2) {
+      for (unsigned int i = 0; i < write_bytes/4; i++) {
+        if (i % 2 == 0) {
+          tmp = (float)(outbuff1[i] * out->bt_gain * out->bt_unmute * out->left_gain);
+          outbuff1[i] = (int32_t)tmp;
+        } else {
+          tmp = (float)(outbuff1[i] * out->bt_gain * out->bt_unmute * out->right_gain);
+          outbuff[i] = (int32_t)tmp;
+        }
+      }
+    } else {
+      for (unsigned int i = 0; i < write_bytes/4; i++) {
+        tmp = (float)(outbuff1[i] * out->bt_gain * out->bt_unmute);
+        outbuff1[i] = (int32_t)tmp;
+      }
+    }
+  }
+#endif
   sent = skt_write(out->common.audio_fd, buffer, write_bytes);
   lock.lock();
 
@@ -1659,7 +1719,12 @@ static int adev_open_output_stream(struct audio_hw_device* dev,
   }
   *stream_out = &out->stream;
   a2dp_dev->output = out;
-
+#if defined(AUDIO_EFFECT_EXTERN_DEVICE)
+  a2dp_dev->output->bt_gain = 1;
+  a2dp_dev->output->bt_unmute = 1;
+  a2dp_dev->output->left_gain = 1;
+  a2dp_dev->output->right_gain = 1;
+#endif
   DEBUG("success");
   /* Delay to ensure Headset is in proper state when START is initiated from
    * DUT immediately after the connection due to ongoing music playback. */
@@ -1706,18 +1771,54 @@ static int adev_set_parameters(struct audio_hw_device* dev,
                                const char* kvpairs) {
   struct a2dp_audio_device* a2dp_dev = (struct a2dp_audio_device*)dev;
   int retval = 0;
-
+#if defined(AUDIO_EFFECT_EXTERN_DEVICE)
+  struct str_parms *parms;
+  int ret = 0;
+  char value[VAL_LEN];
+  ALOGI("%s(kv: %s)", __FUNCTION__, kvpairs);
+  parms = str_parms_create_str(kvpairs);
+#endif
   // prevent interference with adev_close_output_stream
   std::lock_guard<std::recursive_mutex> lock(*a2dp_dev->mutex);
   struct a2dp_stream_out* out = a2dp_dev->output;
-
   if (out == NULL) return retval;
-
   INFO("state %d", out->common.state);
+#if defined(AUDIO_EFFECT_EXTERN_DEVICE)
+  ret = str_parms_get_str(parms, "BT_GAIN", value, sizeof(value));
+  if (ret >= 0) {
+      sscanf(value, "%f", &out->bt_gain);
+      ALOGI("%s() audio bt gain: %f", __func__,out->bt_gain);
+      goto exit;
+    }
 
+  ret = str_parms_get_str(parms, "BT_MUTE", value, sizeof(value));
+  if (ret >= 0) {
+    sscanf(value, "%d", &out->bt_unmute);
+    ALOGI("%s() audio bt unmute: %d", __func__,out->bt_unmute);
+    goto exit;
+  }
+
+  ret = str_parms_get_str(parms, "BT_GAIN_RIGHT", value, sizeof(value));
+  if (ret >= 0) {
+    sscanf(value, "%f %f", &out->right_gain,&out->left_gain);
+    ALOGI("%s() audio bt right gain: %f left gain is %f", __func__,out->right_gain, out->left_gain);
+    goto exit;
+  }
+
+  ret = str_parms_get_str(parms, "BT_GAIN_LEFT", value, sizeof(value));
+  if (ret >= 0) {
+    sscanf(value, "%f %f", &out->left_gain,&out->right_gain);
+    ALOGI("%s() audio bt left gain: %f right gain is %f", __func__,out->left_gain, out->right_gain);
+    goto exit;
+  }
+
+exit:
+#endif
   retval =
       out->stream.common.set_parameters((struct audio_stream*)out, kvpairs);
-
+#if defined(AUDIO_EFFECT_EXTERN_DEVICE)
+  str_parms_destroy (parms);
+#endif
   return retval;
 }
 
diff --git a/internal_include/bt_target.h b/internal_include/bt_target.h
index cf09b15..9d11f79 100644
--- a/internal_include/bt_target.h
+++ b/internal_include/bt_target.h
@@ -1384,6 +1384,17 @@ single PDU.
 #define BTSNOOP_MEM TRUE
 #endif
 
+/******************************************************************************
+ *
+ * Patch: auto patch macro
+ *
+ *****************************************************************************/
+/* wifi/bt coexistence.bug:SWPL-3628 */
+#ifndef MASTER_LATENCY
+#define MASTER_LATENCY TRUE
+#endif
+
+
 #include "bt_trace.h"
 
 #endif /* BT_TARGET_H */
diff --git a/stack/btm/btm_ble.cc b/stack/btm/btm_ble.cc
index ca93e1a..1c41d4e 100644
--- a/stack/btm/btm_ble.cc
+++ b/stack/btm/btm_ble.cc
@@ -1946,6 +1946,9 @@ void btm_ble_conn_complete(uint8_t* p, UNUSED_ATTR uint16_t evt_len,
     STREAM_TO_UINT16(conn_latency, p);
     STREAM_TO_UINT16(conn_timeout, p);
     handle = HCID_GET_HANDLE(handle);
+#if (MASTER_LATENCY == TRUE)
+	btsnd_hcic_write_le_master_latency(handle,0x05,0xF);
+#endif
 
 #if (BLE_PRIVACY_SPT == TRUE)
     peer_addr_type = bda_type;
diff --git a/stack/gatt/gatt_api.cc b/stack/gatt/gatt_api.cc
index b983318..1899276 100644
--- a/stack/gatt/gatt_api.cc
+++ b/stack/gatt/gatt_api.cc
@@ -451,7 +451,7 @@ tGATT_STATUS GATTS_HandleValueIndication(uint16_t conn_id, uint16_t attr_handle,
 
       if (cmd_status == GATT_SUCCESS || cmd_status == GATT_CONGESTED) {
         p_tcb->indicate_handle = indication.handle;
-        gatt_start_conf_timer(p_tcb);
+       // gatt_start_conf_timer(p_tcb);
       }
     }
   }
diff --git a/stack/hcic/hciblecmds.cc b/stack/hcic/hciblecmds.cc
index 30d8d75..9696eb8 100644
--- a/stack/hcic/hciblecmds.cc
+++ b/stack/hcic/hciblecmds.cc
@@ -28,11 +28,32 @@
 #include "btu.h"
 #include "hcidefs.h"
 #include "hcimsgs.h"
+#if (MASTER_LATENCY == TRUE)
+#include "btm_api.h"
+#endif
 
 #include <base/bind.h>
 #include <stddef.h>
 #include <string.h>
 
+#if (MASTER_LATENCY == TRUE)
+uint8_t btsnd_hcic_write_le_master_latency(uint16_t handle,uint16_t master_latency, uint16_t master_latency_timeout){
+
+    uint8_t               *pp;
+    uint8_t             command[HCIC_PARAM_SIZE_WRITE_LE_MASTER_LATENCY];
+    pp = command;
+
+    UINT16_TO_STREAM (pp, handle);
+
+    UINT16_TO_STREAM (pp, master_latency);
+    UINT16_TO_STREAM (pp, master_latency_timeout);
+
+    BTM_VendorSpecificCommand (HCI_BLE_WRITE_LE_MASTER_LATENCY, HCIC_PARAM_SIZE_WRITE_LE_MASTER_LATENCY, command, NULL);
+
+    return (TRUE);
+}
+#endif
+
 void btsnd_hcic_ble_set_local_used_feat(uint8_t feat_set[8]) {
   BT_HDR* p = (BT_HDR*)osi_malloc(HCI_CMD_BUF_SIZE);
   uint8_t* pp = (uint8_t*)(p + 1);
diff --git a/stack/include/hcidefs.h b/stack/include/hcidefs.h
index db58163..01de06e 100644
--- a/stack/include/hcidefs.h
+++ b/stack/include/hcidefs.h
@@ -414,6 +414,10 @@
 /* Energy info OCF */
 #define HCI_BLE_ENERGY_INFO_OCF (0x0159 | HCI_GRP_VENDOR_SPECIFIC)
 
+#if (MASTER_LATENCY == TRUE)
+#define HCI_BLE_WRITE_LE_MASTER_LATENCY (0x01C7 | HCI_GRP_VENDOR_SPECIFIC)
+#endif
+
 /* Extended BLE Scan parameters OCF */
 #define HCI_BLE_EXTENDED_SCAN_PARAMS_OCF (0x015A | HCI_GRP_VENDOR_SPECIFIC)
 
diff --git a/stack/include/hcimsgs.h b/stack/include/hcimsgs.h
index a909751..e657d0e 100644
--- a/stack/include/hcimsgs.h
+++ b/stack/include/hcimsgs.h
@@ -688,6 +688,9 @@ extern void btsnd_hcic_vendor_spec_cmd(void* buffer, uint16_t opcode,
 #define HCIC_PARAM_SIZE_BLE_READ_REMOTE_FEAT 2
 #define HCIC_PARAM_SIZE_BLE_ENCRYPT 32
 #define HCIC_PARAM_SIZE_WRITE_LE_HOST_SUPPORTED 2
+#if (MASTER_LATENCY == TRUE)
+#define HCIC_PARAM_SIZE_WRITE_LE_MASTER_LATENCY 6
+#endif
 
 #define HCIC_BLE_RAND_DI_SIZE 8
 #define HCIC_BLE_ENCRYT_KEY_SIZE 16
@@ -767,6 +770,11 @@ extern void btsnd_hcic_ble_add_white_list(uint8_t addr_type,
 extern void btsnd_hcic_ble_remove_from_white_list(uint8_t addr_type,
                                                   const RawAddress& bda);
 
+#if (MASTER_LATENCY == TRUE)
+extern uint8_t btsnd_hcic_write_le_master_latency(uint16_t handle,uint16_t master_latency,
+		uint16_t master_latency_timeout);
+#endif
+
 extern void btsnd_hcic_ble_upd_ll_conn_params(
     uint16_t handle, uint16_t conn_int_min, uint16_t conn_int_max,
     uint16_t conn_latency, uint16_t conn_timeout, uint16_t min_len,
-- 
1.9.1

