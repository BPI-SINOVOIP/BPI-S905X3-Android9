From f04b340c4624aa7b51822ed4dc166e35891f2a2f Mon Sep 17 00:00:00 2001
From: "shipeng.sun" <shipeng.sun@amlogic.com>
Date: Mon, 1 Apr 2019 09:53:05 +0800
Subject: [PATCH] dnsmasq: Add a broadcast for miracast act go allocate
 ipaddress [1/1]

PD#SWPL-6136

Problem:
Add a broadcast for miracast act go allocate ipaddress

Solution:
Add a broadcast for miracast act go allocate ipaddress

Verify:
Verify on darwin

Change-Id: I6a05f595a0452047abb43e446f5745e3ec68a003
Signed-off-by: shipeng.sun <shipeng.sun@amlogic.com>

diff --git a/src/lease.c b/src/lease.c
old mode 100755
new mode 100644
index 985bd73..1720ded
--- a/src/lease.c
+++ b/src/lease.c
@@ -21,6 +21,19 @@
 static struct dhcp_lease *leases = NULL, *old_leases = NULL;
 static int dns_dirty, file_dirty, leases_left;
 
+/**
+* Send broadcast when use for miracast wifi p2p act a go allocate ip address to system
+*/
+static void am_send_broadcast(char * ipaddr, char * hwmac)
+{
+    if (!ipaddr || !hwmac)
+        return;
+    char sendCommand[1024] = { 0 };
+    sprintf(sendCommand, "am broadcast -a android.net.wifi.p2p.IPADDR_INFORMATION --user 0 --es IP_EXTRA %s --es MAC_EXTRA %s", ipaddr, hwmac);
+    if (system(sendCommand) == -1)
+        my_syslog(LOG_ERR, "am broadcast send failed");
+}
+
 void lease_init(time_t now)
 {
   unsigned long ei;
@@ -44,7 +57,7 @@ void lease_init(time_t now)
 	 lease database. */
 #ifdef HAVE_SCRIPT
       if (daemon->lease_change_command)
-	{
+    {
 	  strcpy(daemon->dhcp_buff, daemon->lease_change_command);
 	  strcat(daemon->dhcp_buff, " init");
 	  leasestream = popen(daemon->dhcp_buff, "r");
@@ -76,6 +89,8 @@ void lease_init(time_t now)
 		  &ei, daemon->dhcp_buff2, daemon->namebuff, 
 		  daemon->dhcp_buff, daemon->packet) == 5)
       {
+        //if (daemon->namebuff && daemon->dhcp_buff2)
+            //am_send_broadcast(daemon->namebuff, daemon->dhcp_buff2);
 	hw_len = parse_hex(daemon->dhcp_buff2, (unsigned char *)daemon->dhcp_buff2, DHCP_CHADDR_MAX, NULL, &hw_type);
 	/* For backwards compatibility, no explict MAC address type means ether. */
 	if (hw_type == 0 && hw_len != 0)
@@ -209,8 +224,22 @@ void lease_update_file(time_t now)
 	      ourprintf(&err, "%.2x\n", lease->clid[i]);
 	    }
 	  else
-	    ourprintf(&err, "*\n");	  
-	}
+	    ourprintf(&err, "*\n");
+    if (lease->hwaddr_type == ARPHRD_ETHER && lease->hwaddr_len > 0) {
+        char hwaddr[256] = { 0 };
+        int off = 0;
+        for (i = 0; i < lease->hwaddr_len; i++)
+        {
+          sprintf(hwaddr + off, "%.2x", lease->hwaddr[i]);
+          off += 2;
+          if (i != lease->hwaddr_len - 1) {
+              sprintf(hwaddr + off, ":");
+               off += 1;
+          }
+        }
+        am_send_broadcast(inet_ntoa(lease->addr), hwaddr);
+    }
+    }
       
       if (fflush(daemon->lease_stream) != 0 ||
 	  fsync(fileno(daemon->lease_stream)) < 0)
-- 
1.9.1

